function initESLSymbolicObject(globalObject, objectPrototype, strict) {
  realm := { globalEnv : globalObject };
  esl_symbolic := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(esl_symbolic);
  setInternalProperty(esl_symbolic, "Prototype", objectPrototype);

  apiSymbolicNumber := CreateBuiltInFunctionObject(["var"], "__apiSymbolicNumber", realm, strict, null);
  apiSymbolicString := CreateBuiltInFunctionObject(["var"], "__apiSymbolicString", realm, strict, null);
  apiSymbolicBoolean := CreateBuiltInFunctionObject(["var"], "__apiSymbolicBoolean", realm, strict, null);
  apiSymbolicAssume := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicAssume", realm, strict, null);
  apiSymbolicAssert := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicAssert", realm, strict, null);
  apiIsSymbolic := CreateBuiltInFunctionObject(["expr"], "__apiSymbolicIsSymbolic", realm, strict, null);
  apiLazyObject := CreateBuiltInFunctionObject([], "__apiSymbolicLazyObject", realm, strict, null);
  apiPollutingObject := CreateBuiltInFunctionObject([], "__apiPollutingObject",
    realm, strict, null);

  createBuiltInProperty(esl_symbolic, "any", apiSymbolicString);
  createBuiltInProperty(esl_symbolic, "number", apiSymbolicNumber);
  createBuiltInProperty(esl_symbolic, "string", apiSymbolicString);
  createBuiltInProperty(esl_symbolic, "boolean", apiSymbolicBoolean);
  createBuiltInProperty(esl_symbolic, "assume", apiSymbolicAssume);
  createBuiltInProperty(esl_symbolic, "assert", apiSymbolicAssert);
  createBuiltInProperty(esl_symbolic, "is_symbolic", apiIsSymbolic);
  createBuiltInProperty(esl_symbolic, "lazy_object", apiLazyObject);
  createBuiltInProperty(esl_symbolic, "function", apiLazyObject);
  createBuiltInProperty(esl_symbolic, "polluting_object", apiPollutingObject);

  createBuiltInProperty(apiSymbolicNumber, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicString, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicBoolean, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicAssume, "prototype", objectPrototype);
  createBuiltInProperty(apiSymbolicAssert, "prototype", objectPrototype);
  createBuiltInProperty(apiIsSymbolic, "prototype", objectPrototype);
  createBuiltInProperty(apiLazyObject, "prototype", objectPrototype);
  createBuiltInProperty(apiPollutingObject, "prototype", objectPrototype);

  return esl_symbolic
};

function __apiSymbolicNumber(globalObject, this, NewTarget, strict, params) {
  return extern flt_symbol(l_nth(params, 0))
};

function __apiSymbolicBoolean(globalObject, this, NewTarget, strict, params) {
  return extern bool_symbol(l_nth(params, 0))
};

function __apiSymbolicString(globalObject, this, NewTarget, strict, params) {
  return extern str_symbol(l_nth(params, 0))
};

function __apiSymbolicAssume(globalObject, this, NewTarget, strict, params) {
  extern assume(l_nth(params, 0));
  return 0
};

function __apiSymbolicAssert(globalObject, this, NewTarget, strict, params) {
  e := l_nth(params, 0);
  assert(e);
  return 0
};

function __apiSymbolicIsSymbolic(globalObject, this, NewTarget, strict, params) {
  return extern is_symbolic(l_nth(params, 0))
};


function __apiSymbolicLazyObject(globalObject, this, NewTarget, strict, params) {
  return newLazyObject()
};

function __apiPollutingObject(globalObject, this, NewTarget, strict, params) {
  base := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(base);
  setInternalProperty(base, "Prototype", globalObject);
  base_property := extern str_symbol("bp");

  inner := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(inner);
  setInternalProperty(inner, "Prototype", globalObject);
  inner_property := extern str_symbol("ip");

  inner_most := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(inner_most);
  setInternalProperty(inner_most, "Prototype", globalObject);
  /* setJSProperty */
  /* createBuiltInProperty(inner_most, "toString", "malicious"); */
  /* createBuiltInProperty(inner, inner_property, inner_most); */
  /* createBuiltInProperty(base, base_property, inner); */
  print base;
  return base
}
