function __symNumber(globalObject, this, NewTarget, strict, params) {
  return extern flt_symbol(l_nth(params, 0))
};

function __symBoolean(globalObject, this, NewTarget, strict, params) {
  return extern bool_symbol(l_nth(params, 0))
};

function __fresh_string(globalObject, this, NewTarget, strict, params) {
  str := extern str_symbol("x");
  strObj := StringCreate(str, getStringPrototype(strict));
  replace := CreateBuiltInFunctionObject(["str"], "__fresh_string",
    { globalEnv : globalObject }, strict, null);
  createBuiltInProperty(strObj, "replace", replace);
  return strObj
};

function __symString(globalObject, this, NewTarget, strict, params) {
  id := l_nth(params, 0);
  str := extern str_symbol(id);
  strObj := StringCreate(str, getStringPrototype(strict));
  replace := CreateBuiltInFunctionObject(["str"], "__fresh_string",
    { globalEnv : globalObject }, strict, null);
  createBuiltInProperty(strObj, "replace", replace);
  return strObj
};

function __symAssume(globalObject, this, NewTarget, strict, params) {
  extern assume(l_nth(params, 0));
  return 0
};

function __symAssert(globalObject, this, NewTarget, strict, params) {
  e := l_nth(params, 0);
  assert(e);
  return 0
};

function __symIsSymbolic(globalObject, this, NewTarget, strict, params) {
  return extern is_symbolic(l_nth(params, 0))
};

function __symLazyObject(globalObject, this, NewTarget, strict, params) {
  return newLazyObject()
};

function initESLSymbolicObject(globalObject, objectPrototype, strict) {
  realm := { globalEnv : globalObject };
  esl_symbolic := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(esl_symbolic);
  setInternalProperty(esl_symbolic, "Prototype", objectPrototype);

  apiSymbolicNumber := CreateBuiltInFunctionObject(["var"], "__symNumber",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "number", apiSymbolicNumber);
  createBuiltInProperty(apiSymbolicNumber, "prototype", objectPrototype);

  apiSymbolicString := CreateBuiltInFunctionObject(["var"], "__symString",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "string", apiSymbolicString);
  createBuiltInProperty(esl_symbolic, "any", apiSymbolicString);
  createBuiltInProperty(apiSymbolicString, "prototype", objectPrototype);

  apiSymbolicBoolean := CreateBuiltInFunctionObject(["var"], "__symBoolean",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "boolean", apiSymbolicBoolean);
  createBuiltInProperty(apiSymbolicBoolean, "prototype", objectPrototype);

  apiSymbolicAssume := CreateBuiltInFunctionObject(["expr"], "__symAssume",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "assume", apiSymbolicAssume);
  createBuiltInProperty(apiSymbolicAssume, "prototype", objectPrototype);

  apiSymbolicAssert := CreateBuiltInFunctionObject(["expr"], "__symAssert",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "assert", apiSymbolicAssert);
  createBuiltInProperty(apiSymbolicAssert, "prototype", objectPrototype);

  apiIsSymbolic := CreateBuiltInFunctionObject(["expr"], "__symIsSymbolic",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "is_symbolic", apiIsSymbolic);
  createBuiltInProperty(apiIsSymbolic, "prototype", objectPrototype);

  apiLazyObject := CreateBuiltInFunctionObject([], "__symLazyObject",
    realm, strict, null);
  createBuiltInProperty(esl_symbolic, "lazy_object", apiLazyObject);
  createBuiltInProperty(esl_symbolic, "function", apiLazyObject);
  createBuiltInProperty(apiLazyObject, "prototype", objectPrototype);

  return esl_symbolic
}

