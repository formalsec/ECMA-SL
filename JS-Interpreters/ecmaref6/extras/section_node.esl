function __NodeRequire(globalObject, this, newTarget, strict, params) {
  path := l_nth(params, 0);
  objectPrototype := |Intrinsics|["ObjectPrototype"];
  if (path = "esl_symbolic") {
    return initESLSymbolicObject(globalObject, objectPrototype, strict)
  } elif (path = "os") {
    return createOSObject(globalObject, objectPrototype, strict)
  } elif (path = "fs") {
    return createFSObject(globalObject, objectPrototype, strict)
  } elif (path = "path") {
    return createPathObject(globalObject, objectPrototype, strict)
  } elif (path = "child_process") {
    return createCPObject(globalObject, objectPrototype, strict)
  } elif (path = "mz/child_process") {
    return createCPObject(globalObject, objectPrototype, strict)
  } elif (path = "shelljs") {
    return createShellJSObject(globalObject, objectPrototype, strict)
  } elif (path = "cross-spawn") {
    return createCrossSpawnObject(globalObject, objectPrototype, strict)
  } elif (path = "im-metadata") {
    return createCrossSpawnObject(globalObject, objectPrototype, strict)
  } else {
    return newLazyObject()
  }
};

function initNodeGlobalObject(globalObject, objectPrototype, strict) {
  realm := { globalEnv : globalObject };
  dirname := extern str_symbol("__dirname");
  filename := extern str_symbol("__filename");
  createBuiltInProperty(globalObject, "__dirname", dirname);
  createBuiltInProperty(globalObject, "__filename", filename);

  require := CreateBuiltInFunctionObject(["path"], "__NodeRequire", realm,
    strict, null);
  createBuiltInProperty(globalObject, "require", require);
  createBuiltInProperty(require, "prototype", objectPrototype);

  module := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(module);
  setInternalProperty(module, "Prototype", objectPrototype);
  createBuiltInProperty(globalObject, "module", module);

  exports := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(exports);
  setInternalProperty(module, "Prototype", objectPrototype);
  createBuiltInProperty(module, "exports", exports);
  createBuiltInProperty(globalObject, "exports", exports);

  process := createProcessObject(globalObject, objectPrototype, strict);
  createBuiltInProperty(globalObject, "process", process);
  return 'null
}
