function __process_cwd(globalObject, this, newTarget, strict, params) {
  return extern str_symbol("process.cwd")
};

function createProcessObject(globalObject, objectPrototype, strict) {
  realm := { globalEnv : globalObject };
  newTarget := |Intrinsics|["Array"];
  process := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(process);
  setInternalProperty(process, "Prototype", objectPrototype);

  /* Properties: */
  createBuiltInProperty(process, "arch", extern str_symbol("process.arch"));
  createBuiltInProperty(process, "execPath", extern str_symbol("process.execPath"));
  createBuiltInProperty(process, "platform", extern str_symbol("process.platform"));

  /* Should be a symbolic lazy object, but now it just keeps env empty */
  env := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(env);
  setInternalProperty(env, "Prototype", objectPrototype);
  createBuiltInProperty(process, "env", env);

  items :=
    [ extern str_symbol("argv0")
    , extern str_symbol("argv1")
    , extern str_symbol("argv2")
    , extern str_symbol("argv3")
    , extern str_symbol("argv4")
    ];
  argv := ArrayConstructor('null, 'undefined, newTarget, strict, items, newTarget);
  createBuiltInProperty(process, "argv", argv);

  /* Functions: */
  cwd := CreateBuiltInFunctionObject([], "__process_cwd", realm, strict, null);
  createBuiltInProperty(process, "cwd", cwd);
  createBuiltInProperty(cwd, "prototype", objectPrototype);

  return process
}
