/* TODO:Move to summaries file? */
function __concatStringList(globalObject, this, NewTarget, strict, params) {
  return s_concat(params);
}

function newFunctionObject(target, realm) {
  return CreateBuiltInFunctionObject([], target, realm, false, null);
}

function newLazyObject() {
  realm := { globalEnv : |global| };
  lazyObject := newFunctionObject("lazyConstructor", realm);
  lazyObject.Get := "lazyGet";
  lazyObject.History := [];



  toPrim := newFunctionObject("lazyToPrimitive", realm);
  toPrimDesc := newDataPropertyDescriptorFull(toPrim, false, false, true);
  toPrimProp := getToPrimitivePropertyName();
  setJSProperty(lazyObject, toPrimProp, toPrimDesc);

  format := newFunctionObject("__concatStringList", realm);
  createBuiltInProperty(lazyObject, "format", format);

  ph := newFunctionObject("lazyPrintHistory", realm);
  createBuiltInProperty(lazyObject, "printHistory", ph);

  return lazyObject;
}

function lazyConstructor(globalObject, this, NewTarget, strict, params) {
  F := topExecStack().Function;
  newObj := newLazyObject();
  newObj.History := l_prepend(["call", params], F.History);
  return newObj;
}

function lazyGet(O, P, Receiver) {
  desc := getJSProperty(O, P);
  if (desc != 'undefined) {
    return desc.Value;
  }
  newObj := newLazyObject();
  newObj.History := l_prepend(P, O.History);
  newObjDesc := newDataPropertyDescriptorFull(newObj, true, true, true);
  setJSProperty(O, P, newObjDesc);
  return newObj;
}


function lazyToPrimitive(globalObject, this, NewTarget, strict, params) {
  hint := hd params;
  if (hint == "string" ||| hint == "default") {
    return extern str_symbol("");
  } else if (hint == "number") {
    return extern flt_symbol("");
  } else {
    print ("lazyToPrimitive: invalid hint: '" + hint + "'");
    assert false;
  }
}
