/* Copyright (C) 2022-2025 formalsec programmers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

function __esl_node_path_join(globalObject, this, NewTarget, strict, params) {
  n_params := [];
  foreach (param : params) {
    n_param := ToPrimitive(param, 'String);
    n_params := l_prepend(n_param, n_params);
  }
  n_params := l_reverse(n_params);
  return s_join(n_params, "/");
}

function __esl_node_path_basename(globalObject, this, NewTarget, strict, params) {
  /* TODO: Model basename */
  return hd params;
}

function __esl_node_path_dirname(globalObject, this, NewTarget, strict, params) {
  /* TODO: Model dirname */
  return hd params;
}

function make_path_object(globalObject, objectPrototype, strict) {
  let realm = { globalEnv : globalObject };
  let path = newLazyObject();
  /* setAllInternalMethodsOfOrdinaryObject(path); */
  setInternalProperty(path, "prototype", objectPrototype);

  /* Functions: */
  let join = CreateBuiltInFunctionObject([], "__esl_node_path_join", realm, strict, null);
  createBuiltInProperty(join, "prototype", objectPrototype);
  createBuiltInProperty(path, "join", join);

  let basename = CreateBuiltInFunctionObject([], "__esl_node_path_basename", realm, strict, null);
  createBuiltInProperty(basename, "prototype", objectPrototype);
  createBuiltInProperty(path, "basename", basename);

  let dirname = CreateBuiltInFunctionObject([], "__esl_node_path_dirname", realm, strict, null);
  createBuiltInProperty(dirname, "prototype", objectPrototype);
  createBuiltInProperty(path, "dirname", dirname);


  let normalize = CreateBuiltInFunctionObject([], "__esl_node_path_dirname", realm, strict, null);
  createBuiltInProperty(normalize, "prototype", objectPrototype);
  createBuiltInProperty(path, "normalize", normalize);

  return path;
}
