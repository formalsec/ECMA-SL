/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

function __esl_node_http_listen(globalObject, this, NewTarget, strict, params) {
  let port = hd params;
  let request = NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(request);
  createBuiltInProperty(request, "url", extern str_symbol("request.url"));

  let response = newLazyObject();
  let args = [ request, response ];
  let listener = this.listener;
  let result = Call(null, null, listener, this, args);
  /* FIXME: return what? */
  return result;
}

function __esl_node_http_createServer(globalObject, this, NewTarget, strict, params) {
  let realm = { globalEnv : globalObject };
  let server = NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(server);

  /* Register http listener */
  server.listener := hd params;

  let listen = CreateBuiltInFunctionObject([], "__esl_node_http_listen", realm, strict, null);
  createBuiltInProperty(server, "listen", listen);

  return server;
}

function make_http_object(globalObject, objectPrototype, strict) {
  let realm = { globalEnv : globalObject };
  let http = NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(http);

  let createServer = CreateBuiltInFunctionObject([], "__esl_node_http_createServer", realm, strict, null);
  createBuiltInProperty(createServer, "prototype", objectPrototype);
  createBuiltInProperty(http, "createServer", createServer);

  return http;
}
