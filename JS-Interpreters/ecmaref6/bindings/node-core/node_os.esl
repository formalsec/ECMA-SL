function __esl_node_os_platform(globalObject, this, newTarget, strict, params) {
  platform := extern str_symbol("require('os').platform()");
  extern assume(platform == "aix" || platform == "darwin"
    || platform == "freebsd" || platform == "linux" || platform == "openbsd"
    || platform == "sunos" || platform == "win32" || platform == "android");
  return platform;
}

function make_os_object(globalObject, objectPrototype, strict) {
  let realm = { globalEnv : globalObject };
  let os = newLazyObject();
  /* setAllInternalMethodsOfOrdinaryObject(os); */
  setInternalProperty(os, "prototype", objectPrototype);

  let platform = CreateBuiltInFunctionObject([], "__esl_node_os_platform", realm, strict, null);
  createBuiltInProperty(platform, "prototype", objectPrototype);
  createBuiltInProperty(os, "platform", platform);

  return os;
}
