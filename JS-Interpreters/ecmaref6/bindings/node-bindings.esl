import "node_cp.esl";
import "node_cross-spawn.esl";
import "node_execa.esl";
import "node_fs.esl";
import "node_os.esl";
import "node_path.esl";
import "node_process.esl";
import "node_shelljs.esl";
import "node_vm.esl";

function __NodeRequire(globalObject, this, newTarget, strict, params) {
  path := l_nth(params, 0);
  objectPrototype := |Intrinsics|["ObjectPrototype"];
  switch(path) {
    case "esl_symbolic":
      return initESLSymbolicObject(globalObject, objectPrototype, strict);
    case "process":
      return createProcessObject(globalObject, objectPrototype, strict);
    case "os":
      return createOSObject(globalObject, objectPrototype, strict);
    case "fs":
      return createFSObject(globalObject, objectPrototype, strict);
    case "path":
      return createPathObject(globalObject, objectPrototype, strict);
    case "child_process":
      return createCPObject(globalObject, objectPrototype, strict);
    case "mz/child_process":
      return createCPObject(globalObject, objectPrototype, strict);
    case "shelljs":
      return createShellJSObject(globalObject, objectPrototype, strict);
    case "cross-spawn":
      return createCrossSpawnObject(globalObject, objectPrototype, strict);
    case "im-metadata":
      return createCrossSpawnObject(globalObject, objectPrototype, strict);
    case "gray-matter":
      return createCrossSpawnObject(globalObject, objectPrototype, strict);
    case "execa":
      return createExecaObject(globalObject, objectPrototype, strict);
    case "vm":
      return createVMObject(globalObject, objectPrototype, strict);
    default:
      return newLazyObject();
  }
}

function initNodeGlobalObject(globalObject, objectPrototype, strict) {
  realm := { globalEnv : globalObject };
  dirname := extern __dirname();
  filename := extern __filename();
  createBuiltInProperty(globalObject, "__dirname", dirname);
  createBuiltInProperty(globalObject, "__filename", filename);

  require := CreateBuiltInFunctionObject(["path"], "__NodeRequire", realm,
    strict, null);
  createBuiltInProperty(globalObject, "require", require);
  createBuiltInProperty(require, "prototype", objectPrototype);

  module := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(module);
  setInternalProperty(module, "Prototype", objectPrototype);
  createBuiltInProperty(globalObject, "module", module);

  exports := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(exports);
  setInternalProperty(module, "Prototype", objectPrototype);
  createBuiltInProperty(module, "exports", exports);
  createBuiltInProperty(globalObject, "exports", exports);

  process := createProcessObject(globalObject, objectPrototype, strict);
  createBuiltInProperty(globalObject, "process", process);

  createBuiltInProperty(globalObject, "global", globalObject);
  return;
}
