import "lazy_object.esl";
import "polluted_object.esl";

function __esl_symbolic_number(globalObject, this, NewTarget, strict, params) {
  return extern flt_symbol(hd params);
}

function __esl_symbolic_boolean(globalObject, this, NewTarget, strict, params) {
  return extern bool_symbol(hd params);
}

function __esl_symbolic_string(globalObject, this, NewTarget, strict, params) {
  let symb_string = extern str_symbol(hd params);
  /* Bound string to help Z3 */
  /* extern assume(s_len(symb_string) < 65536); */
  return symb_string;
}

function __esl_symbolic_assume(globalObject, this, NewTarget, strict, params) {
  extern assume(hd params);
  return 0;
}

function __esl_symbolic_assert(globalObject, this, NewTarget, strict, params) {
  assert (hd params);
  return 0;
}

function __esl_symbolic_is_symbolic(globalObject, this, NewTarget, strict, params) {
  return extern is_symbolic(hd params);
}

function __esl_symbolic_lazy_object(globalObject, this, NewTarget, strict, params) {
  return newLazyObject();
}

function __esl_symbolic_polluted_object(globalObject, this, NewTarget, strict, params) {
  depth := 0;
  if (l_len(params) > 0)
    depth := hd params;
  return newPollutedObject(depth);
}

function initESLSymbolicObject(globalObject, objectPrototype, strict) {
  let realm = { globalEnv : globalObject };
  esl_symbolic := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(esl_symbolic);
  setInternalProperty(esl_symbolic, "Prototype", objectPrototype);

  apiSymbolicNumber := CreateBuiltInFunctionObject([], "__esl_symbolic_number", realm, strict, null);
  createBuiltInProperty(apiSymbolicNumber, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "number", apiSymbolicNumber);

  apiSymbolicString := CreateBuiltInFunctionObject([], "__esl_symbolic_string", realm, strict, null);
  createBuiltInProperty(apiSymbolicString, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "string", apiSymbolicString);
  createBuiltInProperty(esl_symbolic, "any", apiSymbolicString);

  apiSymbolicBoolean := CreateBuiltInFunctionObject([], "__esl_symbolic_boolean", realm, strict, null);
  createBuiltInProperty(apiSymbolicBoolean, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "boolean", apiSymbolicBoolean);

  apiSymbolicAssume := CreateBuiltInFunctionObject([], "__esl_symbolic_assume", realm, strict, null);
  createBuiltInProperty(apiSymbolicAssume, "prototype", objectPrototype);

  apiSymbolicAssert := CreateBuiltInFunctionObject([], "__esl_symbolic_assert", realm, strict, null);
  createBuiltInProperty(apiSymbolicAssert, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "assert", apiSymbolicAssert);

  apiIsSymbolic := CreateBuiltInFunctionObject([], "__esl_symbolic_is_symbolic", realm, strict, null);
  createBuiltInProperty(apiIsSymbolic, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "is_symbolic", apiIsSymbolic);

  apiLazyObject := CreateBuiltInFunctionObject([], "__esl_symbolic_lazy_object", realm, strict, null);
  createBuiltInProperty(apiLazyObject, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "lazy_object", apiLazyObject);
  createBuiltInProperty(esl_symbolic, "function", apiLazyObject);

  apiPollutedObject := CreateBuiltInFunctionObject([], "__esl_symbolic_polluted_object", realm, strict, null);
  createBuiltInProperty(apiPollutedObject, "pototoype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "polluted_object", apiPollutedObject);

  apiSealProp := CreateBuiltInFunctionObject([], "__esl_symbolic_seal_properties", realm, strict, null);
  createBuiltInProperty(apiSealProp, "prototype", objectPrototype);
  createBuiltInProperty(esl_symbolic, "sealProperties", apiSealProp);

  return esl_symbolic;
}
