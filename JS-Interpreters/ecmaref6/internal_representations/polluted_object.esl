/**
  * Module for creating objects with symbolic properties
  *
  * Motivation:
  *
  * This module is designed to facilitate the creation of objects with
  * symbolic properties. Symbolic objects are essential for symbolic
  * execution, especially when exploring prototype pollution vulnerabilities.
  * When attempting to generate symbolic drivers for vulnerable functions,
  * such as the example below, symbolic execution can inadvertently pollute
  * the prototype chain:
  *
  * ```js
  * function merge() { (* vulnerable function *) }
  * var p1 = symbolic_string();
  * var p2 = symbolic_string();
  * var polluted = {}
  * polluted[p1][p2].toString = "polluted"
  * merge({}, polluted);
  * ```
  *
  * Example breakdown:
  *
  * To identify all possible values for polluting the prototype in the
  * vulnerable function `merge`, a symbolic object with symbolic properties
  * must be created. However, attempting this straightforwardly can lead
  * to unintentional pollution of the prototype chain by the symbolic executor,
  * leaving the object `polluted` empty.
  */

function newPollutedObject() {
  proto := getObjectPrototype(false);

  inner_object := ObjectCreate(proto, null);
  CreateDataPropertyOrThrow(inner_object, "polluted", "yup");

  middle_object := ObjectCreate(proto, null);
  middle_property := extern str_symbol("");
  CreateDataPropertyOrThrow(middle_object, middle_property, inner_object);

  outer_object := ObjectCreate(proto, null);
  outer_property := extern str_symbol("");
  CreateDataPropertyOrThrow(outer_object, outer_property, middle_object);
  return outer_object
}
