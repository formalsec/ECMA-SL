/**
 * 7.3.1 Get (O, P)
 * The abstract operation Get is used to retrieve the value of a specific property of an object.
 * The operation is called with arguments O and P where O is the object and P is the property key.
 *
 * This abstract operation performs the following steps:
 *
*/
function Get(O, P) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object" ||| Type(O) = "Symbol");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Return O.[[Get]](P, O). */
	V := {O.Get}(O, P, O);
 	@ReturnIfAbrupt(V);
 	return V;
}

/**
 *
 * The 7.3.1 does not deal with errors on the Get result, so we created this
 * wrapped get to deal with it on Iterators
 *
*/

function WrappedGet(O, P) {
  getResult := Get(O, P) catch GetHandler;
  if (!(Type(getResult) = "Completion"))
    return NormalCompletion(getResult);
  return getResult;
}

function GetHandler(x) {
  return throwEmptyCompletion(x);
}

/**
 * 7.3.2 GetV (V, P)
 * The abstract operation GetV is used to retrieve the value of a specific property of an ECMAScript language value.
 * If the value is not an object, the property lookup is performed using a wrapper object appropriate for the type of the value.
 * The operation is called with arguments V and P where V is the value and P is the property key.
 *
 * This abstract operation performs the following steps:
*/
function GetV(V, P) {
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let O be ToObject(V). */
	O := ToObject(V);
	/* ReturnIfAbrupt(O). */
	@ReturnIfAbrupt(O);
	/* Return O.[[Get]](P, V). */
	return {O.Get}(O, P, V);
}


/**
 * 7.3.3 Set (O, P, V, Throw)
 * The abstract operation Set is used to set the value of a specific property of an object.
 * The operation is called with arguments O, P, V, and Throw where O is the object, P is the property key,
 * V is the new value for the property and Throw is a Boolean flag.
 *
 * This abstract operation performs the following steps:
*/
function Set(O, P, V, Throw) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Assert: Type(Throw) is Boolean. */
	assert (Type(Throw) = "Boolean" );
	/* Let success be O.[[Set]](P, V, O). */
	success := {O.Set}(O, P, V, O);
	/* ReturnIfAbrupt(success). */
	@ReturnIfAbrupt(success);
	/* If success is false and Throw is true, throw a TypeError exception. */
	if ((success = false) &&& (Throw = true))
		throw TypeErrorConstructorInternal();

	/* Return success. */
	return success;
}

/**
 *  7.3.4 CreateDataProperty (O, P, V)
 * The abstract operation CreateDataProperty is used to create a new own property of an object.
 * The operation is called with arguments O, P, and V where O is the object, P is the property key,
 * and V is the value for the property.
 *
 * This abstract operation performs the following steps:
*/
function CreateDataProperty(O,P,V) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object" );
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true );
	/* Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}. */
	newDesc := newDataPropertyDescriptorFull(V, true, true, true);
	/* Return O.[[DefineOwnProperty]](P, newDesc). */
	return {O.DefineOwnProperty}(O, P, newDesc);
}

/**
 * 7.3.5 CreateMethodProperty (O, P, V)
 * The abstract operation CreateMethodProperty is used to create a new own property of an object.
 *  The operation is called with arguments O, P, and V where O is the object, P is the property key,
 *  and V is the value for the property.
 *
 *  This abstract operation performs the following steps:
*/
function CreateMethodProperty(O,P,V) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}. */
	newDesc := newDataPropertyDescriptorFull(V, true, false, true);
	/* Return O.[[DefineOwnProperty]](P, newDesc). */
	return {O.DefineOwnProperty}(O, P, newDesc);
}

/**
 *  7.3.6 CreateDataPropertyOrThrow (O, P, V)
 * The abstract operation CreateDataPropertyOrThrow is used to create a new own property of an object.
 * It throws a TypeError exception if the requested property update cannot be performed.
 * The operation is called with arguments O, P, and V where O is the object, P is the property key,
 * and V is the value for the property.
 *
 * This abstract operation performs the following steps:
*/
function CreateDataPropertyOrThrow(O, P, V) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let success be CreateDataProperty(O, P, V). */
	success := CreateDataProperty(O, P, V);
	/* ReturnIfAbrupt(success). */
	@ReturnIfAbrupt(success);
	/* If success is false, throw a TypeError exception. */
	if (success = false)
		throw TypeErrorConstructorInternal();
	/* Return success. */
	return success;
}

/**
 *  The Standard sometimes wants not a throw but a throw completion
 *  ecause of this we need a Wrapped CreateDataPropertyOrThrow
 */
function WrappedCreateDataPropertyOrThrow(O, P, V) {
	x := CreateDataPropertyOrThrow(O, P, V) catch CallHandler;
  return x;
}

/**
 * 7.3.7 DefinePropertyOrThrow (O, P, desc)
 * The abstract operation DefinePropertyOrThrow is used to call the [[DefineOwnProperty]]
 * internal method of an object in a manner that will throw a TypeError exception if the requested property update cannot be performed.
 * The operation is called with arguments O, P, and desc where O is the object, P is the property key, and desc is the Property Descriptor for the property.
 *
 * This abstract operation performs the following steps:
*/
function DefinePropertyOrThrow(O, P, desc) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let success be O.[[DefineOwnProperty]](P, desc). */
	success := {O.DefineOwnProperty}(O, P, desc);
	/* ReturnIfAbrupt(success). */
	@ReturnIfAbrupt(success);
	/* If success is false, throw a TypeError exception. */
	if (success = false)
		throw TypeErrorConstructorInternal();
	/* Return success. */
	return success;
}

/**
 * 7.3.8 DeletePropertyOrThrow (O, P)
 * The abstract operation DeletePropertyOrThrow is used to remove a specific own property of an object.
 * It throws an exception if the property is not configurable. The operation is called with arguments O and P where
 * O is the object and P is the property key.
 *
 * This abstract operation performs the following steps:
*/
function DeletePropertyOrThrow(O, P) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let success be O.[[Delete]](P). */
	success := {O.Delete}(O, P);
	/* ReturnIfAbrupt(success). */
	@ReturnIfAbrupt(success);
	/* If success is false, throw a TypeError exception. */
	if (success = false)
		throw TypeErrorConstructorInternal();
	/* Return success. */
	return success;
}

/**
 * 7.3.9 GetMethod (O, P)
 * The abstract operation GetMethod is used to get the value of a specific property of an object when the value of
 * the property is expected to be a function. The operation is called with arguments O and P where O is the object,
 * P is the property key. This abstract operation performs the following steps:
*/
function GetMethod(O,P) {
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let func be GetV(O, P). */
	func := GetV(O,P);
	/* ReturnIfAbrupt(func). */
	@ReturnIfAbrupt(func);
	/* If func is either undefined or null, return undefined. */
	if (func = 'undefined ||| func = 'null)
		return 'undefined;
	/* If IsCallable(func) is false, throw a TypeError exception. */
	if (IsCallable(func) = false)
		throw TypeErrorConstructorInternal();
	/* Return func. */
	return func;
}

/**
 * 7.3.10 HasProperty (O, P)
 *
 * The abstract operation HasProperty is used to determine whether an object has a property with the specified
 * property key. The property may be either an own or inherited. A Boolean value is returned. The operation is
 * called with arguments O and P where O is the object and P is the property key.
 *
 * This abstract operation performs the following steps:
*/
function HasProperty(O,P) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Return O.[[HasProperty]](P). */
	return {O.HasProperty}(O, P);
}

/**
 * 7.3.11 HasOwnProperty (O, P)
 *
 * The abstract operation HasOwnProperty is used to determine whether an object has an own property with the
 * specified property key. A Boolean value is returned. The operation is called with arguments O and P where
 * O is the object and P is the property key.
 *
 * This abstract operation performs the following steps:
*/
function HasOwnProperty(O, P) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: IsPropertyKey(P) is true. */
	assert (IsPropertyKey(P) = true);
	/* Let desc be O.[[GetOwnProperty]](P). */
	desc := {O.GetOwnProperty}(O, P);
	/* ReturnIfAbrupt(desc). */
	@ReturnIfAbrupt(desc);
	/* If desc is undefined, return false. */
	if (desc = 'undefined)
		return false;
	/* Return true. */
	return true;
}

/**
 * 7.3.12 Call(F, V, [argumentsList])
 *
 * The abstract operation Call is used to call the [[Call]] internal method of a function object. The operation is
 * called with arguments F, V , and optionally argumentsList where F is the function object, V is an ECMAScript
 * language value that is the this value of the [[Call]], and argumentsList is the value passed to the corresponding
 * argument of the internal method. If argumentsList is not present, an empty List is used as its value.
 *
 * This abstract operation performs the following steps:
*/
function Call(externalScope, ref, F, V, argumentsList) {
    /* ReturnIfAbrupt(F). */
	@ReturnIfAbrupt(F);
  /* If argumentsList was not passed, let argumentsList be a new empty List. */
	if (argumentsList = null)
		argumentsList := [];
  /* If IsCallable(F) is false, throw a TypeError exception. */
	if (IsCallable(F) = false)
		throw TypeErrorConstructorInternal();
  /* Return F.[[Call]](V, argumentsList). */
	return {F.Call}(externalScope, ref, F, V, 'undefined, argumentsList);
}

/**
 * 7.3.13 Construct (F, [argumentsList], [newTarget])
 * The abstract operation Construct is used to call the [[Construct]] internal method of a function object.
 * The operation is called with arguments F, and optionally argumentsList, and newTarget where F is the function object.
 * argumentsList and newTarget are the values to be passed as the corresponding arguments of the internal method.
 * If argumentsList is not present, an empty List is used as its value. If newTarget is not present, F is used as its value.
 *
 * This abstract operation performs the following steps:
*/
function Construct(externalScope, ref, F, argumentsList, newTarget) {
	/* If newTarget was not passed, let newTarget be F. */
 	if (newTarget = null)
 		newTarget := F;
 	/* If argumentsList was not passed, let argumentsList be a new empty List. */
 	if (argumentsList = null)
 		argumentsList := [];
 	/* Assert: IsConstructor (F) is true. */
 	assert (IsConstructor(F) = true);
 	/* Assert: IsConstructor (newTarget) is true. */
 	assert (IsConstructor(newTarget) = true);
 	/* Return F.[[Construct]](argumentsList, newTarget). */
	 /*TODO: wrong arguments, change it accordingly to ES6  */
 	return {F.Construct}(externalScope, ref, F, argumentsList, newTarget);
}

/**
 * 7.3.14 SetIntegrityLevel (O, level)
 *
 * The abstract operation SetIntegrityLevel is used to fix the set of own properties of an object.
 *
 * This abstract operation performs the following steps:
*/
function SetIntegrityLevel(O, level) {
	/* Assert: Type(O) is Object. */
	assert (Type(O) = "Object");
	/* Assert: level is either "sealed" or "frozen". */
	assert ((level = "sealed") ||| (level = "frozen"));
	/* Let status be O.[[PreventExtensions]](). */
	status := {O.PreventExtensions}(O);
	/* ReturnIfAbrupt(status). */
	@ReturnIfAbrupt(status);
	/* If status is false, return false. */
	if (status = false)
		return false;
	/* Let keys be O.[[OwnPropertyKeys]](). */
	keys := {O.OwnPropertyKeys}(O);
	/* ReturnIfAbrupt(keys). */
	@ReturnIfAbrupt(keys);
	/* If level is "sealed", then */
	if (level = "sealed") {
		/* Repeat for each element k of keys, */
		foreach (k : keys) {
			/* Let status be DefinePropertyOrThrow(O, k, PropertyDescriptor{ [[Configurable]]: false}). */
			status := DefinePropertyOrThrow(O, k, { Configurable: false });
      /* ReturnIfAbrupt(status). */
      @ReturnIfAbrupt(status);
		}
	}

  /*Else level is "frozen", */
	else if (level = "frozen") {
	  /* Repeat for each element k of keys, */
		foreach (k : keys) {
    	/* Let currentDesc be O.[[GetOwnProperty]](k). */
			currentDesc := {O.GetOwnProperty}(O, k);
    	/* ReturnIfAbrupt(currentDesc). */
			@ReturnIfAbrupt(currentDesc);
    	/* If currentDesc is not undefined, then */
			if (!(currentDesc = 'undefined)) {
    			/* If IsAccessorDescriptor(currentDesc) is true, then */
				if (IsAccessorDescriptor(currentDesc) = true)
    			/* Let desc be the PropertyDescriptor{[[Configurable]]: false}. */
					desc := { Configurable: false };
    			/* Else, */
				else
					/* Let desc be the PropertyDescriptor { [[Configurable]]: false, [[Writable]]: false }. */
					desc := { Configurable: false, Writable:false };
    		/* Let status be DefinePropertyOrThrow(O, k, desc). */
				status := DefinePropertyOrThrow(O, k, desc);
    		/* ReturnIfAbrupt(status). */
				@ReturnIfAbrupt(status);
			}
		}
	}

    /*Return true. */
	return true;
}

/**
 * 7.3.15 TestIntegrityLevel (O, level)
 *
 * The abstract operation TestIntegrityLevel is used to determine if the set of own properties of an object are fixed.
 *
 * This abstract operation performs the following steps:
*/
function TestIntegrityLevel(O, level) {
    /* Assert: Type(O) is Object. */
    assert (Type(O) = "Object");
    /* Assert: level is either "sealed" or "frozen". */
    assert ((level = "sealed") ||| (level = "frozen"));
    /* Let status be IsExtensible(O). */
    status := IsExtensible(O);
    /* ReturnIfAbrupt(status). */
    @ReturnIfAbrupt(status);
    /* If status is true, return false */
    if (status = true)
    	return false;
    /* NOTE If the object is extensible, none of its properties are examined. */
    /* Let keys be O.[[OwnPropertyKeys]](). */
    keys := {O.OwnPropertyKeys}(O);
    /* ReturnIfAbrupt(keys). */
    @ReturnIfAbrupt(keys);
    /* Repeat for each element k of keys, */
    foreach (k : keys) {
    	/* Let currentDesc be O.[[GetOwnProperty]](k). */
    	currentDesc := {O.GetOwnProperty}(O, k);
    	/* ReturnIfAbrupt(currentDesc). */
    	@ReturnIfAbrupt(currentDesc);
    	/* If currentDesc is not undefined, then */
    	if (!(currentDesc = 'undefined)) {
    		/* If currentDesc.[[Configurable]] is true, return false. */
    		if (currentDesc.Configurable = true)
    			return false;
    		/* If level is "frozen" and IsDataDescriptor(currentDesc) is true, then */
    		if ((level = "frozen") &&& (IsDataDescriptor(currentDesc) = true)) {
    			/* If currentDesc.[[Writable]] is true, return false. */
    			if (currentDesc.Writable = true)
    				return false;
    		}
    	}
    }

    /* Return true. */
    return true;
}

/**
 * 7.3.16 CreateArrayFromList (elements)
 *
 * The abstract operation CreateArrayFromList is used to create an Array object whose elements are provided by a List.
 *
 * This abstract operation performs the following steps:
*/
function CreateArrayFromList(elements) {
  /* 1. Assert: elements is a List whose elements are all ECMAScript language
     values. */
  /* TODO */

  /* 2. Let array be ArrayCreate(0) (see 9.4.2.2). */
  array := ArrayCreate(0., null);
  /* 3. Let n be 0. */
  n := 0.;
  /* 4. For each element e of elements */
  foreach (e : elements) {
    /* a. Let status be CreateDataProperty(array, ToString(n), e). */
    status := CreateDataProperty(array, ToString(n), e);
    /* b. Assert: status is true. */
    assert (status = true);
    /* c. Increment n by 1. */
    n := n + 1.;
  }
  /* 5. Return array. */
  return array;
}

/**
 * 7.3.17 CreateListFromArrayLike (obj [, elementTypes] )
 *
 * The abstract operation CreateListFromArrayLike is used to create a List value whose elements are provided by
 * the indexed properties of an array-like object, obj. The optional argument elementTypes is a List containing the
 * names of ECMAScript Language Types that are allowed for element values of the List that is created.
 *
 * This abstract operation performs the following steps:
*/
function CreateListFromArrayLike(obj, elementTypes) {
    /* ReturnIfAbrupt(obj). */
    @ReturnIfAbrupt(obj);
    /* If elementTypes was not passed, let elementTypes be (Undefined, Null, Boolean, String, Symbol, Number, Object). */
    if (elementTypes = null)
    	elementTypes := ["Undefined", "Null", "Boolean", "String", "Symbol", "Number", "Object"];
    /* If Type(obj) is not Object, throw a TypeError exception. */
    if (!(Type(obj) = "Object"))
    	throw TypeErrorConstructorInternal();
    /* Let len be ToLength(Get(obj, "length")). */
    len := ToLength(Get(obj, "length"));
    /* ReturnIfAbrupt(len). */
    @ReturnIfAbrupt(len);
    /* Let list be an empty List. */
    list := [];
    /* Let index be 0. */
    index := 0.;
    /* Repeat while index < len */
    while (index < len) {
    	/* Let indexName be ToString(index). */
    	indexName := ToString(index);
    	/* Let next be Get(obj, indexName). */
    	next := Get(obj, indexName);
    	/* ReturnIfAbrupt(next). */
    	@ReturnIfAbrupt(next);
    	/* If Type(next) is not an element of elementTypes, throw a TypeError exception. */
    	if (!(in_list(Type(next), elementTypes)))
    		throw TypeErrorConstructorInternal();
    	/* Append next as the last element of list. */
    	list := l_add(list, next);
    	/* Set index to index + 1. */
    	index := index + 1.;
    }
    /* Return list. */
    return list;
}

/**
 * 7.3.18 Invoke(O,P, [argumentsList])
 *
 * The abstract operation Invoke is used to call a method property of an object. The operation is called with
 * arguments O, P , and optionally argumentsList where O serves as both the lookup point for the property and
 * the this value of the call, P is the property key, and argumentsList is the list of arguments values passed to the
 * method. If argumentsList is not present, an empty List is used as its value.
 *
 * This abstract operation performs the following steps:
*/
function Invoke(externalScope, ref, O, P, argumentsList) {
    /* Assert: IsPropertyKey(P) is true. */
    assert (IsPropertyKey(P) = true);
    /* If argumentsList was not passed, let argumentsList be a new empty List. */
    if (argumentsList = null)
    	argumentsList := [];
    /* Let func be GetV(O, P). */
    func := GetV(O, P);
    /* Return Call(func, O, argumentsList). */
    return Call(externalScope, ref, func, O, argumentsList);
}

/**
 * 7.3.19 OrdinaryHasInstance (C, O)
 *
 * The abstract operation OrdinaryHasInstance implements the default algorithm for determining if an object O
 * inherits from the instance object inheritance path provided by constructor C.
 *
 * This abstract operation performs the following steps:
*/
function OrdinaryHasInstance(C, O) {
	/* If IsCallable(C) is false, return false. */
	if (IsCallable(C) = false)
		return false;

	/* If C has a [[BoundTargetFunction]] internal slot, then */
	if ("BoundTargetFunction" in_obj C) {
		/* Let BC be the value of C’s [[BoundTargetFunction]] internal slot. */
		BC := C.BoundTargetFunction;
		/* Return InstanceofOperator(O,BC) (see 12.9.4). */
		return InstanceofOperator(O, BC); /* FALTA FAZER */
	}

	/* If Type(O) is not Object, return false. */
	if (!(Type(O) = "Object") &&& !(Type(O) = "Symbol"))
		return false;

	/* Let P be Get(C, "prototype"). */
	P := Get(C, "prototype");
	/* ReturnIfAbrupt(P). */
	@ReturnIfAbrupt(P);
	/* If Type(P) is not Object, throw a TypeError exception. */
	if (!(Type(P) = "Object") &&& !(Type(O) = "Symbol"))
		throw TypeErrorConstructorInternal();

	/* Repeat */
	repeat {
		/* Let O be O.[[GetPrototypeOf]](). */
		O := {O.GetPrototypeOf}(O);
		/* ReturnIfAbrupt(O). */
		@ReturnIfAbrupt(O);
		/* If O is null, return false. */
		if (O = 'null)
			return false;

		/* If SameValue(P, O) is true, return true. */
		if (SameValue(P, O) = true)
			return true;
	}
}

/**
 * 7.3.20 SpeciesConstructor ( O, defaultConstructor )
 *
 * The abstract operation SpeciesConstructor is used to retrieve the constructor that should be used to create
 * new objects that are derived from the argument object O. The defaultConstructor argument is the constructor
 * to use if a constructor @@species property cannot be found starting from O.
 *
 * This abstract operation performs the following steps:
*/
function SpeciesConstructor(O, defaultConstructor) {
    /* Assert: Type(O) is Object. */
    assert (Type(O) = "Object");
    /* Let C be Get(O, "constructor"). */
    C := Get(O, "constructor");
    /* ReturnIfAbrupt(C). */
    @ReturnIfAbrupt(C);
    /* If C is undefined, return defaultConstructor. */
    if (C = 'undefined)
    	return defaultConstructor;
    /* If Type(C) is not Object, throw a TypeError exception. */
    if (!(Type(C) = "Object"))
    	throw TypeErrorConstructorInternal();
    /* Let S be Get(C, @@species). */
    S := Get(C, getSpeciesPropertyName());
    /* ReturnIfAbrupt(S). */
    @ReturnIfAbrupt(S);
    /* If S is either undefined or null, return defaultConstructor. */
    if ((S = 'undefined) ||| (S = 'null))
    	return defaultConstructor;
    /* If IsConstructor(S) is true, return S. */
    if (IsConstructor(S) = true)
    	return S;
    /* Throw a TypeError exception. */
    throw TypeErrorConstructorInternal();
}

/**
 * 7.3.21 EnumerableOwnNames (O)
 *
 * When the abstract operation EnumerableOwnNames is called with Object O the following steps are taken:
*/
function EnumerableOwnNames(O) {
    /* Assert: Type(O) is Object. */
    assert (Type(O) = "Object");
    /* Let ownKeys be O.[[OwnPropertyKeys]](). */
    ownKeys := {O.OwnPropertyKeys}(O);
    /* ReturnIfAbrupt(ownKeys). */
    @ReturnIfAbrupt(ownKeys);
    /* Let names be a new empty List. */
    names := [];
    /* Repeat, for each element key of ownKeys in List order */
    foreach (key : ownKeys) {
			/* If Type(key) is String, then */
			if (Type(key) = "String") {
				/* Let desc be O.[[GetOwnProperty]](key). */
				desc := {O.GetOwnProperty}(O, key);
				/* ReturnIfAbrupt(desc). */
				@ReturnIfAbrupt(desc);
				/* If desc is not undefined, then */
				if (!(desc = 'undefined)) {
					/* If desc.[[Enumerable]] is true, append key to names. */
					if (desc.Enumerable = true)
						names := l_add(names, key);
				}
			}
    }

    /* Order the elements of names so they are in the same relative order as would be produced by the Iterator
    that would be returned if the [[Enumerate]] internal method was invoked on O. */

    /* Return names. */
    return names;
}

/**
 * 7.3.22 GetFunctionRealm ( obj )
 *
 * The abstract operation GetFunctionRealm with argument obj performs the following steps:
*/
function GetFunctionRealm(obj) {
	/* Assert: obj is a callable object. */
	assert (IsCallable(obj) = true); /* nao tenho a certeza disto */
	/* If obj has a [[Realm]] internal slot, then */
	if ("Realm" in_obj obj) {
		/* Return obj’s [[Realm]] internal slot. */
		return obj.Realm;
	}


	/* TODO todo o resto disto */
	/* If obj is a Bound Function exotic object, then */
			/* Let target be obj’s [[BoundTargetFunction]] internal slot. */
			/* Return GetFunctionRealm(target). */
	/* If obj is a Proxy exotic object, then */
			/* If the value of the [[ProxyHandler]] internal slot of obj is null, throw a TypeError exception. */
			/* Let proxyTarget be the value of obj’s [[ProxyTarget]] internal slot. */
			/* Return GetFunctionRealm(proxyTarget). */

	/* Return the running execution context’s Realm. */
	return topExecStack().Realm;
}

/**
 * 7.3.25(ES12) CopyDataProperties ( target, source, excludedItems )

 * The abstract operation CopyDataProperties takes arguments target, source, and excludedItems. It performs the following steps when called:
 */
function CopyDataProperties(target, source, excludedItems) {
	/* 1. Assert: Type(target) is Object. */
	assert (Type(target) = "Object");
	/* 2. Assert: excludedItems is a List of property keys. */
	assert (Type(excludedItems) = "List");
	/* 3. If source is undefined or null, return target. */
	if (source = 'undefined ||| source = 'null)
		return target;
	/* 4. Let from be ! ToObject(source). */
	from := ToObject(source);
	assert (isAnAbruptCompletion(from) = false);
	if (Type(from) = "Completion")
		from := getCompletionValue(from);
	/* 5. Let keys be ? from.[[OwnPropertyKeys]](). */
	keys := {from.OwnPropertyKeys}(from);
	@ReturnIfAbrupt(keys);
	/* 6. For each element nextKey of keys, do */
	foreach (nextKey : keys) {
		/* a. Let excluded be false. */
		excluded := false;
		/* b. For each element e of excludedItems, do */
		foreach (e : excludedItems) {
			/* i. If SameValue(e, nextKey) is true, then */
			if (SameValue(e, nextKey)) {
				/* 1. Set excluded to true. */
				excluded := true;
			}
		}
		/* c. If excluded is false, then */
		if (excluded = false) {
			/* i. Let desc be ? from.[[GetOwnProperty]](nextKey). */
			desc := {from.GetOwnProperty}(from, nextKey);
			@ReturnIfAbrupt(desc);
			/* ii. If desc is not undefined and desc.[[Enumerable]] is true, then */
			if (!(desc = 'undefined) &&& desc.Enumerable) {
				/* 1. Let propValue be ? Get(from, nextKey). */
				propValue := Get(from, nextKey);
				@ReturnIfAbrupt(propValue);
				/* 2. Perform ! CreateDataPropertyOrThrow(target, nextKey, propValue). */
				success := CreateDataPropertyOrThrow(target, nextKey, propValue);
				assert (isAnAbruptCompletion(success) = false);
			}
		}
	}
	/* 7. Return target. */
	return target;
}

function StringValue(value) {
	return value;
}

