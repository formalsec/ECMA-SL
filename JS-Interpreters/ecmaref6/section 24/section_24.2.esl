/* 24.2 DataView Objects */

/* 24.2.1 Abstract Operations For DataView Objects */

/**
 * 24.2.1.1 GetViewValue ( view, requestIndex, isLittleEndian, type )
 *
 * The abstract operation GetViewValue with arguments view, requestIndex, isLittleEndian, and type
 * is used by functions on DataView instances is to retrieve values from the view’s buffer.
 */
function GetViewValue (view, requestIndex, isLittleEndian, type) {
  /* 1. If Type(view) is not Object, throw a TypeError exception. */
  if (Type(view) != "Object")
    throw TypeErrorConstructorInternal();
  /* 2. If view does not have a [[DataView]] internal slot, throw a TypeError exception. */
  if (!("DataView" in_obj view))
    throw TypeErrorConstructorInternal();
  /* 3. Let numberIndex be ToNumber(requestIndex). */
  numberIndex := ToNumber(requestIndex);
  /* 4. Let getIndex be ToInteger(numberIndex). */
  getIndex := ToInteger(numberIndex);
  /* 5. ReturnIfAbrupt(getIndex). */
  @ReturnIfAbrupt(getIndex);
  /* 6. If numberIndex ≠ getIndex or getIndex < 0, throw a RangeError exception. */
  if ((numberIndex != getIndex) ||| (getIndex < 0.))
    throw RangeErrorConstructorInternal();
  /* 7. Let isLittleEndian be ToBoolean(isLittleEndian). */
  isLittleEndian := ToBoolean(isLittleEndian);
  /* 8. Let buffer be the value of view’s [[ViewedArrayBuffer]] internal slot. */
  buffer := view.ViewedArrayBuffer;
  /* 9. If IsDetachedBuffer(buffer) is true, throw a TypeError exception. */
  if (IsDetachedBuffer(buffer) == true)
    throw TypeErrorConstructorInternal();
  /* 10. Let viewOffset be the value of view’s [[ByteOffset]] internal slot. */
  viewOffset := view.ByteOffset;
  /* 11. Let viewSize be the value of view’s [[ByteLength]] internal slot. */
  viewSize := view.ByteLength;
  /* 12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type. */
  elementSize :=  getElementSize(type);
  /* 13. If getIndex +elementSize > viewSize, throw a RangeError exception. */
  if ((getIndex + int_to_float(elementSize)) > viewSize)
    throw RangeErrorConstructorInternal();
  /* 14. Let bufferIndex be getIndex + viewOffset. */
  bufferIndex := getIndex + viewOffset;
  /* 15. Return GetValueFromBuffer(buffer, bufferIndex, type, isLittleEndian). */
  return GetValueFromBuffer(buffer, float_to_int(bufferIndex), type, isLittleEndian);
}


/**
 * 24.2.1.2 SetViewValue ( view, requestIndex, isLittleEndian, type, value )
 *
 * The abstract operation SetViewValue with arguments view, requestIndex, isLittleEndian, type,
 * and value is used by functions on DataView instances to store values into the view’s buffer.
 *
 * NOTE The algorithms for GetViewValue and SetViewValue are identical except for their final steps.
 */
function SetViewValue (view, requestIndex, isLittleEndian, type, value) {
  /* 1. If Type(view) is not Object, throw a TypeError exception. */
  if (Type(view) != "Object")
    throw TypeErrorConstructorInternal();
  /* 2. If view does not have a [[DataView]] internal slot, throw a TypeError exception. */
  if (!("DataView" in_obj view))
    throw TypeErrorConstructorInternal();
  /* 3. Let numberIndex be ToNumber(requestIndex). */
  numberIndex := ToNumber(requestIndex);
  /* 4. Let getIndex be ToInteger(numberIndex). */
  getIndex := ToInteger(numberIndex);
  /* 5. ReturnIfAbrupt(getIndex). */
  @ReturnIfAbrupt(getIndex);
  /* 6. If numberIndex ≠ getIndex or getIndex < 0, throw a RangeError exception. */
  if ((numberIndex != getIndex) ||| (getIndex < 0.))
    throw RangeErrorConstructorInternal();
  value := ToNumber(value);
  @ReturnIfAbrupt(value);
  /* 7. Let isLittleEndian be ToBoolean(isLittleEndian). */
  isLittleEndian := ToBoolean(isLittleEndian);
  /* 8. Let buffer be the value of view’s [[ViewedArrayBuffer]] internal slot. */
  buffer := view.ViewedArrayBuffer;
  /* 9. If IsDetachedBuffer(buffer) is true, throw a TypeError exception. */
  if (IsDetachedBuffer(buffer) == true)
    throw TypeErrorConstructorInternal();
  /* 10. Let viewOffset be the value of view’s [[ByteOffset]] internal slot. */
  viewOffset := view.ByteOffset;
  /* 11. Let viewSize be the value of view’s [[ByteLength]] internal slot. */
  viewSize := view.ByteLength;
  /* 12. Let elementSize be the Number value of the Element Size value specified in Table 49 for Element Type type. */
  elementSize := getElementSize(type);
  /* 13. If getIndex +elementSize > viewSize, throw a RangeError exception. */
  if ((getIndex + int_to_float(elementSize)) > viewSize)
    throw RangeErrorConstructorInternal();
  /* 14. Let bufferIndex be getIndex + viewOffset. */
  bufferIndex := getIndex + viewOffset;
  /* 15. Return SetValueInBuffer(buffer, bufferIndex, type, value, isLittleEndian). */
  return SetValueInBuffer(buffer, float_to_int(bufferIndex), type, value, isLittleEndian);
}

/**
 * 24.2.2.1 DataView (buffer [ , byteOffset [ , byteLength ] ] )
 *
 * DataView called with arguments buffer, byteOffset, and length performs the
 * following steps:
 */
function DataViewConstructor(global, this, NewTarget, strict, args) {
  buffer := l_nth(args, 0);
  byteOffset := getOptionalParam(args, 1);
  byteLength := getOptionalParam(args, 2);
  if (byteOffset == null) {
    byteOffset := 0.;
    byteLength := 'undefined;
  } else if (byteLength == null) {
    byteLength := 'undefined;
  }
  /* 1. If NewTarget is undefined, */
  if (NewTarget == 'undefined)
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 2. If Type(buffer) is not Object, */
  if (Type(buffer) != "Object")
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 3. If buffer does not have an [[ArrayBufferData]] internal slot, */
  if (!("ArrayBufferData" in_obj buffer))
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 4. Let numberOffset be ToNumber(byteOffset). */
  numberOffset := ToNumber(byteOffset);
  /* 5. Let offset be ToInteger(numberOffset). */
  offset := ToInteger(numberOffset);
  /* 6. ReturnIfAbrupt(offset). */
  @ReturnIfAbrupt(offset);
  /* 7. If numberOffset ≠ offset or offset < 0, */
  if ((numberOffset != offset) ||| (offset < 0.))
    /* throw a RangeError exception */
    throw RangeErrorConstructorInternal();
  /* 8. If IsDetachedBuffer(buffer) is true, */
  if (IsDetachedBuffer(buffer) == true)
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 9. Let bufferByteLength be the value of buffer's [[ArrayBufferByteLength]] internal slot. */
  bufferByteLength := buffer.ArrayBufferByteLength;
  /* 10. If offset > bufferByteLength, */
  if (offset > bufferByteLength)
    /* throw a RangeError exception */
    throw RangeErrorConstructorInternal();
  /* 11. If byteLength is undefined, then */
  if (byteLength == 'undefined) {
    /* a. Let viewByteLength be bufferByteLength – offset. */
    viewByteLength := bufferByteLength - offset;
  /* 12. Else, */
  } else {
    /* a. Let viewByteLength be ToLength(byteLength). */
    viewByteLength := ToLength(byteLength);
    /* b. ReturnIfAbrupt(viewByteLength). */
    @ReturnIfAbrupt(viewByteLength);
    /* c. If offset+viewByteLength > (bufferByteLength, throw a RangeError exception.) */
    if ((offset + viewByteLength) > bufferByteLength)
      throw RangeErrorConstructorInternal();
  }
  /* 13. Let O be OrdinaryCreateFromConstructor(NewTarget, "%DataViewPrototype%", «‍[[DataView]], [[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]]» ). */
  O := OrdinaryCreateFromConstructor(NewTarget, "DataViewPrototype", ["DataView", "ViewedArrayBuffer", "ByteLength", "ByteOffset"]);
  /* 14. ReturnIfAbrupt(O). */
  @ReturnIfAbrupt(O);
  /* 15. Set O's [[DataView]] internal slot to true. */
  O.DataView := true;
  /* 16. Set O's [[ViewedArrayBuffer]] internal slot to buffer. */
  O.ViewedArrayBuffer := buffer;
  /* 17. Set O's [[ByteLength]] internal slot to viewByteLength. */
  O.ByteLength := viewByteLength;
  /* 18. Set O's [[ByteOffset]] internal slot to offset. */
  O.ByteOffset := offset;
  /* 19. Return O. */
  return O;
}

/* 24.2.3 Properties of the DataView Constructor */
function initDataViewObject(global, objectPrototype, strict) {
  objDataViewPrototype := initDataViewPrototype(global, objectPrototype, strict);
  objDataViewConstructor := CreateGeneralBuiltInFunction(getFunctionPrototype(strict), ["length"], "DataViewConstructor", global, strict, 0.);

  /* 24.2.4.4 DataView.prototype.constructor*/
  descriptor := newDataPropertyDescriptorFull(objDataViewConstructor, true, false, true);
  setJSProperty(objDataViewPrototype, "constructor", descriptor);

  /* The value of the [[Prototype]] internal slot of the DataView constructor is the intrinsic object %FunctionPrototype% (19.2.3). */
  createBuiltInPropertyWithFullDescriptor(objDataViewConstructor, "prototype", objectPrototype, false, false, false);

  /* Besides its length property (whose value is 3), the DataView constructor has the following properties: */
  descriptor := newDataPropertyDescriptorFull(3., false, false, true);
  setJSProperty(objDataViewConstructor, "length", descriptor);

  descriptor := newDataPropertyDescriptorFull("DataView", false, false, true);
  setJSProperty(objDataViewConstructor, "name", descriptor);

  /* 24.1.3.2 DataView.prototype */
  /* The initial value of DataView.prototype is the intrinsic object %DataViewPrototype% (24.2.4).
  This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(objDataViewPrototype, false, false, false);
  setJSProperty(objDataViewConstructor, "prototype", descriptor);

  return objDataViewConstructor;
}

/* 24.2.4 Properties of the DataView Prototype Object */
function initDataViewPrototype(global, objectPrototype, strict) {
  prototype := NewECMAScriptObjectFull(objectPrototype, "Object", true);
  setAllInternalMethodsOfOrdinaryObject(prototype);

  /* 24.2.4.1 get DataView.prototype.buffer */
  bufferObject := CreateBuiltInFunctionObject([], "DataViewPrototypeBuffer", global, strict, 0.);
  descriptor := newGetAccessorPropertyDescriptorFull(bufferObject, false, true);
  setJSProperty(prototype, "buffer", descriptor);
  descriptor := newDataPropertyDescriptorFull("get buffer", false, false, true);
  setJSProperty(bufferObject, "name", descriptor);

  /* 24.2.4.2 get DataView.prototype.byteLength */
  byteLengthObject := CreateBuiltInFunctionObject([], "DataViewPrototypeByteLength", global, strict, 0.);
  descriptor := newGetAccessorPropertyDescriptorFull(byteLengthObject, false, true);
  setJSProperty(prototype, "byteLength", descriptor);
  descriptor := newDataPropertyDescriptorFull("get byteLength", false, false, true);
  setJSProperty(byteLengthObject, "name", descriptor);

  /* 24.2.4.3 get DataView.prototype.byteOffset */
  byteOffsetObject := CreateBuiltInFunctionObject([], "DataViewPrototypeByteOffset", global, strict, 0.);
  descriptor := newGetAccessorPropertyDescriptorFull(byteOffsetObject, false, true);
  setJSProperty(prototype, "byteOffset", descriptor);
  descriptor := newDataPropertyDescriptorFull("get byteOffset", false, false, true);
  setJSProperty(byteOffsetObject, "name", descriptor);

  /* 24.2.4.5 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] ) */
  getFloat32Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeGetFloat32", global, strict, 1.);
  createBuiltInProperty(prototype, "getFloat32", getFloat32Object);
  setJSProperty(getFloat32Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getFloat32Object, "name", newDataPropertyDescriptorFull("getFloat32", false, false, true));

  /* 24.2.4.6 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] ) */
  getFloat64Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeGetFloat64", global, strict, 0.);
  createBuiltInProperty(prototype, "getFloat64", getFloat64Object);
  setJSProperty(getFloat64Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getFloat64Object, "name", newDataPropertyDescriptorFull("getFloat64", false, false, true));

  /* 24.2.4.7 DataView.prototype.getInt8 ( byteOffset ) */
  getInt8Object := CreateBuiltInFunctionObject(["byteOffset"], "DataViewPrototypeGetInt8", global, strict, 0.);
  createBuiltInProperty(prototype, "getInt8", getInt8Object);
  setJSProperty(getInt8Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getInt8Object, "name", newDataPropertyDescriptorFull("getInt8", false, false, true));

  /* 24.2.4.8 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] ) */
  getInt16Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeGetInt16", global, strict, 0.);
  createBuiltInProperty(prototype, "getInt16", getInt16Object);
  setJSProperty(getInt16Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getInt16Object, "name", newDataPropertyDescriptorFull("getInt16", false, false, true));

  /* 24.2.4.9 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] ) */
  getInt32Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeGetInt32", global, strict, 0.);
  createBuiltInProperty(prototype, "getInt32", getInt32Object);
  setJSProperty(getInt32Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getInt32Object, "name", newDataPropertyDescriptorFull("getInt32", false, false, true));

  /* 24.2.4.10 DataView.prototype.getUint8 ( byteOffset ) */
  getUint8Object := CreateBuiltInFunctionObject(["byteOffset"], "DataViewPrototypeGetUint8", global, strict, 0.);
  createBuiltInProperty(prototype, "getUint8", getUint8Object);
  setJSProperty(getUint8Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getUint8Object, "name", newDataPropertyDescriptorFull("getUint8", false, false, true));

  /* 24.2.4.11 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] ) */
  getUint16Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeGetUint16", global, strict, 0.);
  createBuiltInProperty(prototype, "getUint16", getUint16Object);
  setJSProperty(getUint16Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getUint16Object, "name", newDataPropertyDescriptorFull("getUint16", false, false, true));

  /* 24.2.4.12 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] ) */
  getUint32Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeGetUint32", global, strict, 0.);
  createBuiltInProperty(prototype, "getUint32", getUint32Object);
  setJSProperty(getUint32Object, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(getUint32Object, "name", newDataPropertyDescriptorFull("getUint32", false, false, true));

    /* 24.2.4.5 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] ) */
  setFloat32Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeSetFloat32", global, strict, 0.);
  createBuiltInProperty(prototype, "setFloat32", setFloat32Object);
  setJSProperty(setFloat32Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setFloat32Object, "name", newDataPropertyDescriptorFull("setFloat32", false, false, true));

  /* 24.2.4.6 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] ) */
  setFloat64Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeSetFloat64", global, strict, 0.);
  createBuiltInProperty(prototype, "setFloat64", setFloat64Object);
  setJSProperty(setFloat64Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setFloat64Object, "name", newDataPropertyDescriptorFull("setFloat64", false, false, true));

  /* 24.2.4.7 DataView.prototype.setInt8 ( byteOffset, value ) */
  setInt8Object := CreateBuiltInFunctionObject(["byteOffset"], "DataViewPrototypeSetInt8", global, strict, 0.);
  createBuiltInProperty(prototype, "setInt8", setInt8Object);
  setJSProperty(setInt8Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setInt8Object, "name", newDataPropertyDescriptorFull("setInt8", false, false, true));

  /* 24.2.4.8 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] ) */
  setInt16Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeSetInt16", global, strict, 0.);
  createBuiltInProperty(prototype, "setInt16", setInt16Object);
  setJSProperty(setInt16Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setInt16Object, "name", newDataPropertyDescriptorFull("setInt16", false, false, true));

  /* 24.2.4.9 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] ) */
  setInt32Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeSetInt32", global, strict, 0.);
  createBuiltInProperty(prototype, "setInt32", setInt32Object);
  setJSProperty(setInt32Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setInt32Object, "name", newDataPropertyDescriptorFull("setInt32", false, false, true));

  /* 24.2.4.10 DataView.prototype.setUint8 ( byteOffset, value ) */
  setUint8Object := CreateBuiltInFunctionObject(["byteOffset"], "DataViewPrototypeSetUint8", global, strict, 0.);
  createBuiltInProperty(prototype, "setUint8", setUint8Object);
  setJSProperty(setUint8Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setUint8Object, "name", newDataPropertyDescriptorFull("setUint8", false, false, true));

  /* 24.2.4.11 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] ) */
  setUint16Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeSetUint16", global, strict, 0.);
  createBuiltInProperty(prototype, "setUint16", setUint16Object);
  setJSProperty(setUint16Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setUint16Object, "name", newDataPropertyDescriptorFull("setUint16", false, false, true));

  /* 24.2.4.12 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] ) */
  setUint32Object := CreateBuiltInFunctionObject(["byteOffset", "littleEndian"], "DataViewPrototypeSetUint32", global, strict, 0.);
  createBuiltInProperty(prototype, "setUint32", setUint32Object);
  setJSProperty(setUint32Object, "length", newDataPropertyDescriptorFull(2., false, false, true));
  setJSProperty(setUint32Object, "name", newDataPropertyDescriptorFull("setUint32", false, false, true));

  /* 24.2.4.13 DataView.prototype [ @@toStringTag ] */
  descriptor := newDataPropertyDescriptorFull("DataView", false, false, true);
  setJSProperty(prototype, getToStringTagPropertyName(), descriptor);

  return prototype;
}


/**
 * 24.2.4.1 get DataView.prototype.buffer
 *
 * DataView.prototype.buffer is an accessor property whose set accessor function
 * is undefined. Its get accessor function performs the following steps:
 */
function DataViewPrototypeBuffer(global, this, NewTarget, strict, args) {
  /* 1. Let O be the this value. */
  O := this;
  /* 2. If Type(O) is not Object, */
  if (Type(O) != "Object")
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 3. If O does not have a [[ViewedArrayBuffer]] internal slot, */
  if (!("ViewedArrayBuffer" in_obj O))
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 4. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot. */
  buffer := O.ViewedArrayBuffer;
  /* 5. Return buffer. */
  return buffer;
}


/**
 * 24.2.4.2 get DataView.prototype.byteLength
 *
 * DataView.prototype.byteLength is an accessor property whose set accessor
 * function is undefined. Its get accessor function performs the following
 * steps:
 */
function DataViewPrototypeByteLength(global, this, NewTarget, strict, args) {
  /* 1. Let O be the this value. */
  O := this;
  /* 2. If Type(O) is not Object, */
  if (Type(O) != "Object")
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 3. If O does not have a [[ViewedArrayBuffer]] internal slot, */
  if (!("ViewedArrayBuffer" in_obj O))
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 4. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot. */
  buffer := O.ViewedArrayBuffer;
  /* 5. If IsDetachedBuffer(buffer) is true, */
  if (IsDetachedBuffer(buffer) == true)
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 6. Let size be the value of O's [[ByteLength]] internal slot. */
  size := O.ByteLength;
  /* 7. Return size. */
  return size;
}


/**
 * 24.2.4.3 get DataView.prototype.byteOffset
 *
 * DataView.prototype.byteOffset is an accessor property whose set accessor
 * function is undefined. Its get accessor function performs the following
 * steps:
 */
function DataViewPrototypeByteOffset(global, this, NewTarget, strict, args) {
  /* 1. Let O be the this value. */
  O := this;
  /* 2. If Type(O) is not Object, */
  if (Type(O) != "Object")
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 3. If O does not have a [[ViewedArrayBuffer]] internal slot, */
  if (!("ViewedArrayBuffer" in_obj O))
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 4. Let buffer be the value of O's [[ViewedArrayBuffer]] internal slot. */
  buffer := O.ViewedArrayBuffer;
  /* 5. If IsDetachedBuffer(buffer) is true, */
  if (IsDetachedBuffer(buffer) == true)
    /* throw a TypeError exception */
    throw TypeErrorConstructorInternal();
  /* 6. Let offset be the value of O's [[ByteOffset]] internal slot. */
  offset := O.ByteOffset;
  /* 7. Return offset. */
  return offset;
}


/**
 * 24.2.4.5 DataView.prototype.getFloat32 (byteOffset [ , littleEndian ] )
 *
 * When the getFloat32 method is called with argument byteOffset and optional
 * argument littleEndian the following steps are taken:
 */
function DataViewPrototypeGetFloat32(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  littleEndian := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return GetViewValue(v, byteOffset, littleEndian, "Float32"). */
  value := GetViewValue(v, byteOffset, littleEndian, "Float32");
  return value;
}


/**
 * 24.2.4.6 DataView.prototype.getFloat64 (byteOffset [ , littleEndian ] )
 *
 * When the getFloat64 method is called with argument byteOffset and optional
 * argument littleEndian the following steps are taken:
 */
function DataViewPrototypeGetFloat64(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  littleEndian := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return GetViewValue(v, byteOffset, littleEndian, "Float64"). */
  return GetViewValue(v, byteOffset, littleEndian, "Float64");
}

/**
 * 24.2.4.7 DataView.prototype.getInt8 (byteOffset)
 *
 * When the getInt8 method is called with argument byteOffset the following
 * steps are taken:
 */
function DataViewPrototypeGetInt8(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. Return GetViewValue(v, byteOffset, true, "Int8"). */
  return GetViewValue(v, byteOffset, true, "Int8");
}


/**
 * 24.2.4.8 DataView.prototype.getInt16 (byteOffset [ , littleEndian ] )
 *
 * When the getInt16 method is called with argument byteOffset and optional
 * argument littleEndian the following steps are taken:
 */
function DataViewPrototypeGetInt16(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  littleEndian := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return GetViewValue(v, byteOffset, littleEndian, "Int16"). */
  return GetViewValue(v, byteOffset, littleEndian, "Int16");
}


/**
 * 24.2.4.9 DataView.prototype.getInt32 (byteOffset [ , littleEndian ] )
 *
 * When the getInt32 method is called with argument byteOffset and optional
 * argument littleEndian the following steps are taken:
 */
function DataViewPrototypeGetInt32(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  littleEndian := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be undefined */
    littleEndian := 'undefined;
  /* 3. Return GetViewValue(v, byteOffset, littleEndian, "Int32"). */
  return GetViewValue(v, byteOffset, littleEndian, "Int32");
}


/**
 * 24.2.4.10 DataView.prototype.getUint8 (byteOffset)
 *
 * When the getUint8 method is called with argument byteOffset the following
 * steps are taken:
 */
function DataViewPrototypeGetUint8(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. Return GetViewValue(v, byteOffset, true, "Uint8"). */
  return GetViewValue(v, byteOffset, true, "Uint8");
}



/**
 * 24.2.4.11 DataView.prototype.getUint16 (byteOffset [ , littleEndian ] )
 *
 * When the getUint16 method is called with argument byteOffset and optional
 * argument littleEndian the following steps are taken:
 */
function DataViewPrototypeGetUint16(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  littleEndian := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return GetViewValue(v, byteOffset, littleEndian, "Uint16"). */
  return GetViewValue(v, byteOffset, littleEndian, "Uint16");
}


/**
 * 24.2.4.12 DataView.prototype.getUint32 (byteOffset [ , littleEndian ] )
 *
 * When the getUint32 method is called with argument byteOffset and optional
 * argument littleEndian the following steps are taken:
 */
function DataViewPrototypeGetUint32(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  littleEndian := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return GetViewValue(v, byteOffset, littleEndian, "Uint32"). */
  return GetViewValue(v, byteOffset, littleEndian, "Uint32");
}


/**
 * 24.2.4.13 DataView.prototype.setFloat32 (byteOffset, value [ , littleEndian ] )
 *
 * When the setFloat32 method is called with arguments byteOffset and value and
 * optional argument littleEndian the following steps are taken:
 */
function DataViewPrototypeSetFloat32(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return SetViewValue(v, byteOffset, littleEndian, "Float32", value). */
  return SetViewValue(v, byteOffset, littleEndian, "Float32", value);
}


/**
 * 24.2.4.14 DataView.prototype.setFloat64 (byteOffset, value [ , littleEndian ] )
 *
 * When the setFloat64 method is called with arguments byteOffset and value and
 * optional argument littleEndian the following steps are taken:
 */
function DataViewPrototypeSetFloat64(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return SetViewValue(v, byteOffset, littleEndian, "Float64", value). */
  return SetViewValue(v, byteOffset, littleEndian, "Float64", value);
}


/**
 * 24.2.4.15 DataView.prototype.setInt8 (byteOffset, value)
 *
 * When the setInt8 method is called with arguments byteOffset and value the
 * following steps are taken:
 */
function DataViewPrototypeSetInt8(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. Return SetViewValue(v, byteOffset, true, "Int8", value). */
  return SetViewValue(v, byteOffset, true, "Int8", value);
}


/**
 * 24.2.4.16 DataView.prototype.setInt16 (byteOffset, value [ , littleEndian ] )
 *
 * When the setInt16 method is called with arguments byteOffset and value and
 * optional argument littleEndian the following steps are taken:
 */
function DataViewPrototypeSetInt16(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return SetViewValue(v, byteOffset, littleEndian, "Int16", value). */
  return SetViewValue(v, byteOffset, littleEndian, "Int16", value);
}



/**
 * 24.2.4.17 DataView.prototype.setInt32 (byteOffset, value [ , littleEndian ] )
 *
 * When the setInt32 method is called with arguments byteOffset and value and
 * optional argument littleEndian the following steps are taken:
 */
function DataViewPrototypeSetInt32(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return SetViewValue(v, byteOffset, littleEndian, "Int32", value). */
  return SetViewValue(v, byteOffset, littleEndian, "Int32", value);
}



/**
 * 24.2.4.18 DataView.prototype.setUint8 (byteOffset, value)
 *
 * When the setUint8 method is called with arguments byteOffset and value the
 * following steps are taken:
 */
function DataViewPrototypeSetUint8(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. Return SetViewValue(v, byteOffset, true, "Uint8", value). */
  return SetViewValue(v, byteOffset, true, "Uint8", value);
}


/**
 * 24.2.4.19 DataView.prototype.setUint16 (byteOffset, value [ , littleEndian ] )
 *
 * When the setUint16 method is called with arguments byteOffset and value and
 * optional argument littleEndian the following steps are taken:
 */
function DataViewPrototypeSetUint16(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return SetViewValue(v, byteOffset, littleEndian, "Uint16", value). */
  return SetViewValue(v, byteOffset, littleEndian, "Uint16", value);
}


/**
 * 24.2.4.20 DataView.prototype.setUint32 (byteOffset, value [ , littleEndian ] )
 *
 * When the setUint32 method is called with arguments byteOffset and value and
 * optional argument littleEndian the following steps are taken:
 */
function DataViewPrototypeSetUint32(global, this, NewTarget, strict, args) {
  byteOffset := getOptionalParam(args, 0);
  value := getOptionalParam(args, 1);
  littleEndian := getOptionalParam(args, 2);
  /* 1. Let v be the this value. */
  v := this;
  /* 2. If littleEndian is not present, */
  if (littleEndian == null)
    /* let littleEndian be false */
    littleEndian := false;
  /* 3. Return SetViewValue(v, byteOffset, littleEndian, "Uint32", value). */
  return SetViewValue(v, byteOffset, littleEndian, "Uint32", value);
}


/*
 * 24.2.4.21 DataView.prototype[ @@toStringTag ]
 *
 * The initial value of the @@toStringTag property is the String value "DataView".
 *
 * This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: true }.
*/


/*function getElementSize(type) {
  /*table 49*/

  /*Element  -> Size*/
  /* Int8    -> 1; */
  /* Uint8   -> 1; */
  /* Uint8C  -> 1; */
  /* Int16   -> 2; */
  /* Uint16  -> 2; */
  /* Int32   -> 4; */
  /* UInt32  -> 4; */
  /* Float32 -> 4; */
  /* Float64 -> 8; */

 /* switch (type) {
    case "Int8"    : { return 1}
    case "Uint8"   : { return 1}
    case "Uint8C"  : { return 1}
    case "Int16"   : { return 2}
    case "Uint16"  : { return 2}
    case "Int32"   : { return 4}
    case "UInt32"  : { return 4}
    case "Float32" : { return 4}
    case "Float64" : { return 8}
  }

}*/
