/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

function DefineMethodAlt(scope, object, method, functionPrototype) {
    FunctionBody := method.body;
    FormalParameterListopt := method.params;
    F := FunctionCreate("normal", FormalParameterListopt, FunctionBody, scope.LexicalEnvironment, true, functionPrototype);
    MakeMethod(F, object);
    return { closure: F };
}

/**
 * 14.3.8 Runtime Semantics: DefineMethod
 *
 * With parameters object and optional parameter functionPrototype.
 */
function DefineMethodProperty(scope, object, propertyName, func, functionPrototype) {
  /* 1. Let propKey be the result of evaluating PropertyName. */
  propKey := JS_Interpreter_PropertyName(propertyName, scope, false);
  /* 2. ReturnIfAbrupt(propKey). */
  @ReturnIfAbrupt(propKey);
  /* 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false. */
  /* strict := isStrictModeCode(getFunctionCode(functionPrototype), scope); */
  /* 4. Let scope be the running execution context’s LexicalEnvironment. */
  lexEnv := getLexicalEnvironment(scope);
  /* 5. If functionPrototype was passed as a parameter, let kind be Normal; otherwise let kind be Method. */
  if (functionPrototype != null) 
		kind := "Normal"; 
	else 
		kind := "Method";
  /* 6. Let closure be FunctionCreate(kind, StrictFormalParameters, FunctionBody, scope, strict). If functionPrototype was passed as a
     parameter then pass its value as the functionPrototype optional argument of FunctionCreate. */
  closure := FunctionCreate(kind, func.params, func.body, lexEnv, true, functionPrototype);
  /* 7. Perform MakeMethod(closure, object). */
  MakeMethod(closure, object);
  /* 8. Return the Record{[[key]]: propKey, [[closure]]: closure}. */
  /* propKey := ToString(propKey); */
  return { key: propKey, closure: closure };
}

function MethodPropertyDefinitionEvaluation(scope, object, enumerable, methodPropertyDefinition) {
	match methodPropertyDefinition with
	| { kind: "get", key: key, value: func} -> {
		/* 1. Let propKey be the result of evaluating PropertyName. */
		propKey := JS_Interpreter_PropertyName(key, scope, false);
		exprValue := JS_Interpreter_Expr(key, scope);
		if (key.type == "Identifier" &&&  GetBase(exprValue) == 'undefined) {
			propKey := key.name;
		} else {
			propName := GetValue(exprValue);
			@ReturnIfAbrupt(propName);
			propKey := ToPropertyKey(propName);
		}
		/* 2. ReturnIfAbrupt(propKey). */
		@ReturnIfAbrupt(propKey);
		/* 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false. */
		strict := isStrictModeCode(getFunctionCode(func), scope);
		/* 4. Let scope be the running execution context’s LexicalEnvironment. */
		lexEnv := getLexicalEnvironment(scope);
		/* 5. Let formalParameterList be the production FormalParameters : [empty] */
		formalParameterList := [];
		/* 6. Let closure be FunctionCreate(Method, formalParameterList, FunctionBody, scope, strict). */
		closure := FunctionCreate("Method", func.params, func.body, lexEnv, strict, null);
		/* 7. Perform MakeMethod(closure, object). */
		MakeMethod(closure, object);
		/* 8. Perform SetFunctionName(closure, propKey, "get"). */
		SetFunctionName(closure, propKey, "get");
		delete closure.JSProperties["caller"];
		/* 9. Let desc be the PropertyDescriptor{[[Get]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true} */
		desc := newGetAccessorPropertyDescriptorFull(closure, enumerable, true);
		/* 10. Return DefinePropertyOrThrow(object, propKey, desc). */
		return DefinePropertyOrThrow(object, propKey, desc);
	}
	| { kind: "set", key: key, value: func} -> {
		/* 1. Let propKey be the result of evaluating PropertyName. */
		exprValue := JS_Interpreter_Expr(key, scope);
		if (key.type == "Identifier" &&& GetBase(exprValue) == 'undefined) {
			propKey := key.name;
		} else {
			propName := GetValue(exprValue);
			@ReturnIfAbrupt(propName);
			propKey := ToPropertyKey(propName);
		}
		/* 2. ReturnIfAbrupt(propKey). */
		@ReturnIfAbrupt(propKey);
		/* 3. If the function code for this MethodDefinition is strict mode code, let strict be true. Otherwise let strict be false. */
		strict := isStrictModeCode(getFunctionCode(func), scope);
		/* 4. Let scope be the running execution context’s LexicalEnvironment. */
		lexEnv := getLexicalEnvironment(scope);
		/* 5. Let closure be FunctionCreate(Method, formalParameterList, FunctionBody, scope, strict). */
		closure := FunctionCreate("Method", func.params, func.body, lexEnv, strict, null);
		delete closure.JSProperties["caller"];
		/* 6. Perform MakeMethod(closure, object). */
		MakeMethod(closure, object);
		/* 7. Perform SetFunctionName(closure, propKey, "get"). */
		SetFunctionName(closure, propKey, "set");
		/* 8. Let desc be the PropertyDescriptor{[[Set]]: closure, [[Enumerable]]: enumerable, [[Configurable]]: true} */
		desc := newSetAccessorPropertyDescriptorFull(closure, enumerable, true);
		/* 9. Return DefinePropertyOrThrow(object, propKey, desc). */
		return DefinePropertyOrThrow(object, propKey, desc);
	}
	| { key: key, value: func} -> {
		/* 1. Let methodDef be DefineMethod of MethodDefinition with argument object. */
		methodDef := DefineMethodProperty(scope, object, key, func, null);
		/* 2. ReturnIfAbrupt(methodDef). */
		@ReturnIfAbrupt(methodDef);
		/* 3. Perform SetFunctionName(methodDef.[[closure]], methodDef.[[key]]). */
		SetFunctionName(methodDef.closure, methodDef.key, null);
		/* 4. Let desc be the Property Descriptor{[[Value]]: methodDef.[[closure]], [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}. */
		desc := newDataPropertyDescriptorFull(methodDef.closure, true, enumerable, true);
		/* 5. Return DefinePropertyOrThrow(object, methodDef.[[key]], desc). */
		return DefinePropertyOrThrow(object, methodDef.key, desc);
	}
	| default -> {
		print methodPropertyDefinition;
		fail "MethodPropertyDefinitionEvaluation";
	}
}

function EvaluateMethod(expression, scope) {
	evaluation := JS_Interpreter_Expr(expression, scope);
	@ReturnIfAbrupt(evaluation);
	value := GetValue(evaluation);
	@ReturnIfAbrupt(value);
	return ToPropertyKey(value);
}
