/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import "./esl_interpreter.esl";
import "./bindings/ffi_symbolic.esl";
import "./bindings/node-bindings.esl";

function init() {
  initGlobalVars();
  |globals_stack| := stack_make();
  |__dirname| := extern __dirname();
  |__filename| := extern __filename();
  return;
}

function stringOfError(error : object) : string {
  name := Get(error, "name");
  @ReturnIfAbrupt(name);
  if (name == 'undefined)
    name := "Error";

  message := Get(error, "message");
  @ReturnIfAbrupt(message);
  if (message == 'undefined)
    return "Uncaught " + name;
  return "Uncaught " + name + ": " + message;
}

function main() {
  init();
  let ast = buildAST();
  let res = nodeInitAndRun(ast, false);
  let val = getCompletionValue(res);
  if ((typeof val == "object") &&& ("ErrorData" in_obj val)) {
    let name = Get(val, "name");
    if (name == "TypeError") {
      print "Uncaught TypeError";
      extern assume(false);
    }
    let err = stringOfError(val);
    extern abort(err);
  }

  return res;
}
