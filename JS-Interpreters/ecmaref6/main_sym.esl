import "./esl_interpreter.esl";
import "./bindings/ffi_symbolic.esl";
import "./bindings/node-bindings.esl";

function init() {
  initGlobalVars();
  |globals_stack| := stack_make();
  |__dirname| := extern __dirname();
  |__filename| := extern __filename();
  return;
}

function stringOfError(error : object) : string {
  name := Get(error, "name");
  @ReturnIfAbrupt(name);
  if (name == 'undefined)
    name := "Error";

  message := Get(error, "message");
  @ReturnIfAbrupt(message);
  if (message == 'undefined)
    return "Uncaught " + name;
  return "Uncaught " + name + ": " + message;
}

function main() {
  init();
  let ast = buildAST();
  let res = nodeInitAndRun(ast, false);
  let val = getCompletionValue(res);
  if ((typeof val == "object") &&& ("ErrorData" in_obj val)) {
    let name = Get(val, "name");
    if (name == "TypeError") {
      print "Uncaught TypeError";
      extern assume(false);
    }
    let err = stringOfError(val);
    extern abort(err);
  }

  return res;
}
