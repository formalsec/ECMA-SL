/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* function IdentifierResolution(Identifier) { */
function IdentifierResolution(Identifier, runningExecCtx) {
  /* 10.3.1 Identifier Resolution */
  /* Identifier resolution is the process of determining the binding of an Identifier using the LexicalEnvironment of
    the running execution context. During execution of ECMAScript code, the syntactic production
    PrimaryExpression : Identifier is evaluated using the following algorithm: */

  /* 1. Let env be the running execution context‘s LexicalEnvironment. */
  env := getLexicalEnvironment(runningExecCtx);
  /* 2. If the syntactic production that is being evaluated is contained in a strict mode code,
        then let strict be true, else let strict be false. */
  if (isContainedInStrictCode(runningExecCtx))
    strict := true;
  else
    strict := false;
  /* 3. Return the result of calling GetIdentifierReference function passing env, Identifier, and strict as arguments.
        The result of evaluating an identifier is always a value of type Reference with its referenced name component
        equal to the Identifier String. */
  return GetIdentifierReference(env, Identifier, strict);
}


/* Auxiliary functions created to deal with Execution Contexts */
function createExecutionContext() {
  return {
    LexicalEnvironment: 'undefined,
    VariableEnvironment: 'undefined,
    ThisBinding: 'undefined,
    Function: 'undefined,
    Realm: 'undefined,
    /* CodeEvaluationState: 'undefined */
    running: true,
    strictCode: false
  };
}

/* TODO ver como para contexto de execucao */
function setStateExecutionContext(runningExecCtx, running) {
  runningExecCtx.running := running;
}

function getLexicalEnvironment(runningExecCtx) {
  return runningExecCtx.LexicalEnvironment;
}

function getVariableEnvironment(runningExecCtx) {
  return runningExecCtx.VariableEnvironment;
}

function getThisBinding(runningExecCtx) {
  return runningExecCtx.ThisBinding;
}

function setLexicalEnvironment(runningExecCtx, lexicalEnvironment) {
  runningExecCtx.LexicalEnvironment := lexicalEnvironment;
  return 'undefined; /* TODO the return statement is necessary because of the Monitor. Check why! */
}

function setVariableEnvironment(runningExecCtx, variableEnvironment) {
  runningExecCtx.VariableEnvironment := variableEnvironment;
  return 'undefined; /* TODO the return statement is necessary because of the Monitor. Check why! */
}

function setThisBinding(runningExecCtx, thisBinding) {
  runningExecCtx.ThisBinding := thisBinding;
  return 'undefined; /* TODO the return statement is necessary because of the Monitor. Check why! */
}

function setContainedInStrictCode(execCtx, strictCode) {
  execCtx.strictCode := strictCode;
  return 'undefined; /* TODO the return statement is necessary because of the Monitor. Check why! */
}

function isContainedInStrictCode(execCtx) {
  return execCtx.strictCode;
}

/* 8.3.1 ResolveBinding ( name, [env] ) */

/* The ResolveBinding abstract operation is used to determine the binding of name passed as a String
  value. The optional argument env can be used to explicitly provide the Lexical Environment that is
  to be searched for the binding. During execution of ECMAScript code, ResolveBinding is performed
  using the following algorithm: */
function ResolveBinding(scope, name, env)  {
  /* If env was not passed or if env is undefined, then */
  if (env == 'undefined ||| env == null)
    /* Let env be the running execution context’s LexicalEnvironment. */
    env := getLexicalEnvironment(scope);

  /* Assert: env is a Lexical Environment. */
  /* assert (isLexicalEnvironment(env) ); */

  /* If the code matching the syntactic production that is being evaluated is contained in strict
  mode code, let strict be true, else let strict be false. */
  /* Return GetIdentifierReference(env, name, strict ). */
  return GetIdentifierReference(env, name, isContainedInStrictCode(scope));
  /* NOTE The result of ResolveBinding is always a Reference value with its referenced name component equal to the name argument. */
}

/* 8.3.2 GetThisEnvironment ( )
 *
 * The abstract operation GetThisEnvironment finds the Environment Record that currently supplies the binding of the keyword this. GetThisEnvironment performs the following steps:
 */
function GetThisEnvironment(scope) {
  /* 1. Let lex be the running execution context’s LexicalEnvironment. */
  scope := topExecStack();
  lex := getLexicalEnvironment(scope);
  /* 2. Repeat */
  repeat {
    /* a. Let envRec be lex’s EnvironmentRecord. */
    envRec := lex.EnvRec;
    /* b. Let exists be envRec.HasThisBinding(). */
    exists := {envRec.HasThisBinding}(envRec);
    /* c. If exists is true, return envRec. */
    if (exists)
      return envRec;
    /* d. Let outer be the value of lex’s outer environment reference. */
    outer := lex.OuterEnvRef;
    /* e. Let lex be outer. */
    lex := outer;
  }
}
/* NOTE: The loop in step 2 will always terminate because the list of environments always ends with the global environment which has a this binding. */

/* 8.3.3 ResolveThisBinding ( )
 *
 * The abstract operation ResolveThisBinding determines the binding of the keyword this using the LexicalEnvironment of the running execution context.
 * ResolveThisBinding performs the following steps:
 */
function ResolveThisBinding(scope) {
  /* 1. Let envRec be GetThisEnvironment( ). */
  envRec := GetThisEnvironment(scope);
  /* 2. Return envRec.GetThisBinding(). */
  return {envRec.GetThisBinding}(envRec);
}

/* 8.3.4 GetNewTarget ( )
 *
 * The abstract operation GetNewTarget determines the NewTarget value using the LexicalEnvironment of the running execution context.
 * GetNewTarget performs the following steps:
 */
function GetNewTarget(scope) {
  /* 1. Let envRec be GetThisEnvironment( ). */
  envRec := GetThisEnvironment(scope);
  /* 2. Assert: envRec has a [[NewTarget]] field. */
  assert ("__NewTarget" in_obj envRec);
  /* 3. Return envRec.[[NewTarget]]. */
  return envRec.__NewTarget;
}

/* 8.3.5 GetGlobalObject ( )

The abstract operation GetGlobalObject returns the global object used by the currently running
execution context. GetGlobalObject performs the following steps: */
function GetGlobalObject(ctx) {
  /* Let ctx be the running execution context. */

  /* Let currentRealm be ctx’s Realm. */
  currentRealm := ctx.Realm;
  /* Return currentRealm.[[globalThis]]. */
  return currentRealm.globalThis;
}
