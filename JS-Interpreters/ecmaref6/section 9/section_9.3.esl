/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* Section 9.2 - Built-in Function Objects */


/* Section 9.3.1 - Built-in [[Call]] */
function BuiltInCall_Handler(error) {
	popExecStack();
	throw error;
}

/**
 * 9.3.1 [[Call]] (thisArgument, argumentsList)
 *
 * The [[Call]] internal method for a built-in function object F is called with
 * parameters thisArgument and argumentsList, a List of ECMAScript language
 * values. The following steps are taken:
 */
function BuiltInCall(externalScope, ref, F, V, NewTarget, argumentsList) {
  /* 1. Let callerContext be the running execution context. */
  callerContext := topExecStack();
  /* 2. If callerContext is not already suspended, */
  if (callerContext.Suspend != true) {
    /* Suspend callerContext */
    callerContext.Suspend := true;
  }
  /* 3. Let calleeContext be a new ECMAScript code execution context. */
  calleeContext := createExecutionContext();
  /* 4. Set the Function of calleeContext to F. */
  calleeContext.Function := F;
  /* 5. Let calleeRealm be the value of F's [[Realm]] internal slot. */
  calleeRealm := F.Realm;
  /* 6. Set the Realm of calleeContext to calleeRealm. */
  calleeContext.Realm := calleeRealm;
  /* 7. Perform any necessary implementation defined initialization of
     calleeContext. */
  setLexicalEnvironment(calleeContext, getLexicalEnvironment(callerContext));
	setVariableEnvironment(calleeContext, getVariableEnvironment(callerContext));
  /* 8. Push calleeContext onto the execution context stack; calleeContext is
     now the running execution context. */
  pushExecStack(calleeContext);

  /* 9. Let result be the Completion Record that is the result of evaluating F
     in an implementation defined manner that conforms to the specification
     of F. thisArgument is the this value, argumentsList provides the named
     parameters, and the NewTarget value is undefined. */
  result := 'undefined;
  if (("ECMAScriptCode" in_obj F) &&& (typeof F.ECMAScriptCode == "string")
		&&& ((F.ECMAScriptCode == "FunctionPrototypeCall") ||| (F.ECMAScriptCode == "TypedArraySubConstructor"))) {
	  args := completeArgs(argumentsList, F);
	  result := {F.ECMAScriptCode}(externalScope, V, NewTarget, F.strict, args) catch BuiltInCall_Handler;
	}
	else if (("ECMAScriptCode" in_obj F) &&& ((typeof F.ECMAScriptCode == "string") ||| (typeof F.ECMAScriptCode == "curry"))) {
	  args := completeArgs(argumentsList, F);
	  result := {F.ECMAScriptCode}(F.Environment, V, NewTarget, F.strict, args) catch BuiltInCall_Handler;
	}

  /* 10. Remove calleeContext from the execution context stack and restore callerContext as the running execution context. */
  if (calleeContext == topExecStack())
    popExecStack();
  callerContext.Suspend := false;
  /* 11. Return result. */
  if (isErrorCompletion(result))
		throw getCompletionValue(result);
	return result;
}

/**
 * 9.3.2 [[Construct]] (argumentsList, newTarget)
 *
 * The [[Construct]] internal method for built-in function object F is called with parameters
 *   argumentsList and newTarget. The steps performed are the same as [[Call]] (see 9.3.1)
 *   except that step 9 is replaced by:
 */

/**
 * 9.3.3 CreateBuiltinFunction (realm, steps, prototype, internalSlotsList)
 *
 * The abstract operation CreateBuiltinFunction takes arguments realm,
 * prototype, and steps. The optional argument internalSlotsList is a List of
 * the names of additional internal slots that must be defined as part of the
 * object. If the list is not provided, an empty List is used.
 * CreateBuiltinFunction returns a built-in function object created by the
 * following steps:
 */
function BuiltInConstruct(externalScope, ref, F, argumentsList, NewTarget) {
  /* 13.2.2 [[Construct]] */

  /* When the [[Construct]] internal method for a Function object F is called with a possibly empty list of arguments,
     the following steps are taken: */

  /* 1. Let obj be a newly created native ECMAScript object. */
  obj := NewECMAScriptObject();
  /* 2. Set all the internal methods of obj as specified in 8.12. */
  setAllInternalMethodsOfOrdinaryObject(obj);
  /* 3. Set the [[Class]] internal property of obj to "Object". */
  obj.Class := "Object";
  /* 4. Set the [[Extensible]] internal property of obj to true. */
  obj.Extensible := true;
  /* 5. Let proto be the value of calling the [[Get]] internal property of F with argument "prototype". */
  proto := {F.Get}(F, "prototype", F);
  /* 6. If Type(proto) is Object, set the [[Prototype]] internal property of obj to proto. */
  if (Type(proto) == "Object")
    obj.Prototype := proto;
  /* 7. If Type(proto) is not Object, set the [[Prototype]] internal property of obj to the standard built-in Object prototype
        object as described in 15.2.4. */
  if (Type(proto) != "Object")
    obj.Prototype := getObjectPrototype();
  /* 8. Let result be the result of calling the [[Call]] internal property of F, providing obj as the this value and providing the
        argument list passed into [[Construct]] as args. */
  result := {F.Call}(externalScope, ref, F, obj, NewTarget, argumentsList);
  @ReturnIfAbrupt(result);
  /* 9. If Type(result) is Object then return result. */
  if (Type(result) == "Object")
    return result;
  /* 10. Return obj */
  return obj;
}

function CreateBuiltInFunctionObject(FormalParameterList, steps, realm, strict, internal_length) {
  /* 1. Assert: realm is a Realm Record. */
  /* 2. Assert: steps is either a set of algorithm steps or other definition
     of a functions behaviour provided in this specification. */
  /* In our case, steps is the internal function name that needs to be executed */
 /* assert (Type(steps) == "String" || Type(steps) == ); */
  /* 3. Let func be a new built-in function object that when called performs
     the action described by steps. The new function object has internal
     slots whose names are the elements of internalSlotsList. The initial
     value of each of those internal slots is undefined. */
  func := FunctionCreate("normal", FormalParameterList, steps, realm.globalEnv, strict, null);
  func.Call := "BuiltInCall";
  delete func.Construct;
  if (internal_length != null)
    setInternalProperty(func, "internalLength", internal_length);
  /* 4. Set the [[Realm]] internal slot of func to realm. */
  func.Realm := realm;
  /* 6. Return func. */
  return func;
}
/**
 * Each built-in function defined in this specification is created as if by
 * calling the CreateBuiltinFunction abstract operation, unless otherwise
 * specified.
 */

/* We also need a CreateGeneralBuiltInFunction because of the prototype */
function CreateGeneralBuiltInFunction(Prototype, FormalParameterList, steps, realm, strict, internal_length) {
  func := FunctionCreate("normal", FormalParameterList, steps, realm.globalEnv, strict, Prototype);
  func.Call := "BuiltInCall";
  func.Construct := "BuiltInConstruct";
  if (internal_length != null)
    setInternalProperty(func, "internalLength", internal_length);
  func.Realm := realm;
  /* 5. Set the [[Prototype]] internal slot of func to prototype. */
  func.Prototype := Prototype;
  return func;
}

/* Auxiliary Functions */

/* Unless otherwise specified in the description of a particular function, if a function or constructor described in
   this clause is given fewer arguments than the function is specified to require, the function or constructor shall
   behave exactly as if it had been given sufficient additional arguments, each such argument being the
   undefined value. */
function completeArgs(args, functionObject) {
  lParams := getInternalProperty(functionObject, "internalLength");
  lArgs := int_to_float l_len(args);
  if (lArgs >= lParams)
    return args;
  i := lParams - lArgs;
  aux := [];
  while (i > 0.) {
    aux := l_prepend('undefined, aux);
    i := i - 1.;
  }

  return l_concat(args, aux);
}
