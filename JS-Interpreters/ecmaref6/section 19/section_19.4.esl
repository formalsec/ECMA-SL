function initSymbolPrototype(global, objectPrototype, strict) {
  prototype := NewECMAScriptObjectFull(objectPrototype, "Object", true);
  setAllInternalMethodsOfOrdinaryObject(prototype);

  /* 19.4.3.2 Symbol.prototype.toString () */
  toStringFunctionObject := CreateBuiltInFunctionObject([], "symbolToString", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(toStringFunctionObject, true, false, true);
  setJSProperty(prototype, "toString", descriptor);
  setJSProperty(toStringFunctionObject, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(toStringFunctionObject, "name", newDataPropertyDescriptorFull("toString", false, false, true));

  /* 19.4.3.3 Symbol.prototype.valueOf () */
  valueOfFunctionObject := CreateBuiltInFunctionObject([], "symbolValueOf", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(valueOfFunctionObject, true, false, true);
  setJSProperty(prototype, "valueOf", descriptor);
  setJSProperty(valueOfFunctionObject, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(valueOfFunctionObject, "name", newDataPropertyDescriptorFull("valueOf", false, false, true));

  /* 19.4.3.4 Symbol.prototype [@@toPrimitive] () */
  toPrimitiveFunctionObject := CreateBuiltInFunctionObject([], "symbolValueOf", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(toPrimitiveFunctionObject, false, false, true);
  setJSProperty(prototype, getToPrimitivePropertyName(), descriptor);
  setJSProperty(toPrimitiveFunctionObject, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(toPrimitiveFunctionObject, "name", newDataPropertyDescriptorFull("[Symbol.toPrimitive]", false, false, true));

  /* 19.4.3.5 Symbol.prototype [@@toStringTag] () */
  descriptor := newDataPropertyDescriptorFull("Symbol", false, false, true);
  setJSProperty(prototype, getToStringTagPropertyName(), descriptor);

  /* Symbol.prototype.description: Existe apenas no ES10 */
  descriptionFunctionObject := CreateGeneralBuiltInFunction(getFunctionPrototype(strict), [], "getSymbolDescriptionAccessorProperty", global, false, null);
  descriptor := newGetAccessorPropertyDescriptorFull(descriptionFunctionObject, false, true);
  setJSProperty(prototype, "description", descriptor);

  return prototype;
}

function initSymbolObject(global, objectPrototype, strict) {
  objSymbolPrototype := initSymbolPrototype(global, objectPrototype, strict);
  objSymbolConstructor := CreateGeneralBuiltInFunction(getFunctionPrototype(strict), ["items"], "SymbolConstructor", global, strict, 0.);
  setJSProperty(objSymbolConstructor, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(objSymbolConstructor, "name", newDataPropertyDescriptorFull("Symbol", false, false, true));
  setJSProperty(objSymbolConstructor, "species", newDataPropertyDescriptorFull("species", false, false, true));

  descriptor := newDataPropertyDescriptorFull(objSymbolConstructor, true, false, true);
  setJSProperty(objSymbolPrototype, "constructor", descriptor);

  /* 19.4.2.1 Symbol.for (key) */
  forFunctionObject := CreateBuiltInFunctionObject([], "symbolFor", global, strict, 0.);
  descriptor := newDataPropertyDescriptorFull(forFunctionObject, true, false, true);
  setJSProperty(objSymbolConstructor, "for", descriptor);
  setJSProperty(forFunctionObject, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(forFunctionObject, "name", newDataPropertyDescriptorFull("for", false, false, true));

  /* 19.4.2.2 Symbol.hasInstance
    The initial value of Symbol.hasInstance is the well known symbol @@hasInstance.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.hasInstance"), false, false, false);
  setJSProperty(objSymbolConstructor, "hasInstance", descriptor);

  /* 19.4.2.3 Symbol.isConcatSpreadable
    The initial value of Symbol.isConcatSpreadable is the well known symbol @@isConcatSpreadable.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.isConcatSpreadable"), false, false, false);
  setJSProperty(objSymbolConstructor, "isConcatSpreadable", descriptor);

  /* 19.4.2.4 Symbol.iterator
    The initial value of Symbol.iterator is the well known symbol @@iterator.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.iterator"), false, false, false);
  setJSProperty(objSymbolConstructor, "iterator", descriptor);

  /* 19.4.2.5 Symbol.keyFor (key) */
  keyForFunctionObject := CreateBuiltInFunctionObject([], "symbolKeyFor", global, strict, 0.);
  descriptor := newDataPropertyDescriptorFull(keyForFunctionObject, true, false, true);
  setJSProperty(objSymbolConstructor, "keyFor", descriptor);
  setJSProperty(keyForFunctionObject, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setJSProperty(keyForFunctionObject, "name", newDataPropertyDescriptorFull("keyFor", false, false, true));

  /* 19.4.2.6 Symbol.match
    The initial value of Symbol.match is the well known symbol @@match.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.match"), false, false, false);
  setJSProperty(objSymbolConstructor, "match", descriptor);

  /* 19.4.2.7 Symbol.prototype
    The initial value of Symbol.prototype the intrinsic object %SymbolPrototype%.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.*/
  descriptor := newDataPropertyDescriptorFull(objSymbolPrototype, false, false, false);
  setJSProperty(objSymbolConstructor, "prototype", descriptor);

  /* 19.4.2.8 Symbol.replace
    The initial value of Symbol.replace is the well known symbol @@replace.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.replace"), false, false, false);
  setJSProperty(objSymbolConstructor, "replace", descriptor);

  /* 19.4.2.9 Symbol.search
    The initial value of Symbol.search is the well known symbol @@search.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.search"), false, false, false);
  setJSProperty(objSymbolConstructor, "search", descriptor);

  /* 19.4.2.10 Symbol.species
    The initial value of Symbol.species is the well known symbol @@species.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.species"), false, false, false);
  setJSProperty(objSymbolConstructor, "species", descriptor);

  /* 19.4.2.11 Symbol.split
    The initial value of Symbol.split is the well known symbol @@split.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.split"), false, false, false);
  setJSProperty(objSymbolConstructor, "split", descriptor);

  /* 19.4.2.12 Symbol.toPrimitive
    The initial value of Symbol.toPrimitive is the well known symbol @@toPrimitive.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.toPrimitive"), false, false, false);
  setJSProperty(objSymbolConstructor, "toPrimitive", descriptor);

  /* 19.4.2.13 Symbol.toStringTag
    The initial value of Symbol.toStringTag is the well known symbol @@toStringTag.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.toStringTag"), false, false, false);
  setJSProperty(objSymbolConstructor, "toStringTag", descriptor);

  /* 19.4.2.14 Symbol.unscopables
    The initial value of Symbol.unscopables is the well known symbol @@unscopables.
    This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  descriptor := newDataPropertyDescriptorFull(getWellKnownSymbol("Symbol.unscopables"), false, false, false);
  setJSProperty(objSymbolConstructor, "unscopables", descriptor);

  return objSymbolConstructor;
}

/* 19.4.1.1 Symbol ([description]) */
function SymbolConstructor(global, this, NewTarget, strict, args) {
  description := getOptionalParam(args, 0);
  /* 1. If NewTarget is not undefined, throw a TypeError exception. */
  if (NewTarget != 'undefined)
    throw TypeErrorConstructorInternal();
  /* 2. If description is undefined, let descString be undefined. */
  if (description == null || description == 'undefined) 
    descString := 'undefined; 
  else 
    descString := ToString(description);
  /* 3. ReturnIfAbrupt(descString). */
  @ReturnIfAbrupt(descString);
  /* 4. Return a new unique Symbol value whose [[Description]] value is descString. */
  return InternalSymbolConstructor(descString);
}

function SymbolObjectConstructor(symbolData) {
  obj := NewECMAScriptObject();
  setAllInternalMethodsOfOrdinaryObject(obj);
  obj.Prototype := |Intrinsics|.SymbolPrototype;
  obj.SymbolData := symbolData;
  return obj;
}

/* 19.4.2.1 Symbol.for (key) */
function symbolFor(global, this, NewTarget, strict, args) {
  key := l_nth(args, 0);
  /* 1. Let stringKey be ToString(key). */
  stringKey := ToString(key);
  /* 2. ReturnIfAbrupt(stringKey). */
  @ReturnIfAbrupt(stringKey);

  /* TODO ver como fazer a GlobalSymbolRegistry */

  /* 3. For each element e of the GlobalSymbolRegistry List */
  /* The GlobalSymbolRegistry has been changed to an object instead of a list for optimization reasons. There seems to be no way to write in the GlobalSymbolRegistry besides this function so it should have no downside. */
  if (stringKey in_obj |GlobalSymbolRegistry|)
    /* 3a. If SameValue(e.[[key]], stringKey) is true, return e.[[symbol]]. */
    return |GlobalSymbolRegistry|[stringKey].sym;
  /* 4. Assert: GlobalSymbolRegistry does not currently contain an entry for stringKey. */
  /* assert (false); *//* It was just verified. */
  /* 5. Let newSymbol be a new unique Symbol value whose [[Description]] value is stringKey. */
  newSymbol := InternalSymbolConstructor(stringKey);
  /* 6. Append the record { [[key]]: stringKey, [[symbol]]: newSymbol } to the GlobalSymbolRegistry List. */
  |GlobalSymbolRegistry|[stringKey] := {key: stringKey, sym: newSymbol, wellknown: false};
  /* 7. Return newSymbol. */
  return newSymbol;
}

/* 19.4.2.5 Symbol.keyFor (sym) */
function symbolKeyFor(global, this, NewTarget, strict, args) {
  sym := l_nth(args, 0);
  /* 1. If Type(sym) is not Symbol, throw a TypeError exception. */
  if (Type(sym) != "Symbol")
    throw TypeErrorConstructorInternal();
  /* 2. For each element e of the GlobalSymbolRegistry List (see 19.4.2.1), */
    /* 2a. If SameValue(e.[[symbol]], sym) is true, return e.[[key]]. */
  if (sym.Description in_obj |GlobalSymbolRegistry|) {
    e := |GlobalSymbolRegistry|[sym.Description];
    if (SameValue(e.sym, sym))
      return e.key;
  }
  /* 3. Assert: GlobalSymbolRegistry does not currently contain an entry for sym. */
  /* assert (!(in_list(sym, |GlobalSymbolRegistry|))); *//* Just checked. */
  /* 4. Return undefined. */
  return 'undefined;
}

/* 19.4.3.2 Symbol.prototype.toString () */
function symbolToString(global, this, NewTarget, strict, args) {
  /* 1. Let s be the this value. */
  s := this;
  /* 2. If Type(s) is Symbol, let sym be s. */
  if (Type(s) == "Symbol") {
    sym := s;
  /* 3. Else */
  } else {
    /* 3a. If Type(s) is not Object, throw a TypeError exception. */
    if (Type(s) != "Object")
      throw TypeErrorConstructorInternal();
    /* 3b. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception. */
    if (!("SymbolData" in_obj s))
      throw TypeErrorConstructorInternal();
    /* 3c. Let sym be the value of s’s [[SymbolData]] internal slot. */
    sym := s.SymbolData;
  }
  /* 4. Return SymbolDescriptiveString(sym). */
  return symbolDescriptiveString(sym);
}

/* 19.4.3.2.1 SymbolDescriptiveString (sym) */
function symbolDescriptiveString(sym) {
  /* 1. Assert: Type(sym) is Symbol.*/
  assert (Type(sym) == "Symbol");
  /* 2. Let desc be sym’s [[Description]] value. */
  desc := sym.Description;
  /* 3. If desc is undefined, let desc be the empty string.*/
  if (desc == 'undefined)
    desc := "";
  /* 4. Assert: Type(desc) is String. */
  assert (Type(desc) == "String");
  /* 5. Return the result of concatenating the strings "Symbol(", desc, and ")". */
  return s_concat(["Symbol(", desc, ")"]);
}

/* 19.4.3.3 Symbol.prototype.valueOf () */
function symbolValueOf(global, this, NewTarget, strict, args) {
  /* 1. Let s be the this value. */
  s := this;
  /* 2. If Type(s) is Symbol, return s. */
  if (Type(s) == "Symbol")
    return s;
  /* 3. If Type(s) is not Object, throw a TypeError exception. */
  if (Type(s) != "Object")
    throw TypeErrorConstructorInternal();
  /* 4. If s does not have a [[SymbolData]] internal slot, throw a TypeError exception. */
  if (!("SymbolData" in_obj s))
    throw TypeErrorConstructorInternal();
  /* 5. Return the value of s’s [[SymbolData]] internal slot. */
  return s.SymbolData;
}

function thisSymbolValue(value) {
  /* 1. If Type(value) is Symbol, return value. */
  if (Type(value) == "Symbol")
    return value;
  /* 2. If Type(value) is Object and value has a [[SymbolData]] internal slot, then */
  if (Type(value) == "Object" &&& "SymbolData" in_obj value) {
    /* 2a. Let s be value.[[SymbolData]]. */
    s := value.SymbolData;
    /* 2b. Assert: Type(s) is Symbol. */
    assert (Type(s) == "Symbol");
    /* 2c. Return s. */
    return s;
  }
  /* 3. Throw a TypeError exception. */
  throw TypeErrorConstructorInternal();
}

function getSymbolDescriptionAccessorProperty(global, this, NewTarget, strict, args) {
  /* 1. Let s be the this value. */
  s := this;
  /* 2. Let sym be ? thisSymbolValue(s). */
  sym := thisSymbolValue(s);
  /* 3. Return sym.[[Description]]. */
  return sym.Description;
}


function getSpeciesPropertyName() {
  return getWellKnownSymbol("Symbol.species");
}

function getIteratorPropertyName() {
  return getWellKnownSymbol("Symbol.iterator");
}

function getToStringTagPropertyName() {
  return getWellKnownSymbol("Symbol.toStringTag");
}

function getMatchPropertyName() {
  return getWellKnownSymbol("Symbol.match");
}

function getReplacePropertyName() {
  return getWellKnownSymbol("Symbol.replace");
}

function getSearchPropertyName() {
  return getWellKnownSymbol("Symbol.search");
}

function getSplitPropertyName() {
  return getWellKnownSymbol("Symbol.split");
}

function getToPrimitivePropertyName() {
  return getWellKnownSymbol("Symbol.toPrimitive");
}

function getUnscopablesPropertyName() {
  return getWellKnownSymbol("Symbol.unscopables");
}

function getIsConcatSpreadablePropertyName () {
  return getWellKnownSymbol("Symbol.isConcatSpreadable");
}

function getHasInstancePropertyName() {
  return getWellKnownSymbol("Symbol.hasInstance");
}

function filterSymbolProperties(list) {
  newList := [];
  len := l_len(list);
  i := 0;
  while (i < len) {
    elem := l_nth (list, i);
    if (!(checkSymbolProperties(elem)))
      newList := l_add (newList, elem);
    i := i + 1;
  }
  return newList;
}

function checkSymbolProperties(property) {
  if (s_len_u(property) < 7)
    return false;
  res := s_substr_u (property, 0, 7);
  return (res == "Symbol(");
}
