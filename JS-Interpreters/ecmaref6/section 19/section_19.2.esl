/* 15.3 Function Objects */

/* 15.3.2 The Function Constructor */
function initFunctionConstructor(FunctionPrototype, globalObject, strict) {
  /* When Function is called as part of a new expression, it is a constructor: it initialises the newly created object. */
  /* The Function constructor is itself a Function object andits [[Class]] is "Function". The value of the
     [[Prototype]] internal property of the Function constructor is the standard built-in Function prototype object
     (15.3.4). */
  /* The value of the [[Extensible]] internal property of the Function constructor is true. */
  FunctionConstructor := CreateGeneralBuiltInFunction(FunctionPrototype, [], "FunctionConstructor", globalObject, strict, null);

  /* 15.3.3.1 Function.prototype */
  /* The initial value of Function.prototype is the standard built-in Function prototype object (15.3.4). */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(FunctionConstructor, "prototype", FunctionPrototype, false, false, false);

  setInternalProperty(FunctionConstructor, "Call", "BuiltInCall");

  return FunctionConstructor
};

/* 15.3.3 Properties of the Function Constructor */
function fillFunctionConstructor(FunctionConstructor, globalObject, strict) {
  /* 15.3.3 Properties of the Function Constructor */
  /* The Function constructor has the following properties: */

  /* 15.3.3.2 Function.length */
  /* This is a data property with a value of 1. This property has the attributes { [[Writable]]: false, [[Enumerable]]:
     false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(FunctionConstructor, "length", 1., false, false, true);

  return
};

/* The Function prototype object is itself a Function object (its [[Class]] is "Function") that, when invoked,
   accepts any arguments and returns undefined. */
function functionPrototypeFunction(globalObject, this, NewTarget, strict, params) {
  return 'undefined
};

/* 15.3.4 Function Prototype Object */
function initFunctionPrototype(objectPrototype, globalObject, strict) {
  /* The Function prototype object is itself a Function object (its [[Class]] is "Function") that, when invoked,
     accepts any arguments and returns undefined. */
  functionPrototypeObject := CreateGeneralBuiltInFunction(objectPrototype, [], "functionPrototypeFunction", globalObject, strict, null);
  /* The value of the [[Prototype]] internal property of the Function prototype object is the standard built-in Object
     prototype object (15.2.4). The initial value of the [[Extensible]] internal property of the Function prototype
     object is true.*/
  /* The Function prototype object does not have a valueOf property of its own; however, it inherits the valueOf
     property from the Object prototype Object. */
  delete functionPrototypeObject.Construct;
  /* The length property of the Function prototype object is 0. */

  return functionPrototypeObject
};

/* 15.3.4 Properties of the Function Prototype Object */
function fillFunctionPrototype(functionPrototypeObject, FunctionConstructor, globalObject, strict) {
  /* 19.2.3 The value of the length property of the Function prototype object is 0. */
  createBuiltInPropertyWithFullDescriptor(functionPrototypeObject, "length", 0., false, false, true);

  /* 19.2.3 The value of the name property of the Function prototype object is the empty String. */
  createBuiltInPropertyWithFullDescriptor(functionPrototypeObject, "name", "", false, false, true);

  /* 15.3.4.1 Function.prototype.constructor */
  /* The initial value of Function.prototype.constructor is the built-in Function constructor. */
  createBuiltInProperty(functionPrototypeObject, "constructor", FunctionConstructor);

  /* 15.3.4.2 Function.prototype.toString ( ) */
  toString := CreateBuiltInFunctionObject([], "FunctionPrototypeToString", globalObject, strict, null);
  createBuiltInProperty(functionPrototypeObject, "toString", toString);

  /* 15.3.4.3 Function.prototype.apply (thisArg, argArray) */
  apply := CreateBuiltInFunctionObject(["thisArg", "argArray"], "FunctionPrototypeApply", globalObject, strict, null);
  createBuiltInProperty(functionPrototypeObject, "apply", apply);

  /* 15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, ... ] ] ) */
  call := CreateBuiltInFunctionObject(["thisArg"], "FunctionPrototypeCall", globalObject, strict, null);
  createBuiltInProperty(functionPrototypeObject, "call", call);

  /* 15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, ...]]) */
  bind := CreateBuiltInFunctionObject(["thisArg"], "FunctionPrototypeBind", globalObject, strict, null);
  createBuiltInProperty(functionPrototypeObject, "bind", bind);

  return
};

/* 15.3.2.1 new Function (p1, p2, ... , pn, body) */
function FunctionConstructor(globalObject, this, NewTarget, strict, params) {
  /* The last argument specifies the body (executable code) of a function; any preceding arguments specify formal
     parameters. */

  /* When the Function constructor is called with some arguments p1, p2, ... , pn, body (where n might be 0, that
     is, there are no "p" arguments, and where body might also not be provided), the following steps are taken: */

  /* 1. Let argCount be the total number of arguments passed to this function invocation. */
  argCount := l_len params;
  /* 2. Let P be the empty String. */
  P := "";
  /* 3. If argCount = 0, let body be the empty String. */

  if (argCount = 0) {
    body := ""
  } else {
  /* 4. Else if argCount = 1, let body be that argument. */
    if (argCount = 1) {
      body := l_nth(params, 0)
    }
    /* 5. Else, argCount > 1 */
    else {
      /* a. Let firstArg be the first argument. */
      firstArg := l_nth(params, 0);

      /* b. Let P be ToString(firstArg). */
      P := ToString(firstArg);

      @ReturnIfAbrupt(P);

      /* c. Let k be 2. */
      k := 2;
      /* d. Repeat, while k < argCount */
      while(k < argCount) {
        /* i. Let nextArg be the k‘th argument. */
        nextArg := l_nth(params, k - 1);
        /* ii. Let P be the result of concatenating the previous value of P, the String "," (a comma), and
               ToString(nextArg). */
        nextArgToString := ToString(nextArg);

        @ReturnIfAbrupt(nextArgToString);

        P := s_concat [P, ",", nextArgToString];
        /* iii. Increase k by 1. */
        k := k + 1
      };
      /* e. Let body be the k‘th argument. */
      body := l_nth(params, k - 1)
    }
  };

  if (extern is_symbolic(body)) {
    extern is_eval_sat(body);
    extern abort(body)
  };

  /* 6. Let body be ToString(body). */
  body := ToString(body);

  @ReturnIfAbrupt(body);

  body := parseBody(P, body, strict);
  P := parseParams(P);

  /* 7. If P is not parsable as a FormalParameterList opt then throw a SyntaxError exception. */
  if (!isParsableAsFormalParametersList(P)) { /* TODO */
    throw SyntaxErrorConstructorInternal()
  };
  /* 8. If body is not parsable as FunctionBody then throw a SyntaxError exception. */
  if (!isParsableAsFunctionBody(body)) {
    throw SyntaxErrorConstructorInternal()
  };
  /* 9. If body is strict mode code (see 10.1.1) then let strict be true, else let strict be false. */
  if (isBuiltInFunctionBodyStrictModeCode(body)) {
    strict := true
  } else {
    strict := false
  };

  /* 10. If strict is true, throw any exceptions specified in 13.1 that apply. */
  if ((strict = true) &&& anyStrictModeRestrictionApplicable(body)) {
    throw SyntaxErrorConstructorInternal()
  };

  F := FunctionAllocate(getFunctionPrototype(strict), strict, "normal");

  realmF := F.Realm;
  scope := realmF.globalEnv;

  FunctionInitialize(F, "normal", P, body, scope);
  MakeConstructor(F, null, null);
  SetFunctionName(F, "anonymous", null);


  return F
  /* A prototype property is automatically created for every function, to provide for the possibility that the
     function will be used as a constructor. */

  /* NOTE It is permissible but not necessary to have one argument for each formal parameter to be specified. For
          example, all three of the following expressions produce the same result: */

  /*                new Function("a", "b", "c", "return a+b+c")                    */
  /*                new Function("a, b, c", "return a+b+c")                        */
  /*                new Function("a,b", "c", "return a+b+c")                       */
};

/* 15.3.4.2 Function.prototype.toString ( ) */
function FunctionPrototypeToString(globalObject, this, NewTarget, strict, params) {
  /* An implementation-dependent representation of the function is returned. This representation has the syntax of
     a FunctionDeclaration. Note in particular that the use and placement of white space, line terminators, and
     semicolons within the representation String is implementation-dependent. */
  /* The toString function is not generic; it throws a TypeError exception if its this value is not a Function
     object. Therefore, it cannot be transferred to other kinds of objects for use as a method. */
  if (!isFunctionObject(this)) {
    throw TypeErrorConstructorInternal()
  };
  return "function () {}"
  /* TODO section_15.3_implementation_dependent */
};

/* 15.3.4.3 Function.prototype.apply (thisArg, argArray) */
function FunctionPrototypeApply(globalObject, func, NewTarget, strict, params) {
  thisArg := l_nth(params, 0);
  argArray := l_nth(params, 1);
  /* When the apply method is called on an object func with arguments thisArg and argArray, the following steps
   are taken: */

  /* 1. If IsCallable(func) is false, then throw a TypeError exception. */
  if (IsCallable(func) = false) {
    throw TypeErrorConstructorInternal()
  };
  /* 2. If argArray is null or undefined, then */
  if ((argArray = 'null) ||| (argArray = 'undefined)) {
    /* a. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value
          and an empty list of arguments. */
    return {func.Call}(null, null, func, thisArg, 'undefined, [])
  };
  /* 3. Let argList be CreateListFromArrayLike(argArray). */
  argList := CreateListFromArrayLike(argArray, null);
  /* 4. ReturnIfAbrupt(argList). */
  @ReturnIfAbrupt(argList);
  /*5. Perform PrepareForTailCall(). */
  /* TODO */
  /* 6. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and
        argList as the list of arguments. */
  return {func.Call}(null, null, func, thisArg, 'undefined, argList)

  /* The length property of the apply method is 2. */

  /* NOTE The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a
          undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is
          passed as the this value. */
};

/* 15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, ... ] ] ) */
function FunctionPrototypeCall(globalObject, func, NewTarget, strict, params) {
  thisArg := l_nth(params, 0);
  args := tl params;
  /* When the call method is called on an object func with argument thisArg and optional arguments arg1, arg2
     etc, the following steps are taken: */

  /* 1. If IsCallable(func) is false, then throw a TypeError exception. */
  if (IsCallable(func) = false) {
    throw TypeErrorConstructorInternal()
  };
  /* 2. Let argList be an empty List. */
  argList := [];
  /* 3. If this method was called with more than one argument then in left to right order starting with arg1 append
        each argument as the last element of argList */
  if (!(args = [])) {
    argList := args
  };
  /* 4. Return the result of calling the [[Call]] internal method of func, providing thisArg as the this value and
        argList as the list of arguments. */
  return {func.Call}(globalObject, null, func, thisArg, NewTarget, argList)

  /* The length property of the call method is 1. */

  /* NOTE The thisArg value is passed without modification as the this value. This is a change from Edition 3, where a
          undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is
          passed as the this value. */
};

/* 15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, ...]]) */
function FunctionPrototypeBind(globalObject, this, NewTarget, strict, params) {
  thisArg := l_nth(params, 0);
  args := tl params;
  /* The bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc, and returns a new
     function object by performing the following steps: */

  /* 1. Let Target be the this value. */
  Target := this;
  /* 2. If IsCallable(Target) is false, throw a TypeError exception. */
  if (IsCallable(Target) = false) {
    throw TypeErrorConstructorInternal()
  };
  /* 3. Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg (arg1, arg2
        etc), in order. */
  A := args;
  /* 4. Let F be a new native ECMAScript object . */
  F := NewECMAScriptObject();
  /* 5. Set all the internal methods, except for [[Get]], of F as specified in 8.12. */
  setAllInternalMethodsExceptGet(F);
  /* 6. Set the [[Get]] internal property of F as specified in 15.3.5.4. */
  F.Get := "OrdinaryObjectGet";
  /* 7. Set the [[TargetFunction]] internal property of F to Target. */
  F.TargetFunction := Target;
  /* 8. Set the [[BoundThis]] internal property of F to the value of thisArg. */
  F.BoundThis := thisArg;
  /* 9. Set the [[BoundArgs]] internal property of F to A. */
  F.BoundArgs := A;
  /* 10. Set the [[Class]] internal property of F to "Function". */
  F.Class := "Function";
  /* 11. Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified in
         15.3.3.1. */
  F.Prototype := getFunctionPrototype(strict);
  /* 12. Set the [[Call]] internal property of F as described in 15.3.4.5.1. */
  F.Call := "CallBind";
  /* 13. Set the [[Construct]] internal property of F as described in 15.3.4.5.2. */
  F.Construct := "ConstructBind";
  /* 14. Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3. */
  F.HasInstance := "HasInstanceBind";
  /* 15. If the [[Class]] internal property of Target is "Function", then */
  if (getInternalProperty(Target, "Class") = "Function") {
    /* a. Let L be the length property of Target minus the length of A. */
    L := getDescriptorValue(getJSProperty(Target, "length")) - (int_to_float (l_len A));
    /* b. Set the length own property of F to either 0 or L, whichever is larger. */
    if (L > 0.) {
      setJSProperty(F, "length", newDataPropertyDescriptorFull(L, false, false, false));
      setInternalProperty(F, "internalLength", L)
    } else {
      setJSProperty(F, "length", newDataPropertyDescriptorFull(0., false, false, false));
      setInternalProperty(F, "internalLength", 0.)
    }
  }
  /* 16. Else set the length own property of F to 0. */
  else {
    setJSProperty(F, "length", newDataPropertyDescriptorFull(0., false, false, false));
    setInternalProperty(F, "internalLength", 0.)
  };
  /* 17. Set the attributes of the length own property of F to the values specified in 15.3.5.1. */

  /* 18. Set the [[Extensible]] internal property of F to true. */
  F.Extensible := true;

  /* 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3). */
  thrower := topExecStack().Realm.intrinsics.ThrowTypeError;

  /* 20. Call the [[DefineOwnProperty]] internal method of F with arguments "caller", PropertyDescriptor
        {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false. */
  {F.DefineOwnProperty}(F, "caller", {
    Get: thrower,
    Set: thrower,
    Enumerable: false,
    Configurable: false
  });
  /* 21. Call the [[DefineOwnProperty]] internal method of F with arguments "arguments", PropertyDescriptor
        {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}, and false. */
  {F.DefineOwnProperty}(F, "arguments", {
    Get: thrower,
    Set: thrower,
    Enumerable: false,
    Configurable: false
  });
  /* 22. Return F. */
  return F

  /* The length property of the bind method is 1. */

  /* NOTE Function objects created using Function.prototype.bind do not have a prototype property or the
          [[Code]], [[FormalParameters]], and [[Scope]] internal properties. */
};

/* 15.3.4.5.1 [[Call]] */
function CallBind(externalScope, ref, F, this, NewTarget, ExtraArgs) {
  /* When the [[Call]] internal method of a function object, F, which was created using the bind function is called
     with a this value and a list of arguments ExtraArgs, the following steps are taken: */

  /* 1. Let boundArgs be the value of F’s [[BoundArgs]] internal property. */
  boundArgs := F.BoundArgs;
  /* 2. Let boundThis be the value of F’s [[BoundThis]] internal property. */
  boundThis := F.BoundThis;
  /* 3. Let target be the value of F’s [[TargetFunction]] internal property. */
  target := F.TargetFunction;
  /* 4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the
        same values as the list ExtraArgs in the same order. */
  args := l_concat(boundArgs, ExtraArgs);
  /* 5. Return the result of calling the [[Call]] internal method of target providing boundThis as the this value and
        providing args as the arguments. */
  return {target.Call}(externalScope, ref, target, boundThis, NewTarget, args)
};

/* 15.3.4.5.2 [[Construct]] */
function ConstructBind(externalScope, ref, F, ExtraArgs, newTarget) {
  /* When the [[Construct]] internal method of a function object, F that was created using the bind function is called
     with a list of arguments ExtraArgs, the following steps are taken: */

  /* 1. Let target be the value of F’s [[TargetFunction]] internal property. */
  target := F.TargetFunction;
  /* 2. If target has no [[Construct]] internal method, a TypeError exception is thrown. */
  if (!("Construct" in_obj target)) {
    throw TypeErrorConstructorInternal()
  };
  /* 3. Let boundArgs be the value of F’s [[BoundArgs]] internal property. */
  boundArgs := F.BoundArgs;
  /* 4. Let args be a new list containing the same values as the list boundArgs in the same order followed by the
        same values as the list ExtraArgs in the same order. */
  args := l_concat(boundArgs, ExtraArgs);
  /* 5. Return the result of calling the [[Construct]] internal method of target providing args as the arguments. */
  return {target.Construct}(externalScope, ref, target, args, newTarget)
};

/* 15.3.4.5.3 [[HasInstance]] (V) */
function HasInstanceBind(F, V) {
  /* When the [[HasInstance]] internal method of a function object F, that was created using the bind function is
    called with argument V, the following steps are taken: */

  /* 1. Let target be the value of F’s [[TargetFunction]] internal property. */
  target := F.TargetFunction;
  /* 2. If target has no [[HasInstance]] internal method, a TypeError exception is thrown. */
  if (!("HasInstance" in_obj target)) {
    throw TypeErrorConstructorInternal()
  };
  /* 3. Return the result of calling the [[HasInstance]] internal method of target providing V as the argument. */
  return {target.HasInstance}(target, V)
};


/* 15.3.5 Properties of Function Instances */
/* In addition to the required internal properties, every function instance has a [[Call]] internal property and in
   most cases uses a different version of the [[Get]] internal property. Depending on how they are created (see
   8.6.2, 13.2, 15, and 15.3.4.5), function instances may have a [[HasInstance]] internal property, a [[Scope]]
   internal property, a [[Construct]] internal property, a [[FormalParameters]] internal property, a [[Code]] internal
   property, a [[TargetFunction]] internal property, a [[BoundThis]] internal property, and a [[BoundArgs]] internal
   property.
/* The value of the [[Class]] internal property is "Function". */
/* Function instances that correspond to strict mode functions (13.2) and function instances created using the
   Function.prototype.bind method (15.3.4.5) have properties named "caller" and "arguments" that throw a
   TypeError exception. An ECMAScript implementation must not associate any implementation specific
   behaviour with accesses of these properties from strict mode function code. */

/* Auxiliary functions */

function getFunctionPrototype(strict) {
  /* refObj := newPropertyReference(|global|, "Function", strict);
  FunctionObject := GetValue(refObj);

  refObjProto := newPropertyReference(FunctionObject, "prototype", strict);
  functionObjectProto := GetValue(refObjProto); */

  return |Intrinsics|["FunctionPrototype"]
};

function isFunctionObject(object) {
  if ((Type(object) = "Object") &&& (getInternalProperty(object, "Class") = "Function")) {
    return true
  };

  return false
};

function isParsableAsFormalParametersList(str) {
  /* TODO */
  return true
};

function isParsableAsFunctionBody(bodyObj) {
  return ("type" in_obj bodyObj) &&& !(bodyObj.type = "EarlySyntaxError")
};

function isBuiltInFunctionBodyStrictModeCode(bodyObj) {
  return ("strict" in_obj bodyObj) &&& (bodyObj.strict)
};

function anyStrictModeRestrictionApplicable(bodyObj) {
  return ("type" in_obj bodyObj) &&& (bodyObj.type = "EarlySyntaxError")
};

function parseParams(paramsStr) {
  if (s_len paramsStr = 0) {
    return []
  };
  params := s_split(paramsStr, ",");

  /* Remove leading and trailing spaces */
  lparams := l_len params;
  i := 0;
  ret := [];
  while(i < lparams) {
    param := l_nth(params, i);
    ret := l_add(ret, trim param);
    i := i + 1
  };

  return ret
};

function parseBody(params, bodyStr, strict) {
  /* Wrap bodyStr in a function to avoid parsing errors in statements like return that is invalid outside of a function body */
  bodyStr := s_concat ["function f(", params, ") {", bodyStr, "}"];
  buildAST := extern parseJS(bodyStr);
  bodyObj := {buildAST}();

  if (bodyObj.type = "Program") {
    programBody := l_nth(bodyObj.functionDeclarations, 0);
    /* Access the body of the function we wrapped around the bodyStr */
    return programBody.body
  };
  /* else we have an EarlySyntaxError */
  return bodyObj
}
