
/*19.5 Error Objects

Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects
may also serve as base objects for user-defined exception classes.
*/
function initErrorObject(globalObject, ObjectPrototype, strict) {
  errorPrototype := initErrorPrototype(ObjectPrototype, globalObject, strict);
  errorConstructor := initErrorConstructor(errorPrototype, globalObject, strict);

  /* 19.5.3.1 Error.prototype.constructor */
  descriptor := newDataPropertyDescriptorFull(errorConstructor, true, false, true);
  setJSProperty(errorPrototype, "constructor", descriptor);

  return errorConstructor
};

/*
19.5.1 The Error Constructor
The Error constructor is the %Error% intrinsic object and the initial value of the Error property of
the global object. When Error is called as a function rather than as a constructor, it creates and
initializes a new Error object. Thus the function call Error(…) is equivalent to the object creation
expression new Error(…) with the same arguments.

The Error constructor is designed to be subclassable. It may be used as the value of an extends
clause of a class definition. Subclass constructors that intend to inherit the specified Error
behaviour must include a super call to the Error constructor to create and initialize
subclass instances with a [[ErrorData]] internal slot.
*/
function initErrorConstructor(ErrorPrototype, globalObject, strict) {
   /*
 19.5.2 Properties of the Error Constructor
 
 The value of the [[Prototype]] internal slot of the Error constructor is the intrinsic object %FunctionPrototype% (19.2.3).
 
 Besides the length property (whose value is 1), the Error constructor has the following properties:
 */
  ErrorConstructor := CreateGeneralBuiltInFunction(getFunctionPrototype(strict), ["message"], "ErrorConstructor", globalObject, strict, null);
 
  setJSProperty(ErrorConstructor, "length", newDataPropertyDescriptorFull(1., false, false, true));
  setInternalProperty(ErrorConstructor, "ErrorData", 'undefined);

  /*19.5.2.1 Error.prototype
  The initial value of Error.prototype is the intrinsic object %ErrorPrototype% (19.5.3).
  This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(ErrorConstructor, "prototype", ErrorPrototype, false, false, false);

  return ErrorConstructor
};


function initErrorPrototype(ObjectPrototype, global, strict) {
  errorPrototypeObject := NewECMAScriptObjectFull(ObjectPrototype, "Object", true);
  setAllInternalMethodsOfOrdinaryObject(errorPrototypeObject);

  /* 19.5.3.2 Error.prototype.message */
  setJSProperty(errorPrototypeObject, "message", newDataPropertyDescriptorFull("", true, false, true));  

  /* 19.5.3.3 Error.prototype.name */
  setJSProperty(errorPrototypeObject, "name", newDataPropertyDescriptorFull("Error", true, false, true));

  /* 19.5.3.4 Error.prototype.toString ( ) */
  toStringFunctionObject := CreateBuiltInFunctionObject([], "ErrorToString", global, strict, null);
  descriptor := newDataPropertyDescriptorFull(toStringFunctionObject, true, false, true);
  setJSProperty(errorPrototypeObject, "toString", descriptor);
  setJSProperty(toStringFunctionObject, "length", newDataPropertyDescriptorFull(0., false, false, true));
  setJSProperty(toStringFunctionObject, "name", newDataPropertyDescriptorFull("toString", false, false, true));

  return errorPrototypeObject
};


/*19.5.1.1 Error ( message )

When the Error function is called with argument message the following steps are taken:*/
function ErrorConstructor(globalObject, this, NewTarget, strict, params) {
	message := l_nth(params, 0);

    /*If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.*/
    if ( NewTarget = 'undefined ) {
    	/* checkar se vai ter Function */
    	newTarget := topExecStack().Function
    }
    else {
    	newTarget := NewTarget
    };

    /*Let O be OrdinaryCreateFromConstructor(newTarget, "%ErrorPrototype%", «[[ErrorData]]»).*/
    O := OrdinaryCreateFromConstructor(newTarget, "ErrorPrototype", ["ErrorData"]);

    /*ReturnIfAbrupt(O).*/
    @ReturnIfAbrupt(O);

    /*If message is not undefined, then*/
    if ( !(message = 'undefined) ) {
        /*Let msg be ToString(message).*/
        msg := ToString(message);

        /*ReturnIfAbrupt(msg).*/
        @ReturnIfAbrupt(msg);

        /*Let msgDesc be the PropertyDescriptor{[[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.*/
        msgDesc := newDataPropertyDescriptorFull(msg, true, false, true);

        /*Let status be DefinePropertyOrThrow(O, "message", msgDesc).*/
        status := DefinePropertyOrThrow(O, "message", msgDesc);

        /*Assert: status is not an abrupt completion.*/
        assert( !isAnAbruptCompletion(status) )
    };

    /*Return O.*/
    return O
};


/* 
19.5.3.4 Error.prototype.toString ( )

The following steps are taken:
*/
function ErrorToString(globalObject, this, NewTarget, strict, params) {
    /*Let O be the this value.*/
    O := this;

    /*If Type(O) is not Object, throw a TypeError exception.*/
    if ( !(Type(O) = "Object") ) {
        throw TypeErrorConstructorInternal()
    };

    /*Let name be Get(O, "name").*/
    name := Get(O, "name");

    /*ReturnIfAbrupt(name).*/
    @ReturnIfAbrupt(name);

    /*If name is undefined, let name be "Error"; otherwise let name be ToString(name).*/
    if ( name = 'undefined ) {
        name := "Error"
    }
    else {
        name := ToString(name)
    };

    /*ReturnIfAbrupt(name).*/
    @ReturnIfAbrupt(name);

    /*Let msg be Get(O, "message").*/
    msg := Get(O, "message");

    /*ReturnIfAbrupt(msg).*/
    @ReturnIfAbrupt(msg);

    /*If msg is undefined, let msg be the empty String; otherwise let msg be ToString(msg).*/
     if ( msg = 'undefined ) {
        msg := ""
    }
    else {
        msg := ToString(msg)
    };

    /*ReturnIfAbrupt(msg).*/
    @ReturnIfAbrupt(msg);

    /*If name is the empty String, return msg.*/
    if ( name = "" ) {
        return msg
    };

    /*If msg is the empty String, return name.*/
    if ( msg = "" ) {
        return name
    };

    /*Return the result of concatenating name, the code unit 0x003A (COLON), the code unit 0x0020 (SPACE), and msg.*/
    return s_concat([name, ": ", msg])
};

/*
19.5.5 Native Error Types Used in This Standard

A new instance of one of the NativeError objects below is thrown when a runtime error is
detected. All of these objects share the same structure, as described in 19.5.6.
*/

/* 
19.5.5.1 EvalError

This exception is not currently used within this specification. This object remains
for compatibility with previous editions of this specification.
*/
function initEvalErrorObject(globalObject, ErrorPrototype, strict) {
  return initNativeErrorObject(ErrorPrototype, "EvalError", "EvalErrorConstructor", globalObject, strict)
};

function EvalErrorConstructor(globalObject, this, NewTarget, strict, params) {
  message := l_nth(params, 0);

  return NativeErrorConstructor(message, "EvalError", NewTarget)
};
function EvalErrorConstructorInternal() {
  return NativeErrorConstructor('undefined, "EvalError", |Intrinsics|["EvalError"])
};

/*
19.5.5.2 RangeError

Indicates a value that is not in the set or range of allowable values.
*/
function initRangeErrorObject(globalObject, ErrorPrototype, strict) {
  return initNativeErrorObject(ErrorPrototype, "RangeError", "RangeErrorConstructor", globalObject, strict)
};
function RangeErrorConstructor(globalObject, this, NewTarget, strict, params) {
  message := l_nth(params, 0);

  return NativeErrorConstructor(message, "RangeError", NewTarget)
};
function RangeErrorConstructorInternal() {
  return NativeErrorConstructor('undefined, "RangeError", |Intrinsics|["RangeError"])
};

/*
19.5.5.3 ReferenceError

Indicate that an invalid reference value has been detected.
*/
function initReferenceErrorObject(globalObject, ErrorPrototype, strict) {
  return initNativeErrorObject(ErrorPrototype, "ReferenceError", "ReferenceErrorConstructor", globalObject, strict)
};
function ReferenceErrorConstructor(globalObject, this, NewTarget, strict, params) {
  message := l_nth(params, 0);

  return NativeErrorConstructor(message, "ReferenceError", NewTarget)
};
function ReferenceErrorConstructorInternal() {
  return NativeErrorConstructor('undefined, "ReferenceError", |Intrinsics|["ReferenceError"])
};

/*
19.5.5.4 SyntaxError

Indicates that a parsing error has occurred.
*/
function initSyntaxErrorObject(globalObject, ErrorPrototype, strict) {
  return initNativeErrorObject(ErrorPrototype, "SyntaxError", "SyntaxErrorConstructor", globalObject, strict)
};
function SyntaxErrorConstructor(globalObject, this, NewTarget, strict, params) {
  message := l_nth(params, 0);

  return NativeErrorConstructor(message, "SyntaxError", NewTarget)
};
function SyntaxErrorConstructorInternal() {
  return NativeErrorConstructor('undefined, "SyntaxError", |Intrinsics|["SyntaxError"])
};

function getSyntaxErrorConstructor() {
  return |Intrinsics|["SyntaxError"] 
};

/*
19.5.5.5 TypeError

Indicates the actual type of an operand is different than the expected type.
*/
function initTypeErrorObject(globalObject, ErrorPrototype, strict) {
  return initNativeErrorObject(ErrorPrototype, "TypeError", "TypeErrorConstructor", globalObject, strict)
};
function TypeErrorConstructor(globalObject, this, NewTarget, strict, params) {
  message := l_nth(params, 0);

  return NativeErrorConstructor(message, "TypeError", NewTarget)
};
function TypeErrorConstructorInternal() {
  return NativeErrorConstructor('undefined, "TypeError", |Intrinsics|["TypeError"])
};

/*
19.5.5.6 URIError

Indicates that one of the global URI handling functions was used in a way that is incompatible with
its definition.
*/
function initURIErrorObject(globalObject, ErrorPrototype, strict) {
  return initNativeErrorObject(ErrorPrototype, "URIError", "URIErrorConstructor", globalObject, strict)
};
function URIErrorConstructor(globalObject, this, NewTarget, strict, params) {
  message := l_nth(params, 0);

  return NativeErrorConstructor(message, "URIError", NewTarget)
};
function URIErrorConstructorInternal() {
  return NativeErrorConstructor('undefined, "URIError", |Intrinsics|["URIError"])
};

/*
19.5.6 NativeError Object Structure

When an ECMAScript implementation detects a runtime error, it throws a new instance of one of
the NativeError objects defined in 19.5.5. Each of these objects has the structure described below,
differing only in the name used as the constructor name instead of NativeError, in the name
property of the prototype object, and in the implementation-defined message property of the
prototype object.

For each error object, references to NativeError in the definition should be replaced with the
appropriate error object name from 19.5.5.
*/
function initNativeErrorObject(ErrorPrototype, nativeErrorName, constructorFunction, globalObject, strict) {
  nativeErrorPrototype := initNativeErrorPrototype(ErrorPrototype, nativeErrorName);
  nativeErrorConstructor := initNativeErrorConstructor(nativeErrorPrototype, nativeErrorName,
    constructorFunction, globalObject, strict);

  descriptor := newDataPropertyDescriptorFull(nativeErrorConstructor, true, false, true);
  setJSProperty(nativeErrorPrototype, "constructor", descriptor);

  return nativeErrorConstructor
};

/*
19.5.6.1 NativeError Constructors

When a NativeError constructor is called as a function rather than as a constructor, it creates and
initializes a new NativeError object. A call of the object as a function is equivalent to calling it as a
constructor with the same arguments. Thus the function call NativeError(…) is equivalent to the
object creation expression new NativeError(…) with the same arguments.

Each NativeError constructor is designed to be subclassable. It may be used as the value of an
extends clause of a class definition. Subclass constructors that intend to inherit the specified
NativeError behaviour must include a super call to the NativeError constructor to create and
initialize subclass instances with a [[ErrorData]] internal slot.
*/
function initNativeErrorConstructor(NativeErrorPrototype, nativeErrorName, constructorFunction, globalObject, strict) {
  /*
  19.5.6.2 Properties of the NativeError Constructors
  
  The value of the [[Prototype]] internal slot of a NativeError constructor is the intrinsic object %Error% (19.5.1).
  Besides the length property (whose value is 1), each NativeError constructor has the following properties:
  */
  NativeErrorConstructor := CreateGeneralBuiltInFunction(getErrorPrototype(false), ["message"], constructorFunction, globalObject, strict, null);

  /*
  19.5.6.2.1 NativeError.prototype
  
  The initial value of NativeError.prototype is a NativeError prototype object (19.5.6.3). Each
  NativeError constructor has a distinct prototype object.
  
  This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.
  */
  createBuiltInPropertyWithFullDescriptor(NativeErrorConstructor, "prototype", NativeErrorPrototype, false, false, false);

  createBuiltInProperty(NativeErrorConstructor, "name", nativeErrorName);
  setInternalProperty(NativeErrorConstructor, "Call", "BuiltInCall");
  setInternalProperty(NativeErrorConstructor, "Realm", globalObject);
  setInternalProperty(NativeErrorConstructor, "ErrorData", 'undefined);

  return NativeErrorConstructor
};

/*
19.5.6.3 Properties of the NativeError Prototype Objects

Each NativeError prototype object is an ordinary object. It is not an Error instance and does not
have an [[ErrorData]] internal slot.

The value of the [[Prototype]] internal slot of each NativeError prototype object is the intrinsic
object %ErrorPrototype% (19.5.3).
*/
function initNativeErrorPrototype(errorPrototypeObject, nativeErrorName) {
  nativeErrorPrototypeObject := NewECMAScriptObjectFull(errorPrototypeObject, "Object", true);
  setAllInternalMethodsOfOrdinaryObject(nativeErrorPrototypeObject);

  /* 19.5.6.3.2 NativeError.prototype.message */
  setJSProperty(nativeErrorPrototypeObject, "message", newDataPropertyDescriptorFull("", true, false, true));

  /* 19.5.6.3.3 NativeError.prototype.name */
  setJSProperty(nativeErrorPrototypeObject, "name", newDataPropertyDescriptorFull(nativeErrorName, true, false, true));

  return nativeErrorPrototypeObject
};

/* 
19.5.6.1.1 NativeError ( message )

When a NativeError function is called with argument message the following steps are taken:
*/
function NativeErrorConstructor(message, nativeErrorName, NewTarget) {
    
    /*If NewTarget is undefined, let newTarget be the active function object, else let newTarget be NewTarget.*/
    if ( NewTarget = 'undefined ) {
        newTarget := topExecStack().Function
    }
    else {
        newTarget := NewTarget
    };

    /*Let O be OrdinaryCreateFromConstructor(newTarget, "%NativeErrorPrototype%", «[[ErrorData]]» ).*/
    O := OrdinaryCreateFromConstructor(newTarget, nativeErrorName, ["ErrorData"]);

    /*ReturnIfAbrupt(O).*/
    @ReturnIfAbrupt(O);

    /*If message is not undefined, then*/
    if ( !(message = 'undefined) ) {
        /*Let msg be ToString(message).*/
        msg := ToString(message);

        /*Let msgDesc be the PropertyDescriptor{[[Value]]: msg, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.*/
        msgDesc := newDataPropertyDescriptorFull(msg, true, false, true);

        /*Let status be DefinePropertyOrThrow(O, "message", msgDesc).*/
        status := DefinePropertyOrThrow(O, "message", msgDesc);

        /*Assert: status is not an abrupt completion.*/
        assert( !isAnAbruptCompletion(status) )
    };

    /*Return O.*/
    return O

    /*
     The actual value of the string passed in step 2 is either "%EvalErrorPrototype%",
     "%RangeErrorPrototype%", "%ReferenceErrorPrototype%", "%SyntaxErrorPrototype%",
     "%TypeErrorPrototype%", or "%URIErrorPrototype%" corresponding to which NativeError
     constructor is being defined.
    */
};

/*
19.5.6.4 Properties of NativeError Instances

NativeError instances are ordinary objects that inherit properties from their NativeError
prototype object and have an [[ErrorData]] internal slot whose value is undefined. The only
specified use of [[ErrorData]] is by Object.prototype.toString (19.1.3.6) to identify Error or
NativeError instances.
*/

function getErrorPrototype(strict) {
  return |Intrinsics|["ErrorPrototype"]
};

function getNativeErrorPrototype(strict, nativeErrorName) {
  return |Intrinsics|[s_concat [nativeErrorName,"Prototype"]]
}
