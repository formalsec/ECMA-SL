/* Copyright (C) 2022-2025 formalsec programmers
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* Auxiliary functions created for the purposes of accessing the values of the triple that form the reference type. */
/* The functions are those that are not explicitly specified in the standard */
function newValueReference(base, referencedName, strict) {
  /* return ["R", "V", base, referencedName, strict]; */
  return {
    __reference__: true,
    type: "V",
    base: base,
    refName: referencedName,
    strict: strict
  };
}

function newPropertyReference(base, referencedName, strict) {
  /* return ["R", "P", base, referencedName, strict]; */
  return {
    __reference__: true,
    type: "P",
    base: base,
    refName: referencedName,
    strict: strict
  };
}


/* Returns the base value component of the reference V. */
function GetBase(V) {
  return V.base;
}

/* Returns the referenced name component of the reference V. */
function GetReferencedName(V) {
  return V.refName;
}

/* Returns the strict reference component of the reference V. */
function IsStrictReference(V) {
  return V.strict;
}

/* Returns true if the base value is a Boolean, String, or Number. */
function HasPrimitiveBase(V) {
  if (Type(GetBase(V)) == "Boolean" || Type(GetBase(V)) == "String" || Type(GetBase(V)) == "Number")
    return true;
  else
    return false;
}

/* Returns true if either the base value is an object or HasPrimitiveBase(V) is true; otherwise returns false. */
function IsPropertyReference(V) {
  return (typeof V == "object") && ("__reference__" in_obj V) && (V.type == "P");
}

/* Returns true if the base value is undefined and false otherwise. */
function IsUnresolvableReference (V) {
  if (Type(GetBase(V)) == "Undefined")
    return true;
  else
    return false;
}

function GetValue(V) {
  /* 1. If Type(V) is not Reference, return V. */
  if (Type(V) != "Reference")
    return V;
  /* 2. Let base be the result of calling GetBase(V). */
  base := GetBase(V);
  /* 3. If IsUnresolvableReference(V), throw a ReferenceError exception. */
  if (IsUnresolvableReference(V))
    throw ReferenceErrorConstructorInternal();
  /* 4. If IsPropertyReference(V), then */
  if (IsPropertyReference(V)) {
    /* a. If HasPrimitiveBase(V) is false, then let get be the [[Get]] internal method of base,
          otherwise let get be the special [[Get]] internal method defined below. */
    if (HasPrimitiveBase(V) == false)
      get := base["Get"];
    else
      get := "Get_internal";
    /* b. Return the result of calling the get internal method using base as its this value,
          and passing GetReferencedName(V) for the argument. */
    return {get}(base, GetReferencedName(V));
  /* 5. Else, base must be an environment record. */
  } else {
    /* a. Return the result of calling the GetBindingValue (see 10.2.1) concrete method of base
          passing GetReferencedName(V) and IsStrictReference(V) as arguments. */
    return GetBindingValue(base, GetReferencedName(V), IsStrictReference(V));
  }
}

function PutValue(V, W) {
  /* 1. If Type(V) is not Reference, throw a ReferenceError exception. */
  if (Type(V) != "Reference")
    throw ReferenceErrorConstructorInternal();
  /* 2. Let base be the result of calling GetBase(V). */
  base := GetBase(V);
  /* 3. If IsUnresolvableReference(V), then */
  if (IsUnresolvableReference(V)) {
    /* a. If IsStrictReference(V) is true, then */
    if (IsStrictReference(V))
      /* i. Throw ReferenceError exception. */
      throw ReferenceErrorConstructorInternal();
    /* b. Call the [[Put]] internal method of the global object, passing GetReferencedName(V) for the property name,
          W for the value, and false for the Throw flag. */
    Put(|global|, GetReferencedName(V), W, false);
  /* 4. Else if IsPropertyReference(V), then */
  } else if (IsPropertyReference(V)) {
    /* a. If HasPrimitiveBase(V) is false, then let put be the [[Put]] internal method of base,
          otherwise let put be the special [[Put]] internal method defined below. */
    if (HasPrimitiveBase(V) == false)
      put := base["Put"];
    else
      put := "Put_internal";
    /* b. Call the put internal method using base as its this value, and passing GetReferencedName(V) for the property name,
          W for the value, and IsStrictReference(V) for the Throw flag. */
    {put}(base, GetReferencedName(V), W, IsStrictReference(V));
  /* 5. Else base must be a reference whose base is an environment record. So, */
  } else {
    /* a. Call the SetMutableBinding (10.2.1) concrete method of base, passing GetReferencedName(V), W, and IsStrictReference(V) as arguments. */
    SetMutableBinding(base, GetReferencedName(V), W, IsStrictReference(V));
  }
  /* 6. Return. */
  return;
}

function Get_internal(base, P) {
  /* The following [[Get]] internal method is used by GetValue when V is a property reference with a primitive base
     value. It is called using base as its this value and with property P as its argument. The following steps are
     taken: */
  /* 1. Let O be ToObject(base). */
  O := ToObject(base);
  /* 2. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P. */
  desc := {O.GetProperty}(O, P);
  /* 3. If desc is undefined, return undefined. */
  if (desc == 'undefined)
    return 'undefined;
  /* 4. If IsDataDescriptor(desc) is true, return desc.[[Value]]. */
  if (IsDataPropertyDescriptor(desc) == true)
    return desc.Value;
  /* 5. Otherwise, IsAccessorDescriptor(desc) must be true so, let getter be desc.[[Get]] (see 8.10). */
  getter := desc.Get;
  /* 6. If getter is undefined, return undefined. */
  if (getter == 'undefined)
    return 'undefined;
  /* 7. Return the result calling the [[Call]] internal method of getter providing base as the this value and providing
        no arguments. */
  return {getter.Call}(null, null, getter, base, []);
  /* NOTE The object that may be created in step 1 is not accessible outside of the above method. An implementation
          might choose to avoid the actual creation of the object. The only situation where such an actual property access that uses
          this internal method can have visible effect is when it invokes an accessor function. */
}

function Put_internal(base, P, W, Throw) {
  /* The following [[Put]] internal method is used by PutValue when V is a property reference with a primitive base
     value. It is called using base as its this value and with property P, value W, and Boolean flag Throw as
     arguments. The following steps are taken: */
  /* 1. Let O be ToObject(base). */
  O := ToObject(base);
  /* 2. If the result of calling the [[CanPut]] internal method of O with argument P is false, then */
  if ({O.CanPut}(O, P) == false) {
    /* a. If Throw is true, then throw a TypeError exception. */
    if (Throw == true) throw TypeErrorConstructorInternal();
    /* b. Else return. */
    else return;
  }
  /* 3. Let ownDesc be the result of calling the [[GetOwnProperty]] internal method of O with argument P. */
  ownDesc := {O.GetOwnProperty}(O, P);
  /* 4. If IsDataDescriptor(ownDesc) is true, then */
  if (IsDataPropertyDescriptor(ownDesc) == true) {
    /* a. If Throw is true, then throw a TypeError exception. */
    if (Throw == true) throw TypeErrorConstructorInternal();
    /* b. Else return. */
    else return;
  }
  /* 5. Let desc be the result of calling the [[GetProperty]] internal method of O with argument P. This may be
        either an own or inherited accessor property descriptor or an inherited data property descriptor. */
  desc := {O.GetProperty}(O, P);
  /* 6. If IsAccessorDescriptor(desc) is true, then */
  if (IsAccessorPropertyDescriptor(desc) == true) {
    /* a. Let setter be desc.[[Set]] (see 8.10) which cannot be undefined. */
    setter := desc.Set;
    /* b. Call the [[Call]] internal method of setter providing base as the this value and an argument list containing only W. */
    {setter.Call}(null, null, setter, base, [W]);
  /* 7. Else, this is a request to create an own property on the transient object O */
  } else {
    /* a. If Throw is true, then throw a TypeError exception. */
    if (Throw == true) throw TypeErrorConstructorInternal();
  }
  /* 8. Return. */
  return;
  /* NOTE The object that may be created in step 1 is not accessible outside of the above method. An implementation
          might choose to avoid the actual creation of that transient object. The only situations where such an actual property
          assignment that uses this internal method can have visible effect are when it either invokes an accessor function or is in
          violation of a Throw predicated error check. When Throw is true any property assignment that would create a new property
          on the transient object throws an error. */
}
