function NewObject () {
  return {
    JSProperties: { },
    Prototype: 'null,
    Extensible: true,
    Class: "Object",
    Put: "Put",
    Get: "Get"
  };
}

/**
 * 8.10 The Property Descriptor and Property Identifier Specification Types
 *
 * The Property Descriptor type is used to explain the manipulation and reification of named property attributes.
 * Values of the Property Descriptor type are records composed of named fields where each field’s name is an attribute name and
 * its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.
 *
 * Property Descriptor values may be further classified as data property descriptors and accessor property descriptors based
 * upon the existence or use of certain fields. A data property descriptor is one that includes any fields named
 * either [[Value]] or [[Writable]]. An accessor property descriptor is one that includes any fields named
 * either [[Get]] or [[Set]]. Any property descriptor may have fields named [[Enumerable]] and [[Configurable]].
 *
 * A Property Descriptor value may not be both a data property descriptor and an accessor property descriptor;
 * however, it may be neither. A generic property descriptor is a Property Descriptor value that is neither a data property descriptor
 * nor an accessor property descriptor. A fully populated property descriptor is one that is either an accessor property descriptor
 * or a data property descriptor and that has all of the fields that correspond to the property attributes defined in either 8.6.1 Table 5 or Table 6.
 *
 * For notational convenience within this specification, an object literal-like syntax can be used to define a property descriptor value.
 * For example, Property Descriptor {[[Value]]: 42, [[Writable]]: false, [[Configurable]]: true} defines a data property descriptor.
 *
 * Field name order is not significant. Any fields that are not explicitly listed are considered to be absent.
 * In specification text and algorithms, dot notation may be used to refer to a specific field of a Property Descriptor.
 * For example, if D is a property descriptor then D.[[Value]] is shorthand for “the field of D named [[Value]]”.
 *
 * The Property Identifier type is used to associate a property name with a Property Descriptor.
 * Values of the Property Identifier type are pairs of the form (name, descriptor), where name is a String and descriptor is a Property Descriptor value.
 * The following abstract operations are used in this specification to operate upon Property Descriptor values:
 */

/* Auxiliary functions created for the purposes of creating instances of the Property Descriptor type. */
function NewPropertyDescriptor() {
  return {};
}

function newDataPropertyDescriptor(value) {
  desc := NewPropertyDescriptor();
  desc.Value := value;
  desc.Writable := true;
  desc.Enumerable := true;
  desc.Configurable := true;
  return desc;
}

function newDataPropertyDescriptorFull(value, writable, enumerable, configurable) {
  desc := NewPropertyDescriptor();
  desc.Value := value;
  if (writable != null)
    desc.Writable := writable;
  if (enumerable != null)
    desc.Enumerable := enumerable;
  if (configurable != null)
    desc.Configurable := configurable;
  return desc;
}

function newAccessorPropertyDescriptorFull(get, set, enumerable, configurable) {
  desc := NewPropertyDescriptor();
  desc.Get := get;
  desc.Set := set;
  if (enumerable != null)
    desc.Enumerable := enumerable;
  if (configurable != null)
    desc.Configurable := configurable;
  return desc;
}

function newGetAccessorPropertyDescriptor(get) {
  desc := NewPropertyDescriptor();
  desc.Get := get;
  desc.Enumerable := true;
  desc.Configurable := true;
  return desc;
}

function newGetAccessorPropertyDescriptorFull(get, enumerable, configurable) {
  desc := NewPropertyDescriptor();
  desc.Get := get;
  desc.Enumerable := enumerable;
  desc.Configurable := configurable;
  return desc;
}

function newSetAccessorPropertyDescriptor(set) {
  desc := NewPropertyDescriptor();
  desc.Set := set;
  desc.Enumerable := true;
  desc.Configurable := true;
  return desc;
}

function isEnumerablePropertyDescriptor(desc) {
  assert Type(desc) == "PropertyDescriptor";
  return desc.Enumerable;
}

function getDescriptorValue(desc) {
  return desc.Value;
}

/* Auxiliary functions created for the purposes of dealing with the Property Identifier type. */
function newPropertyIdentifier(name, desc) {
  return ["P", name, desc];
}

function getPropertyName(propertyIdentifier) {
  return l_nth(propertyIdentifier, 1);
}

function getPropertyDescriptor(propertyIdentifier) {
  return l_nth(propertyIdentifier, 2);
}


/**
 * 8.10.1 IsAccessorDescriptor ( Desc )
 *
 * When the abstract operation IsAccessorPropertyDescriptor is called with property descriptor Desc, the following steps are taken:
 */
function IsAccessorPropertyDescriptor (Desc) {
  /** 1. If Desc is undefined, then return false. */
  if (Desc == 'undefined)
    return false;
  /** 2. If both Desc.[[Get]] and Desc.[[Set]] are absent, then return false. */
  if (!("Get" in_obj Desc) && !("Set" in_obj Desc))
    return false;
  /** 3. Return true. */
  return true;
}

/**
 * 8.10.2 IsDataDescriptor ( Desc )
 *
 * When the abstract operation IsDataDescriptor is called with property descriptor Desc, the following steps are taken:
 */
function IsDataPropertyDescriptor (Desc) {
  /** 1. If Desc is undefined, then return false. */
  if (Desc == 'undefined)
    return false;
  /** 2. If both Desc.[[Value]] and Desc.[[Writable]] are absent, then return false. */
  if (!("Value" in_obj Desc) && !("Writable" in_obj Desc))
    return false;
  /** 3. Return true. */
  return true;
}

/**
 * 8.10.3 IsGenericDescriptor ( Desc )
 *
 * When the abstract operation IsGenericDescriptor is called with property descriptor Desc, the following steps are taken:
 */
function IsGenericPropertyDescriptor (Desc) {
  /** 1. If Desc is undefined, then return false. */
  if (Desc == 'undefined)
    return false;
  /** 2. If IsAccessorDescriptor(Desc) and IsDataDescriptor(Desc) are both false, then return true. */
  if ((IsAccessorPropertyDescriptor(Desc) == false) && (IsDataPropertyDescriptor(Desc) == false))
    return true;
  /** 3. Return false. */
  return false;
}

/**
 * 8.10.4 FromPropertyDescriptor ( Desc )
 *
 * When the abstract operation FromPropertyDescriptor is called with property descriptor Desc, the following steps are taken:
 *
 * The following algorithm assumes that Desc is a fully populated Property Descriptor, such as that returned from [[GetOwnProperty]] (see 8.12.1).
 */
function FromPropertyDescriptor (Desc) {
  /** 1. If Desc is undefined, then return undefined. */
  if (Desc == 'undefined)
    return 'undefined;
  /** 2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the standard built-in constructor with that name. */
  obj := ObjectConstructor(|global|, 'null, false, [null]);
  /** 3. If IsDataDescriptor(Desc) is true, then: */
  if (IsDataPropertyDescriptor(Desc) == true) {
    /** a. Call the [[DefineOwnProperty]] internal method of obj with arguments "value",
     *  Property Descriptor {[[Value]]: Desc.[[Value]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false. */
    {obj.DefineOwnProperty}(obj, "value", newDataPropertyDescriptor(Desc.Value), false);
    /** b. Call the [[DefineOwnProperty]] internal method of obj with arguments "writable",
     *  Property Descriptor {[[Value]]: Desc.[[Writable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false. */
    {obj.DefineOwnProperty}(obj, "writable", newDataPropertyDescriptor(Desc.Writable), false);
  }
  /** 4. Else, IsAccessorDescriptor(Desc) must be true, so: */
  else {
    /** a. Call the [[DefineOwnProperty]] internal method of obj with arguments "get",
     *  Property Descriptor {[[Value]]: Desc.[[Get]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false. */
    {obj.DefineOwnProperty}(obj, "get", newDataPropertyDescriptor(Desc.Get), false);
    /** b. Call the [[DefineOwnProperty]] internal method of obj with arguments "set",
     *  Property Descriptor {[[Value]]: Desc.[[Set]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false. */
    {obj.DefineOwnProperty}(obj, "set", newDataPropertyDescriptor(Desc.Set), false);
  }

  /** 5. Call the [[DefineOwnProperty]] internal method of obj with arguments "enumerable",
   *  Property Descriptor {[[Value]]: Desc.[[Enumerable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false. */
  {obj.DefineOwnProperty}(obj, "enumerable", newDataPropertyDescriptor(Desc.Enumerable), false);
  /** 6. Call the [[DefineOwnProperty]] internal method of obj with arguments "configurable",
   *    Property Descriptor {[[Value]]: Desc.[[Configurable]], [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false. */
  {obj.DefineOwnProperty}(obj, "configurable", newDataPropertyDescriptor(Desc.Configurable), false);
   /** 7. Return obj. */
   return obj;
}

/**
 * 8.10.5 ToPropertyDescriptor ( Obj )
 *
 * When the abstract operation ToPropertyDescriptor is called with object Obj, the following steps are taken:
 */
function ToPropertyDescriptor (Obj) {
  /** 1. If Type(Obj) is not Object throw a TypeError exception. */
  if (Type(Obj) != "Object")
    throw TypeErrorConstructorInternal();
  /** 2. Let desc be the result of creating a new Property Descriptor that initially has no fields. */
  desc := NewPropertyDescriptor();
  /** 3. If the result of calling the [[HasProperty]] internal method of Obj with argument "enumerable" is true, then: */
  if ({Obj.HasProperty}(Obj, "enumerable") == true) {
    /** a. Let enum be the result of calling the [[Get]] internal method of Obj with "enumerable". */
    enum := {Obj.Get}(Obj, "enumerable");
    /** b. Set the [[Enumerable]] field of desc to ToBoolean(enum). */
    desc.Enumerable := ToBoolean(enum);
  }

  /** 4. If the result of calling the [[HasProperty]] internal method of Obj with argument "configurable" is true, then: */
  if ({Obj.HasProperty}(Obj, "configurable") == true) {
    /** a. Let conf be the result of calling the [[Get]] internal method of Obj with argument "configurable". */
    conf := {Obj.Get}(Obj, "configurable");
    /** b. Set the [[Configurable]] field of desc to ToBoolean(conf). */
    desc.Configurable := ToBoolean(conf);
  }

  /** 5. If the result of calling the [[HasProperty]] internal method of Obj with argument "value" is true, then: */
  if ({Obj.HasProperty}(Obj, "value") == true) {
    /** a. Let value be the result of calling the [[Get]] internal method of Obj with argument “value”. */
    value := {Obj.Get}(Obj, "value");
    /** b. Set the [[Value]] field of desc to value. */
    desc.Value := value;
  }

  /** 6. If the result of calling the [[HasProperty]] internal method of Obj with argument "writable" is true, then: */
  if ({Obj.HasProperty}(Obj, "writable") == true) {
    /** a. Let writable be the result of calling the [[Get]] internal method of Obj with argument "writable". */
    writable := {Obj.Get}(Obj, "writable");
    /** b. Set the [[Writable]] field of desc to ToBoolean(writable). */
    desc.Writable := ToBoolean(writable);
  }

  /** 7. If the result of calling the [[HasProperty]] internal method of Obj with argument "get" is true, then: */
  if ({Obj.HasProperty}(Obj, "get") == true) {
    /** a. Let getter be the result of calling the [[Get]] internal method of Obj with argument "get". */
    getter := {Obj.Get}(Obj, "get");
    /** b. If IsCallable(getter) is false and getter is not undefined, then throw a TypeError exception. */
    if ((IsCallable(getter) == false) &&& (getter != 'undefined))
      throw TypeErrorConstructorInternal();
    /** c. Set the [[Get]] field of desc to getter. */
    desc.Get := getter;
  }

  /** 8. If the result of calling the [[HasProperty]] internal method of Obj with argument "set" is true, then: */
  if ({Obj.HasProperty}(Obj, "set") == true) {
    /** a. Let setter be the result of calling the [[Get]] internal method of Obj with argument "set". */
    setter := {Obj.Get}(Obj, "set");
    /** b. If IsCallable(setter) is false and setter is not undefined, then throw a TypeError exception. */
    if ((IsCallable(setter) == false) &&& (setter != 'undefined))
      throw TypeErrorConstructorInternal();
    /** c. Set the [[Set]] field of desc to setter. */
    desc.Set := setter;
  }

  /** 9. If either desc.[[Get]] or desc.[[Set]] are present, then: */
  if (("Get" in_obj desc) ||| ("Set" in_obj desc)) {
    /** a. If either desc.[[Value]] or desc.[[Writable]] are present, then throw a TypeError exception. */
    if (("Value" in_obj desc) ||| ("Writable" in_obj desc))
      throw TypeErrorConstructorInternal();
  }

  /** 10. Return desc. */
  return desc;
}

/*
function CopyDescriptor(Desc) {

  if (IsDataPropertyDescriptor(Desc)) {
    newDesc := newDataPropertyDescriptorFull(Desc.Value, Desc.Writable, Desc.Enumerable, Desc.Configurable);
    return newDesc
  }

  throw "Incomplete CopyDescriptor - TODO")
}
*/

function CopyDescriptor(Desc) {
  newDesc := {};
  i := 0;
  list := obj_fields Desc;
  llist := l_len(list);
  while (i < llist) {
    P := l_nth (list, i);
    newDesc[P] := Desc[P];
    i := i + 1;
  }
  return newDesc;
}
