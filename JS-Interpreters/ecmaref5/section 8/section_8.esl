/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* 8 Types */

/* Algorithms within this specification manipulate values each of which has an associated type. The possible
value types are exactly those defined in this clause. Types are further subclassified into ECMAScript language
types and specification types. */

/* An ECMAScript language type corresponds to values that are directly manipulated by an ECMAScript
programmer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean,
String, Number, and Object. */

/* A specification type corresponds to meta-values that are used within algorithms to describe the semantics of
ECMAScript language constructs and ECMAScript language types. The specification types are Reference,
List, Completion, Property Descriptor, Property Identifier, Lexical Environment, and Environment Record.
Specification type values are specification artefacts that do not necessarily correspond to any specific entity
within an ECMAScript implementation. Specification type values may be used to describe intermediate results
of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of
ECMAScript language variables. */

/* Within this specification, the notation ―Type(x)‖ is used as shorthand for ―the type of x‖ where ―type‖ refers to the
ECMAScript language and specification types defined in this clause. */

function Type(V) {
  v_type := typeof (V);
  if (v_type == "int")     return "Number";
  if (v_type == "float")   return "Number";
  if (v_type == "bool")    return "Boolean";
  if (v_type == "string")  return "String";
  if (v_type == "object") {
    if (isCompletion(V))          return "Completion";
    if (isReference(V))           return "Reference";
    if (isPropertyIdentifier(V))  return "PropertyIdentifier";
    if (isCompletion(V))          return "Completion";
    if (isJavaScriptObject(V))    return "Object";
    if (isPropertyDescriptor(V))  return "PropertyDescriptor";
    return "EnvironmentRecord";
  }
  if (v_type == "list") return "List";
  if (v_type == "symbol") {
    if (V == 'null)        return "Null";
    if (V == 'undefined)   return "Undefined";
  }
  /* if (v_type == "list") {
    ft := hd V;
    if (ft == "R") { return "Reference" }
    if (ft == "C") { return "Completion" }
    if (ft == "P") { return "PropertyIdentifier" }
  } */

  assert false;
}

/* Auxiliary functions */
function isCompletion(obj) {
  return "__completion__" in_obj obj;
}

function isReference(obj) {
  return "__reference__" in_obj obj;
}

function isPropertyIdentifier(obj) {
  return "__prop_id__" in_obj obj;
}

function isJavaScriptObject(obj) {
  return "Prototype" in_obj obj;
}

function isPropertyDescriptor(obj) {
  return ("Enumerable" in_obj obj) || ("Configurable" in_obj obj);
}

function setConfigurability(obj, prop, b) {
  desc := obj.JSProperties[prop];
  desc.Configurable := b;
  return b;
}
