/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/** 8.9 The Completion Specification Type
    The Completion type is used to explain the behaviour of statements (break, continue, return and throw)
    that perform nonlocal transfers of control. Values of the Completion type are triples of the
    form (type, value, target), where type is one of normal, break, continue, return, or throw, value is any
    ECMAScript language value or empty, and target is any ECMAScript identifier or empty.
    If cv is a completion value then cv.type, cv.value, and cv.target may be used to directly refer to its constituent values.

    The term "abrupt completion" refers to any completion with a type other than normal.
*/
function isAnAbruptCompletion (completion) {
  return getCompletionType(completion) != 'normal;
}

/* Auxiliary functions created for the purposes of accessing the values of the triple that form the completion type. */
function isErrorCompletion(completion) {
  if (Type(completion) == "Completion")
    return (getCompletionType(completion) == 'throw);
  return false;
}
function getCompletionType(completion) {
  return completion.type;
}
function getCompletionValue(completion) {
  return completion.value;
}
function getCompletionTarget(completion) {
  return completion.target;
}

function newCompletion(type, value, target) {
  return {
    __completion__ : true,
    type: type,
    value: value,
    target: target
  };
}
function normalEmptyCompletion(V) {
  return newCompletion('normal, V, 'empty);
}
/* This auxiliary is function is used to accomplish the following convention defined in 5.2 Algorithm Conventions:
    If an algorithm is defined to "throw an exception", execution of the algorithm is terminated and no result is
    returned. The calling algorithms are also terminated, until an algorithm step is reached that explicitly deals
    with the exception, using terminology such as "If an exception was thrown...". Once such an algorithm step
    has been encountered the exception is no longer considered to have occurred. */
function throwEmptyCompletion(V) {
  return newCompletion('throw, V, 'empty);
}

function isCompletionRecord(record) {
  return Type(record) == "Completion";
}
