function GetProps(Desc) {
  list := [];
  if ("Value" in_obj Desc)          list := l_add(list, "Value");
  if ("Writable" in_obj Desc)       list := l_add(list, "Writable");
  if ("Get" in_obj Desc)            list := l_add(list, "Get");
  if ("Set" in_obj Desc)            list := l_add(list, "Set");
  if ("Enumerable" in_obj Desc)     list := l_add(list, "Enumerable");
  if ("Configurable" in_obj Desc)   list := l_add(list, "Configurable");
  return list;
}

/** See 8.12.9_5 */
function EveryFieldIsAbsent(Desc) {
  list := GetProps(Desc);
  return (l_len(list) == 0);
}

/** See 8.12.9_6 */
function everyFieldInDescAlsoOccursInCurrent(Desc, current) {
  lst := GetProps(Desc);
  b := true;
  while (b && lst != []) {
    prop := hd lst;
    b := (prop in_obj current) && SameValue(Desc[prop], current[prop]);
    if (!b)
      return false;
    lst := tl lst;
  }
  return true;
}

/* See 8.12.9_9.b.i */
function convertDataPropertyDescToAccessorPropertyDesc(O, P) {
  /* Convert the property named P of object O from a data property to an accessor property.
     Preserve the existing values of the converted property’s [[Configurable]] and [[Enumerable]] attributes and
     set the rest of the property’s attributes to their default values. */
  delete (O.JSProperties)[P].Value;
  delete (O.JSProperties)[P].Writable;
  (O.JSProperties)[P].Set := 'undefined;
  (O.JSProperties)[P].Get := 'undefined;
  return;
}
/* 8.12.9_9.b.ii */
function convertAccessorPropertyDescToDataPropertyDesc(O, P) {
  /* Convert the property named P of object O from an accessor property to a data property.
     Preserve the existing values of the converted property’s [[Configurable]] and [[Enumerable]] attributes and
     set the rest of the property’s attributes to their default values. */
  delete (O.JSProperties)[P].Set;
  delete (O.JSProperties)[P].Get;
  (O.JSProperties)[P].Value := 'undefined;
  (O.JSProperties)[P].Writable := false;
  return;
}

/**
 * The values used here are based on Table 7 of the specification.
 */
function GetValueOrDefault(propDesc, propName) {
  objectDefaultAttributeValues := {
    Value       : 'undefined,
    Get         : 'undefined,
    Set         : 'undefined,
    Writable    : false,
    Enumerable  : false,
    Configurable: false
  };
  if (propName in_obj propDesc)
    return propDesc[propName];
  else
    return objectDefaultAttributeValues[propName];
}

/** See 8.12.9_4.b.i */
function createOwnAccessorProperty(O, P, Desc) {
  setJSProperty(O, P, newAccessorPropertyDescriptorFull(
    GetValueOrDefault(Desc, "Get"),
    GetValueOrDefault(Desc, "Set"),
    GetValueOrDefault(Desc, "Enumerable"),
    GetValueOrDefault(Desc, "Configurable")
  ));
  return;
}
/** See 8.12.9_4.a.i */
function createOwnDataProperty(O, P, Desc) {
  setJSProperty(O, P, newDataPropertyDescriptorFull(
    GetValueOrDefault(Desc, "Value"),
    GetValueOrDefault(Desc, "Writable"),
    GetValueOrDefault(Desc, "Enumerable"),
    GetValueOrDefault(Desc, "Configurable")
  ));
  return;
}

/* See 8.12.9_12 */
function setCorrespondinglyNamedAttributes(O, P, Desc) {
  if ("Value" in_obj Desc)
    (O.JSProperties)[P].Value := Desc.Value;
  if ("Writable" in_obj Desc)
    (O.JSProperties)[P].Writable := Desc.Writable;
  if ("Set" in_obj Desc)
    (O.JSProperties)[P].Set := Desc.Set;
  if ("Get" in_obj Desc)
    (O.JSProperties)[P].Get := Desc.Get;
  if ("Enumerable" in_obj Desc)
    (O.JSProperties)[P].Enumerable := Desc.Enumerable;
  if ("Configurable" in_obj Desc)
    (O.JSProperties)[P].Configurable := Desc.Configurable;
  return;
}
/** See 8.12.9 */
macro Reject(Throw) {
  if (Throw)
    throw TypeErrorConstructorInternal();
  else
    return false;
}

/**
 * 8.12 Algorithms for Object Internal Methods
 *
 * In the following algorithm descriptions, assume O is a native ECMAScript object, P is a String, Desc is a Property Description record, and Throw is a Boolean flag.
 */
function GetOwnProperty(O, P) {
  /* 1. If O doesn‘t have an own property with name P, return undefined. */
  if (!(P in_obj O.JSProperties))
    return 'undefined;
  /* 2. Let D be a newly created Property Descriptor with no fields. */
  D := NewPropertyDescriptor();
  /* 3. Let X be O‘s own property named P. */
  X := getJSProperty(O, P);
  
  /* 4. If X is a data property, then */
  if (IsDataPropertyDescriptor(X)) {
    /* a. Set D.[[Value]] to the value of X‘s [[Value]] attribute. */
    D.Value := X.Value;
    /* b. Set D.[[Writable]] to the value of X‘s [[Writable]] attribute */
    D.Writable := X.Writable;

  /* 5. Else X is an accessor property, so */
  } else {
    /* a. Set D.[[Get]] to the value of X‘s [[Get]] attribute. */
    D.Get := X.Get;
    /* b. Set D.[[Set]] to the value of X‘s [[Set]] attribute. */
    D.Set := X.Set;
  }

  /* 6. Set D.[[Enumerable]] to the value of X‘s [[Enumerable]] attribute. */
  D.Enumerable := X.Enumerable;
  /* 7. Set D.[[Configurable]] to the value of X‘s [[Configurable]] attribute. */
  D.Configurable := X.Configurable;
  /* 8. Return D. */
  return D;

  /* However, if O is a String object it has a more elaborate [[GetOwnProperty]] internal method defined in 15.5.5.2. */
}

/**
 * 8.12.2 [[GetProperty]] (P)
 *
 * When the [[GetProperty]] internal method of O is called with property name P, the following steps are taken:
 */
function GetProperty (O, P) {
  /** 1. Let prop be the result of calling the [[GetOwnProperty]] internal method of O with property name P. */
  prop := {O.GetOwnProperty}(O, P);
  /** 2. If prop is not undefined, return prop. */
  if (prop != 'undefined)
    return prop;
  /** 3. Let proto be the value of the [[Prototype]] internal property of O. */
  proto := getInternalProperty(O, "Prototype");
  /** 4. If proto is null, return undefined. */
  if (proto == 'null)
    return 'undefined;
  /** 5. Return the result of calling the [[GetProperty]] internal method of proto with argument P. */
  return {proto.GetProperty}(proto, P);
}

/**
 * 8.12.3 [[Get]] (P)
 *
 * When the [[Get]] internal method of O is called with property name P, the following steps are taken:
 */
function Get(O, P) {
  /** 1. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P. */
  desc := {O.GetProperty}(O, P);
  /** 2. If desc is undefined, return undefined. */
  if (desc == 'undefined)
    return 'undefined;
  /** 3. If IsDataDescriptor(desc) is true, return desc.[[Value]]. */
  if (IsDataPropertyDescriptor(desc) == true)
    return desc.Value;
  /** 4. Otherwise, IsAccessorDescriptor(desc) must be true so, let getter be desc.[[Get]]. */
  getter := desc.Get;
  /** 5. If getter is undefined, return undefined. */
  if (getter == 'undefined)
    return 'undefined;
  /** 6. Return the result calling the [[Call]] internal method of getter providing O as the this value and providing no arguments. */
  return {getter.Call}(null, null, getter, O, []);
}

/**
 * 8.12.4 [[CanPut]] (P)
 *
 * When the [[CanPut]] internal method of O is called with property name P, the following steps are taken:
 */
function CanPut(O, P) {
  /** 1. Let desc be the result of calling the[[GetOwnProperty]] internal method of O with argument P. */
  desc := {O.GetOwnProperty}(O, P);
  /** 2. If desc is not undefined, then: */
  if (desc != 'undefined) {
    /** a. If IsAccessorDescriptor(desc) is true, then: */
    if (IsAccessorPropertyDescriptor(desc) == true) {
      /** i. If desc.[[Set]] is undefined, then return false. */
      if (desc.Set == 'undefined)
        return false;
      /** ii. Else return true. */
      else
        return true;
    }
    /** b. Else, desc must be a DataDescriptor so return the value of desc.[[Writable]]. */
    else {
      return desc.Writable;
    }
  }
  /** 3. Let proto be the [[Prototype]] internal property of O. */
  proto := O.Prototype;
  /** 4. If proto is null, then return the value of the [[Extensible]] internal property of O. */
  if (proto == 'null)
    return O.Extensible;
  /** 5. Let inherited be the result of calling the [[GetProperty]] internal method of proto with property name P. */
  inherited := {proto.GetProperty}(proto, P);
  /** 6. If inherited is undefined, return the value of the [[Extensible]] internal property of O. */
  if (inherited == 'undefined)
    return O.Extensible;

  /** 7. If IsAccessorDescriptor(inherited) is true, then */
  if (IsAccessorPropertyDescriptor(inherited) == true) {
    /** a. If inherited.[[Set]] is undefined, then return false. */
    if (inherited.Set == 'undefined)
      return false;
    /** b. Else return true. */
    else
      return true;
  }

  /** 8. Else, inherited must be a DataDescriptor */
  else {
    /** a. If the [[Extensible]] internal property of O is false, return false. */
    if (O.Extensible == false)
      return false;
    /** b. Else return the value of inherited.[[Writable]]. */
    else
      return inherited.Writable;
  }
  /** Host objects may define additional constraints upon [[Put]] operations.
   *  If possible, host objects should not allow [[Put]] operations in situations where this definition of [[CanPut]] returns false. */
}

/**
 * 8.12.5 [[Put]] ( P, V, Throw )
 *
 * When the [[Put]] internal method of O is called with property P, value V, and Boolean flag Throw, the following steps are taken:
 */
function Put(O, P, V, Throw) {
  /** 1. If the result of calling the [[CanPut]] internal method of O with argument P is false, then: */
  if ({O.CanPut}(O, P) == false) {
    /** a. If Throw is true, then throw a TypeError exception. */
    if (Throw == true)
      throw TypeErrorConstructorInternal();
    /** b. Else return. */
    else
      return;
  }

  /** 2. Let ownDesc be the result of calling the [[GetOwnProperty]] internal method of O with argument P. */
  ownDesc := {O.GetOwnProperty}(O, P);
  /** 3. If IsDataDescriptor(ownDesc) is true, then: */
  if (IsDataPropertyDescriptor(ownDesc) == true) {
    /** a. Let valueDesc be the Property Descriptor {[[Value]]: V}. */
    valueDesc := newDataPropertyDescriptorFull(V, null, null, null);
    /** b. Call the [[DefineOwnProperty]] internal method of O passing P, valueDesc, and Throw as arguments. */
    {O.DefineOwnProperty}(O, P, valueDesc, Throw);
    /** c. Return. */
    return;
  }

  /** 4. Let desc be the result of calling the [[GetProperty]] internal method of O with argument P.
   *     This may be either an own or inherited accessor property descriptor or an inherited data property descriptor. */
  desc := {O.GetProperty}(O, P);

  /** 5. If IsAccessorDescriptor(desc) is true, then: */
  if (IsAccessorPropertyDescriptor(desc) == true) {
    /** a. Let setter be desc.[[Set]] which cannot be undefined. */
    setter := desc.Set;
    /** b. Call the [[Call]] internal method of setter providing O as the this value and providing V as the sole argument. */
    {setter.Call}(null, null, setter, O, [V]);
  
  /** 6. Else, create a named data property named P on object O as follows */
  } else {
    /** a. Let newDesc be the Property Descriptor {[[Value]]: V, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}. */
    newDesc := newDataPropertyDescriptor(V);
    /** b. Call the [[DefineOwnProperty]] internal method of O passing P, newDesc, and Throw as arguments. */
    {O.DefineOwnProperty}(O, P, newDesc, Throw);
  }

  /** 7. Return. */
  return;
}

/**
 * 8.12.6 [[HasProperty]] (P)
 *
 * When the [[HasProperty]] internal method of O is called with property name P, the following steps are taken:
 */
function HasProperty(O, P) {
  /** 1. Let desc be the result of calling the [[GetProperty]] internal method of O with property name P. */
  desc := {O.GetProperty}(O, P);
  /** 2. If desc is undefined, then return false. */
  if (desc == 'undefined)
    return false;
  /** 3. Else return true. */
  else
    return true;
}

/**
 * 8.12.7 [[Delete]] (P, Throw)
 *
 * When the [[Delete]] internal method of O is called with property name P and the Boolean flag Throw, the following steps are taken:
 */
function Delete(O, P, Throw) {
  /** 1. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with property name P. */
  desc := {O.GetOwnProperty}(O, P);
  /** 2. If desc is undefined, then return true. */
  if (desc == 'undefined)
    return true;

  /** 3. If desc.[[Configurable]] is true, then */
  if (desc.Configurable == true) {
    /** a. Remove the own property with name P from O. */
    delete (O.JSProperties)[P];
    /* ES6 property order temporary fix for JSON.stringify */
    newInternalSlotsList := [];
    len := l_len(O).internalSlotsList;
    i := 0;
    while (i < len) {
      P2 := l_nth(O.internalSlotsList, i);
      if (P2 != P) {
        newInternalSlotsList := l_add(newInternalSlotsList, P2);
      }
      i := i + 1;
    }
    O.internalSlotsList := newInternalSlotsList;
    /** b. Return true. */
    return true;

  /** 4. Else if Throw, then throw a TypeError exception. */
  } else {
    if (Throw)
      throw TypeErrorConstructorInternal();
  }

  /** 5. Return false. */
  return false;
}

/**
 * 8.12.8 [[DefaultValue]] (hint)
 */
function DefaultValue (O, hint) {
  if (hint == null)
    if (getInternalProperty(O, "Class") == "Date") hint := 'String; else hint := 'Number;
  /** When the [[DefaultValue]] internal method of O is called with hint String, the following steps are taken: */
  if (hint == 'String) {
    /** 1. Let toString be the result of calling the [[Get]] internal method of object O with argument "toString". */
    toString := {O.Get}(O, "toString");
    /** 2. If IsCallable(toString) is true then: */
    if (IsCallable(toString) == true) {
      /** a. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and an empty argument list. */
      str := {toString.Call}(null, null, toString, O, []);
      /** b. If str is a primitive value, return str. */
      if (IsPrimitiveValue(str))
        return str;
    }
    /** 3. Let valueOf be the result of calling the [[Get]] internal method of object O with argument "valueOf". */
    valueOf := {O.Get}(O, "valueOf");
    /** 4. If IsCallable(valueOf) is true then: */
    if (IsCallable(valueOf) == true) {
      /** a. Let val be the result of calling the [[Call]] internal method of valueOf, with O as the this value and an empty argument list. */
      val := {valueOf.Call}(null, null, valueOf, O, []);
      /** b. If val is a primitive value, return val. */
      if (IsPrimitiveValue(val))
        return val;
    }

    /** 5. Throw a TypeError exception. */
    throw TypeErrorConstructorInternal();
  }
  /** When the [[DefaultValue]] internal method of O is called with hint Number, the following steps are taken: */
  if (hint == 'Number) {
    /** 1. Let valueOf be the result of calling the [[Get]] internal method of object O with argument "valueOf". */
    valueOf := {O.Get}(O, "valueOf");
    /** 2. If IsCallable(valueOf) is true then: */
    if (IsCallable(valueOf) == true) {
      /** a. Let val be the result of calling the [[Call]] internal method of valueOf, with O as the this value and an empty argument list. */
      val := {valueOf.Call}(null, null, valueOf, O, []);
      /** b. If val is a primitive value, return val. */
      if (IsPrimitiveValue(val))
        return val;
    }

    /** 3. Let toString be the result of calling the [[Get]] internal method of object O with argument "toString". */
    toString := {O.Get}(O, "toString");
    /** 4. If IsCallable(toString) is true then: */
    if (IsCallable(toString) == true) {
      /** a. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and an empty argument list. */
      str := {toString.Call}(null, null, toString, O, []);
      /** b. If str is a primitive value, return str. */
      if (IsPrimitiveValue(str))
        return str;
    }

    /** 5. Throw a TypeError exception. */
    throw TypeErrorConstructorInternal();
  }

  /** When the [[DefaultValue]] internal method of O is called with no hint, then it behaves as if the hint were Number,
    * unless O is a Date object (see 15.9.6), in which case it behaves as if the hint were String.
    *
    * The above specification of [[DefaultValue]] for native objects can return only primitive values.
    * If a host object implements its own [[DefaultValue]] internal method,
    * it must ensure that its [[DefaultValue]] internal method can return only primitive values.
    */
}

/**
 * 8.12.9 [[DefineOwnProperty]] (P, Desc, Throw)
 *
 * In the following algorithm, the term “Reject” means “If Throw is true, then throw a TypeError exception, otherwise return false”.
 * The algorithm contains steps that test various fields of the Property Descriptor Desc for specific values.
 * The fields that are tested in this manner need not actually exist in Desc.
 * If a field is absent then its value is considered to be false.
 *
 * When the [[DefineOwnProperty]] internal method of O is called with property name P, property descriptor Desc, and Boolean flag Throw, the following steps are taken:
 */
function DefineOwnProperty(O, P, Desc, Throw) {
  /** 1. Let current be the result of calling the [[GetOwnProperty]] internal method of O with property name P. */
  current := {O.GetOwnProperty}(O, P);
  /** 2. Let extensible be the value of the [[Extensible]] internal property of O. */
  extensible := O.Extensible;
  /** 3. If current is undefined and extensible is false, then Reject. */
  if ((current == 'undefined) && (extensible == false))
    @Reject(Throw);
  /** 4. If current is undefined and extensible is true, then: */
  if ((current == 'undefined) && (extensible == true)) {
    O.internalSlotsList := l_prepend(P, O.internalSlotsList);
    /** a. If IsGenericDescriptor(Desc) or IsDataDescriptor(Desc) is true, then: */
    if (IsGenericPropertyDescriptor(Desc) || (IsDataPropertyDescriptor(Desc) == true)) {
      /** i. Create an own data property named P of object O whose [[Value]], [[Writable]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc.
       *     If the value of an attribute field of Desc is absent, the attribute of the newly created property is set to its default value. */
      createOwnDataProperty(O, P, Desc);
    }
    /** b. Else, Desc must be an accessor Property Descriptor so: */
    else {
      /** i. Create an own accessor property named P of object O whose [[Get]], [[Set]], [[Enumerable]] and [[Configurable]] attribute values are described by Desc.
       *     If the value of an attribute field of Desc is absent, the attribute of the newly created property is set to its default value. */
      createOwnAccessorProperty(O, P, Desc);
    }

    /** c. Return true. */
    return true;
  }

  /** 5. Return true, if every field in Desc is absent. */
  if (EveryFieldIsAbsent(Desc))
    return true;
  /** 6. Return true, if every field in Desc also occurs in current and the value of every field in Desc is the
   *     same value as the corresponding field in current when compared using the SameValue algorithm (9.12). */
  if (everyFieldInDescAlsoOccursInCurrent(Desc, current))
    return true;
  /** 7. If the [[Configurable]] field of current is false then: */
  if (current.Configurable == false) {
    /** a. Reject, if the [[Configurable]] field of Desc is true. */
    if (("Configurable" in_obj Desc) &&& (Desc.Configurable == true))
      @Reject(Throw);
    /** b. Reject, if the [[Enumerable]] field of Desc is present and the [[Enumerable]] fields of current and Desc are the Boolean negation of each other. */
    if (("Enumerable" in_obj Desc) &&& (current.Enumerable != Desc.Enumerable))
      if (!Desc.Enumerable == current.Enumerable)
        @Reject(Throw);
  }

  /** 8. If IsGenericDescriptor(Desc) is true, then no further validation is required. */
  if (IsGenericPropertyDescriptor(Desc) == true);
  /** 9. Else, if IsDataDescriptor(current) and IsDataDescriptor(Desc) have different results, then: */
  else if (IsDataPropertyDescriptor(current) != IsDataPropertyDescriptor(Desc)) {
    /** a. Reject, if the [[Configurable]] field of current is false. */
    if (current.Configurable == false)
      @Reject(Throw);
    /** b. If IsDataDescriptor(current) is true, then: */
    if (IsDataPropertyDescriptor(current)) {
      /** i. Convert the property named P of object O from a data property to an accessor property.
      *     Preserve the existing values of the converted property’s [[Configurable]] and [[Enumerable]] attributes and
      *     set the rest of the property’s attributes to their default values. */
      convertDataPropertyDescToAccessorPropertyDesc(O, P);
    }
    /** c. Else, */
    else {
      /** i. Convert the property named P of object O from an accessor property to a data property.
      *     Preserve the existing values of the converted property’s [[Configurable]] and [[Enumerable]] attributes and
      *     set the rest of the property’s attributes to their default values. */
      convertAccessorPropertyDescToDataPropertyDesc(O, P);
    }
  }
  /** 10. Else, if IsDataDescriptor(current) and IsDataDescriptor(Desc) are both true, then: */
  else if ((IsDataPropertyDescriptor(current) == true) && (IsDataPropertyDescriptor(Desc) == true)) {
    /** a. If the[[Configurable]] field of current is false, then: */
    if (current.Configurable == false) {
      /** i. Reject, if the[[Writable]] field of current is false and the [[Writable]] field of Desc is true. */
      if ((current.Writable == false) && (Desc.Writable == true))
        @Reject(Throw);
      /** ii. If the [[Writable]] field of current is false, then: */
      if (current.Writable == false)
        /** 1. Reject, if the [[Value]] field of Desc is present and SameValue(Desc.[[Value]], current.[[Value]]) is false. */
        if (("Value" in_obj Desc) && (SameValue(Desc.Value, current.Value) == false))
          @Reject(Throw);
    }
    /** b. else, the [[Configurable]] field of current is true, so any change is acceptable. */
    else {}
  }
  /** 11. Else, IsAccessorDescriptor(current) and IsAccessorDescriptor(Desc) are both true so, */
  else {
    /** a. If the [[Configurable]] field of current is false, then: */
    if (current.Configurable == false) {
      /** i. Reject, if the [[Set]] field of Desc is present and SameValue(Desc.[[Set]], current.[[Set]]) is false. */
      if (("Set" in_obj Desc) && (SameValue(Desc.Set, current.Set) == false))
        @Reject(Throw);
      /** ii. Reject, if the [[Get]] field of Desc is present and SameValue(Desc.[[Get]], current.[[Get]]) is false. */
      if (("Get" in_obj Desc) && (SameValue(Desc.Get, current.Get) == false))
        @Reject(Throw);
    }
  }
  /** 12. For each attribute field of Desc that is present, set the correspondingly named attribute of the property named P of object O to the value of the field. */
  setCorrespondinglyNamedAttributes(O, P, Desc);

  /** 13. Return true. */
  return true;

  /**
   * However, if O is an Array object, it has a more elaborate[[DefineOwnProperty]] internal method defined in 15.4.5.1.
   *
   * NOTE Step 10.b allows any field of Desc to be different from the corresponding field of current if current’s [[Configurable]] field is true.
   * This even permits changing the [[Value]] of a property whose [[Writable]] attribute is false.
   * This is allowed because a true [[Configurable]] attribute would permit an equivalent sequence of calls where [[Writable]] is first set to true,
   * a new [[Value]] is set, and then[[Writable]] is set to false.
   *
   */

}


/* Auxiliary functions */
function setAllInternalMethodsOfObject(obj) {
  obj.GetOwnProperty    := "GetOwnProperty";
  obj.GetProperty       := "GetProperty";
  obj.Get               := "Get";
  obj.CanPut            := "CanPut";
  obj.Put               := "Put";
  obj.HasProperty       := "HasProperty";
  obj.Delete            := "Delete";
  obj.DefaultValue      := "DefaultValue";
  obj.DefineOwnProperty := "DefineOwnProperty";
  obj.internalSlotsList := [];
  return obj;
}

function IsPrimitiveValue (v) {
  v_type := Type(v);
  return v_type == "Object";
}
