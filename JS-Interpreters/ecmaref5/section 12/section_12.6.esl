/* Auxiliary functions used to deal with enumerable properties of an ES5 object */
/* Used in the implementation of the for..in statement */

/* Enumerating the properties of an object includes enumerating properties of its prototype, and the prototype of
   the prototype, and so on, recursively; but a property of a prototype is not enumerated if it is "shadowed"
   because some previous object in the prototype chain has a property with the same name. The values of
   [[Enumerable]] attributes are not considered when determining if a property of a prototype object is shadowed
   by a previous object on the prototype chain. */
function getEnumerableProperties(object) {
  props := getEnumerablePropertiesRecursive(object, [], []);

  return fst props
};

function getEnumerablePropertiesRecursive(object, enumProps, checkedProps) {
  if (object = 'null) {
    return (enumProps, checkedProps)
  };
  if ("JSProperties" in_obj object) {
    namedPropertiesObj := object.JSProperties;
    list := l_sort (obj_fields namedPropertiesObj);
    llist := l_len list;

    i := 0;
    while(llist > i) {
      p_name := l_nth(list, i);
      p_value := namedPropertiesObj[p_name];
      if (isPropertyDescriptor(p_value)) {
        if ((p_value.Enumerable = true) &&& !(p_name in_list checkedProps)) {
          enumProps := l_add(enumProps, p_name)
        };
        checkedProps := l_add(checkedProps, p_name)
      };
      i := i + 1
    }
  };
  if ("Prototype" in_obj object) {
    props := getEnumerablePropertiesRecursive(object.Prototype, enumProps, checkedProps);
    enumProps := fst props;
    checkedProps := t_nth(props, 1)
  };

  return (enumProps, checkedProps)
};

function getNextPropertyName(props, idx) {
  if ((l_len props) <= idx) {
    return "None"
  };

  return l_nth(props, idx)
}
