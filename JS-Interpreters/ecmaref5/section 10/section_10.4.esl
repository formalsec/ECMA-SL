/* 10.4 Establishing an Execution Context */

/* Evaluation of global code or code using the eval function (15.1.2.1) establishes and enters a new execution
   context. Every invocation of an ECMAScript code function (13.2.1) also establishes and enters a new
   execution context, even if a function is calling itself recursively. Every return exits an execution context.
   A thrown exception may also exit one or more execution contexts. */

/* When control enters an execution context, the execution context‘s ThisBinding is set, its VariableEnvironment
   and initial LexicalEnvironment are defined, and declaration binding instantiation (10.5) is performed. The exact
   manner in which these actions occur depend on the type of code being entered. */


function EnteringGlobalCode(program) {
  /* 10.4.1 Entering Global Code */
  if ("optimised" in_obj program &&& program.optimised == true)
    globalObject := optimizeInitGlobalObject(program.strict);
  else 
    globalObject := initGlobalObject(program.strict);

  /* The following steps are performed when control enters the execution context for global code: */

  /* 1. Initialise the execution context using the global code as described in 10.4.1.1. */
  globalScope := InitialGlobalExecutionContext(globalObject, program);
  /* 2. Perform Declaration Binding Instantiation as described in 10.5 using the global code. */
  DeclarationBindingInstantiation(program, [], globalScope, null);

  return globalScope;
}

function InitialGlobalExecutionContext(globalObject, program) {
  /* 10.4.1.1 Initial Global Execution Context */

  globalExecCtx := createExecutionContext();
  /* The following steps are performed to initialise a global execution context for ECMAScript code C: */

  globalEnv := GlobalEnvironment(globalObject);
  /* 1. Set the VariableEnvironment to the Global Environment. */
  setVariableEnvironment(globalExecCtx, globalEnv);
  /* 2. Set the LexicalEnvironment to the Global Environment. */
  setLexicalEnvironment(globalExecCtx, globalEnv);
  /* 3. Set the ThisBinding to the global object. */
  setThisBinding(globalExecCtx, |global|);

  setContainedInStrictCode(globalExecCtx, isStrictModeCode(program, globalExecCtx));

  return globalExecCtx;
}

/* 10.4.2 Entering Eval Code */
function EnteringEvalCode(evalCode, ref, callingExecCtx) {
  evalCode.strict := isStrictModeCode(evalCode, callingExecCtx);

  /* The following steps are performed when control enters the execution context for eval code: */

  /* 1. If there is no calling context or if the eval code is not being evaluated by a direct call (15.1.2.1.1) to the eval
        function then, */
  if (!isDirectCall(ref, callingExecCtx)) {
    /* a. Initialise the execution context as if it was a global execution context using the eval code as C as
          described in 10.4.1.1. */
    evalExecCtx := InitialGlobalExecutionContext(|global|, evalCode);
  /* 2. Else, */
  } else {
    evalExecCtx := createExecutionContext();
    /* a. Set the ThisBinding to the same value as the ThisBinding of the calling execution context. */
    setThisBinding(evalExecCtx, getThisBinding(callingExecCtx));
    /* b. Set the LexicalEnvironment to the same value as the LexicalEnvironment of the calling execution
          context. */
    setLexicalEnvironment(evalExecCtx, getLexicalEnvironment(callingExecCtx));
    /* c. Set the VariableEnvironment to the same value as the VariableEnvironment of the calling execution
          context. */
    setVariableEnvironment(evalExecCtx, getVariableEnvironment(callingExecCtx));

    setContainedInStrictCode(evalExecCtx, evalCode.strict);
  }

  /* 3. If the eval code is strict code, then */
  if (isStrictModeCode(evalCode, callingExecCtx)) {
    /* a. Let strictVarEnv be the result of calling NewDeclarativeEnvironment passing the
          LexicalEnvironment as the argument. */
    strictVarEnv := NewDeclarativeEnvironment(getLexicalEnvironment(evalExecCtx));
    /* b. Set the LexicalEnvironment to strictVarEnv. */
    setLexicalEnvironment(evalExecCtx, strictVarEnv);
    /* c. Set the VariableEnvironment to strictVarEnv. */
    setVariableEnvironment(evalExecCtx, strictVarEnv);
  }

  /* 4. Perform Declaration Binding Instantiation as described in 10.5 using the eval code. */
  DeclarationBindingInstantiation(evalCode, [], evalExecCtx, null);

  return evalExecCtx;
}


/* 10.4.2.1 Strict Mode Restrictions */
/* The eval code cannot instantiate variable or function bindings in the variable environment of the calling
   context that invoked the eval if either the code of the calling context or the eval code is strict code. Instead
   such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. */

function EnteringFunctionCode(F, thisArg, argumentsList) {
  /* 10.4.3 Entering Function Code */

  functionExecCtx := createExecutionContext();
  setContainedInStrictCode(functionExecCtx, isStrictFunctionObject(F));

  /* The following steps are performed when control enters the execution context for function code contained in
     function object F, a caller provided thisArg, and a caller provided argumentsList: */

  /* 1. If the function code is strict code, set the ThisBinding to thisArg. */
  if (isStrictModeCode(getFunctionCode(F), functionExecCtx))
    setThisBinding(functionExecCtx, thisArg);
  /* 2. Else if thisArg is null or undefined, set the ThisBinding to the global object. */
  else if ((thisArg == 'null) || (thisArg == 'undefined))
    setThisBinding(functionExecCtx, |global|);
  /* 3. Else if Type(thisArg) is not Object, set the ThisBinding to ToObject(thisArg). */
  else if (Type(thisArg) != "Object")
    setThisBinding(functionExecCtx, ToObject(thisArg));
  /* 4. Else set the ThisBinding to thisArg. */
  else
    setThisBinding(functionExecCtx, thisArg);
  /* 5. Let localEnv be the result of calling NewDeclarativeEnvironment passing the value of the [[Scope]] internal
        property of F as the argument. */
  localEnv := NewDeclarativeEnvironment(F.Scope);
  /* 6. Set the LexicalEnvironment to localEnv. */
  setLexicalEnvironment(functionExecCtx, localEnv);
  /* 7. Set the VariableEnvironment to localEnv. */
  setVariableEnvironment(functionExecCtx, localEnv);
  /* 8. Let code be the value of F‘s [[Code]] internal property. */
  code := F.Code;
  /* 9. Perform Declaration Binding Instantiation using the function code code and argumentsList as described in 10.5. */
  DeclarationBindingInstantiation(code, argumentsList, functionExecCtx, F);

  return functionExecCtx;
}

/* Auxiliary functions */

/* 15.1.2.1.1 Direct Call to Eval */
function isDirectCall(ref, callingExecCtx) {
  if (callingExecCtx == null)
    return false;
  if (Type(ref) != "Reference")
    return false;
  /* A direct call to the eval function is one that is expressed as a CallExpression that meets the following two
    conditions: */
  /* The Reference that is the result of evaluating the MemberExpression in the CallExpression has an environment
    record as its base value and its reference name is "eval". */
  baseValue := GetBase(ref);
  referencedName := GetReferencedName(ref);
  return (Type(baseValue) == "EnvironmentRecord") && (referencedName == "eval");
  /* The result of calling the abstract operation GetValue with that Reference as the argument is the standard built-
    in function defined in 15.1.2.1. */
}
