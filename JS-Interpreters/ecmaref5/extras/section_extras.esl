/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

function initConsoleObject(globalObject, objectPrototype, strict) {
  console := NewECMAScriptObject();
  setAllInternalMethodsOfObject(console);

  internalLog := CreateFunctionObject(["str"], "__internalLog", globalObject, strict, null);
  internalLogObject := CreateFunctionObject(["obj"], "__internalLogObject", globalObject, strict, null);
  internalSetInternalClass := CreateFunctionObject(["obj", "class"], "__internalSetInternalClass", globalObject, strict, null);
  internalSetInternalName := CreateFunctionObject(["obj", "name"], "__internalSetInternalName", globalObject, strict, null);

  createBuiltInProperty(console, "log", internalLog);
  createBuiltInProperty(console, "logObject", internalLogObject);
  createBuiltInProperty(console, "setInternalClass", internalSetInternalClass);
  createBuiltInProperty(console, "setInternalName", internalSetInternalName);

  createBuiltInProperty(internalLog, "prototype", objectPrototype);
  createBuiltInProperty(internalLogObject, "prototype", objectPrototype);
  createBuiltInProperty(internalSetInternalClass, "prototype", objectPrototype);
  createBuiltInProperty(internalSetInternalName, "prototype", objectPrototype);

  setInternalProperty(console, "Prototype", objectPrototype);

  return console;
}

function __internalLog(globalObject, this, strict, params) {
  str := l_nth(params, 0);
  if (typeof str != "string")
    str := ToString(str);
  print s_concat(["JS Log: ", str]);
  return 'null;
}

function __internalLogObject(globalObject, this, strict, params) {
  obj := l_nth(params, 0);
  if (typeof obj != "object")
    return __internalLog(globalObject, this, strict, params);
  oProps := obj.JSProperties;
  print "JS Log Object: ";
  print oProps;
  return 'null;
}

function __internalSetInternalClass(globalObject, this, strict, params) {
  obj := l_nth(params, 0);
  class := l_nth(params, 1);
  setInternalProperty(obj, "Class", class);
  return 'null;
}

function __internalSetInternalName(globalObject, this, strict, params) {
  obj := l_nth(params, 0);
  name := l_nth(params, 1);
  createBuiltInProperty(obj, "name", name);
  return 'null;
}
