/* 15.8 The Math Object */

function initMathObject(globalObject, ObjectPrototype, strict) {
  /* The Math object is a single object that has some named properties, some of which are functions. */
  MathObject := NewECMAScriptObject();
  setAllInternalMethodsOfObject(MathObject);
  /* The value of the [[Prototype]] internal property of the Math object is the standard built-in Object prototype
    object (15.2.4). The value of the [[Class]] internal property of the Math object is "Math". */
  setInternalProperty(MathObject, "Prototype", ObjectPrototype);
  setInternalProperty(MathObject, "Class", "Math");

  /* 15.8.1 Value Properties of the Math Object */
  setValuePropertiesOfMathObject(MathObject);
  /* 15.8.2 Function Properties of the Math Object */
  setFunctionPropertiesOfMathObject(MathObject, globalObject, strict);

  /* The Math object does not have a [[Construct]] internal property; it is not possible to use the Math object as a
    constructor with the new operator. */

  /* The Math object does not have a [[Call]] internal property; it is not possible to invoke the Math object as a
    function. */

  /* NOTE In this specification, the phrase "the Number value for x" has a technical meaning defined in 8.5. */

  return MathObject
};

/* 15.8.1 Value Properties of the Math Object */
function setValuePropertiesOfMathObject(mathObject) {
  /* 15.8.1.1 E */
  /* The Number value for e, the base of the natural logarithms, which is approximately 2.7182818284590452354. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "E", exp 1., false, false, false);

  /* 15.8.1.2 LN10 */
  /* The Number value for the natural logarithm of 10, which is approximately 2.302585092994046. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "LN10", log_e (10.), false, false, false);

  /* 15.8.1.3 LN2 */
  /* The Number value for the natural logarithm of 2, which is approximately 0.6931471805599453. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "LN2", log_e (2.), false, false, false);

  /* 15.8.1.4 LOG2E */
  /* The Number value for the base-2 logarithm of e, the base of the natural logarithms; this value is approximately
     1.4426950408889634. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "LOG2E", (log_10 (exp 1.)) / (log_10 (2.)), false, false, false);
  /* NOTE The value of Math.LOG2E is approximately the reciprocal of the value of Math.LN2. */

  /* 15.8.1.5 LOG10E */
  /* The Number value for the base-10 logarithm of e, the base of the natural logarithms; this value is
     approximately 0.4342944819032518. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "LOG10E", log_10 (exp 1.), false, false, false);
  /* NOTE The value of Math.LOG10E is approximately the reciprocal of the value of Math.LN10. */

  /* 15.8.1.6 PI */
  /* The Number value for pi, the ratio of the circumference of a circle to its diameter, which is approximately
     3.1415926535897932. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "PI", PI, false, false, false);

  /* 15.8.1.7 SQRT1_2 */
  /* The Number value for the square root of 1‚ÅÑ2, which is approximately 0.7071067811865476. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "SQRT1_2", sqrt 0.5, false, false, false);
  /* NOTE The value of Math.SQRT1_2 is approximately the reciprocal of the value of Math.SQRT2. */

  /* 15.8.1.8 SQRT2 */
  /* The Number value for the square root of 2, which is approximately 1.4142135623730951. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(mathObject, "SQRT2", sqrt 2., false, false, false);

  return
};

/* 15.8.2 Function Properties of the Math Object */
function setFunctionPropertiesOfMathObject(mathObject, globalObject, strict) {
  /* Each of the following Math object functions applies the ToNumber abstract operator to each of its arguments
     (in left-to-right order if there is more than one) and then performs a computation on the resulting Number
     value(s). */

  /* In the function descriptions below, the symbols NaN, -0, +0, -Infinity and +Infinity refer to the Number
     values described in 8.5. */

  /* NOTE The behaviour of the functions acos, asin, atan, atan2, cos, exp, log, pow, sin, sqrt, and tan is not
          precisely specified here except to require specific results for certain argument values that represent boundary cases of
          interest. For other argument values, these functions are intended to compute approximations to the results of familiar
          mathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that
          an implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is
          available to C programmers on that platform. */

       /* Although the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that
          implementations use the approximation algorithms for IEEE 754 arithmetic contained in fdlibm, the freely distributable
          mathematical library from Sun Microsystems (http://www.netlib.org/fdlibm). */

  /* 15.8.2.1 abs (x) */
  abs_fo := CreateBuiltInFunctionObject(["x"], "MathAbs", globalObject, strict, null);
  createBuiltInProperty(mathObject, "abs", abs_fo);
  /* 15.8.2.2 acos (x) */
  acos_fo := CreateBuiltInFunctionObject(["x"], "MathACos", globalObject, strict, null);
  createBuiltInProperty(mathObject, "acos", acos_fo);
  /* 15.8.2.3 asin (x) */
  asin_fo := CreateBuiltInFunctionObject(["x"], "MathASin", globalObject, strict, null);
  createBuiltInProperty(mathObject, "asin", asin_fo);
  /* 15.8.2.4 atan (x) */
  atan_fo := CreateBuiltInFunctionObject(["x"], "MathATan", globalObject, strict, null);
  createBuiltInProperty(mathObject, "atan", atan_fo);
  /* 15.8.2.5 atan2 (y, x) */
  atan2_fo := CreateBuiltInFunctionObject(["y", "x"], "MathATan2", globalObject, strict, null);
  createBuiltInProperty(mathObject, "atan2", atan2_fo);
  /* 15.8.2.6 ceil (x) */
  ceil_fo := CreateBuiltInFunctionObject(["x"], "MathCeil", globalObject, strict, null);
  createBuiltInProperty(mathObject, "ceil", ceil_fo);
  /* 15.8.2.7 cos (x) */
  cos_fo := CreateBuiltInFunctionObject(["x"], "MathCos", globalObject, strict, null);
  createBuiltInProperty(mathObject, "cos", cos_fo);
  /* 15.8.2.8 exp (x) */
  exp_fo := CreateBuiltInFunctionObject(["x"], "MathExp", globalObject, strict, null);
  createBuiltInProperty(mathObject, "exp", exp_fo);
  /* 15.8.2.9 floor (x) */
  floor_fo := CreateBuiltInFunctionObject(["x"], "MathFloor", globalObject, strict, null);
  createBuiltInProperty(mathObject, "floor", floor_fo);
  /* 15.8.2.10 log (x) */
  log_fo := CreateBuiltInFunctionObject(["x"], "MathLog", globalObject, strict, null);
  createBuiltInProperty(mathObject, "log", log_fo);
  /* 15.8.2.11 max ( [ value1 [ , value2 [ , ... ] ] ] ) */
  max_fo := CreateBuiltInFunctionObject(["value1", "value2"], "MathMax", globalObject, strict, 0.);
  createBuiltInProperty(mathObject, "max", max_fo);
  /* 15.8.2.12 min ( [ value1 [ , value2 [ , ... ] ] ] ) */
  min_fo := CreateBuiltInFunctionObject(["value1", "value2"], "MathMin", globalObject, strict, 0.);
  createBuiltInProperty(mathObject, "min", min_fo);
  /* 15.8.2.13 pow (x, y) */
  pow_fo := CreateBuiltInFunctionObject(["x", "y"], "MathPow", globalObject, strict, null);
  createBuiltInProperty(mathObject, "pow", pow_fo);
  /* 15.8.2.14 random ( ) */
  random_fo := CreateBuiltInFunctionObject([], "MathRandom", globalObject, strict, null);
  createBuiltInProperty(mathObject, "random", random_fo);
  /* 15.8.2.15 round (x) */
  round_fo := CreateBuiltInFunctionObject(["x"], "MathRound", globalObject, strict, null);
  createBuiltInProperty(mathObject, "round", round_fo);
  /* 15.8.2.16 sin (x) */
  sin_fo := CreateBuiltInFunctionObject(["x"], "MathSin", globalObject, strict, null);
  createBuiltInProperty(mathObject, "sin", sin_fo);
  /* 15.8.2.17 sqrt (x) */
  sqrt_fo := CreateBuiltInFunctionObject(["x"], "MathSqrt", globalObject, strict, null);
  createBuiltInProperty(mathObject, "sqrt", sqrt_fo);
  /* 15.8.2.18 tan (x) */
  tan_fo := CreateBuiltInFunctionObject(["x"], "MathTan", globalObject, strict, null);
  createBuiltInProperty(mathObject, "tan", tan_fo);

  return
};

/* 15.8.2.1 abs (x) */
function MathAbs(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns the absolute value of x; the result has the same magnitude as x but has positive sign. */
  /* If x is NaN, the result is NaN. */
  /* If x is -0, the result is +0. */
  /* If x is -Infinity, the result is +Infinity. */

  return abs x
};

/* 15.8.2.2 acos (x) */
function MathACos(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the arc cosine of x. The result is expressed in radians
     and ranges from +0 to +pi. */
  /* If x is NaN, the result is NaN. */
  /* If x is greater than 1, the result is NaN. */
  /* If x is less than -1, the result is NaN. */
  /* If x is exactly 1, the result is +0. */

  return acos x
};

/* 15.8.2.3 asin (x) */
function MathASin(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the arc sine of x. The result is expressed in radians
     and ranges from -pi/2 to +pi/2. */
  /* If x is NaN, the result is NaN. */
  /* If x is greater than 1, the result is NaN. */
  /* If x is less than ‚Äì1, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */

  return asin x
};

/* 15.8.2.4 atan (x) */
function MathATan(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the arc tangent of x. The result is expressed in
     radians and ranges from -pi/2 to +pi/2. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity, the result is an implementation-dependent approximation to +pi/2. */
  /* If x is -Infinity, the result is an implementation-dependent approximation to -pi/2. */

  return atan x
};

/* 15.8.2.5 atan2 (y, x) */
function MathATan2(globalObject, this, stric, params) {
  y := l_nth(params, 0);
  x := l_nth(params, 1);
  y := ToNumber(y);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the arc tangent of the quotient y/x of the arguments y
     and x, where the signs of y and x are used to determine the quadrant of the result. Note that it is intentional
     and traditional for the two-argument arc tangent function that the argument named y be first and the argument
     named x be second. The result is expressed in radians and ranges from -pi to +pi. */
  /* If either x or y is NaN, the result is NaN. */
  /* If y>0 and x is +0, the result is an implementation-dependent approximation to +pi/2. */
  /* If y>0 and x is -0, the result is an implementation-dependent approximation to +pi/2. */
  /* If y is +0 and x>0, the result is +0. */
  /* If y is +0 and x is +0, the result is +0. */
  /* If y is +0 and x is -0, the result is an implementation-dependent approximation to +pi. */
  /* If y is +0 and x<0, the result is an implementation-dependent approximation to +pi. */
  /* If y is -0 and x>0, the result is -0. */
  /* If y is -0 and x is +0, the result is -0. */
  /* If y is -0 and x is -0, the result is an implementation-dependent approximation to -pi. */
  /* If y is -0 and x<0, the result is an implementation-dependent approximation to -pi. */
  /* If y<0 and x is +0, the result is an implementation-dependent approximation to -pi/2. */
  /* If y<0 and x is -0, the result is an implementation-dependent approximation to -pi/2. */
  /* If y>0 and y is finite and x is +Infinity, the result is +0. */
  /* If y>0 and y is finite and x is -Infinity, the result if an implementation-dependent approximation to +pi. */
  /* If y<0 and y is finite and x is +Infinity, the result is -0. */
  /* If y<0 and y is finite and x is -Infinity, the result is an implementation-dependent approximation to -pi. */
  /* If y is +Infinity and x is finite, the result is an implementation-dependent approximation to +pi/2. */
  /* If y is -Infinity and x is finite, the result is an implementation-dependent approximation to -pi/2. */
  /* If y is +Infinity and x is +Infinity, the result is an implementation-dependent approximation to +pi/4. */
  /* If y is +Infinity and x is -Infinity, the result is an implementation-dependent approximation to +3pi/4. */
  /* If y is -Infinity and x is +Infinity, the result is an implementation-dependent approximation to -pi/4. */
  /* If y is -Infinity and x is -Infinity, the result is an implementation-dependent approximation to -3pi/4. */

  return atan2(y, x)
};

/* 15.8.2.6 ceil (x) */
function MathCeil(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns the smallest (closest to -Infinity) Number value that is not less than x and is equal to a mathematical
     integer. If x is already an integer, the result is x. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity, the result is +Infinity. */
  /* If x is -Infinity, the result is -Infinity. */
  /* If x is less than 0 but greater than -1, the result is -0. */

  return ceil x
};

/* 15.8.2.7 cos (x) */
function MathCos(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the cosine of x. The argument is expressed in radians. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is 1. */
  /* If x is -0, the result is 1. */
  /* If x is +Infinity, the result is NaN. */
  /* If x is -Infinity, the result is NaN. */

  return cos x
};

/* 15.8.2.8 exp (x) */
function MathExp(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the exponential function of x (e raised to the power of
     x, where e is the base of the natural logarithms). */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is 1. */
  /* If x is -0, the result is 1. */
  /* If x is +Infinity, the result is +Infinity. */
  /* If x is -Infinity, the result is +0. */

  return exp x
};

/* 15.8.2.9 floor (x) */
function MathFloor(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns the greatest (closest to +Infinity) Number value that is not greater than x and is equal to a mathematical
     integer. If x is already an integer, the result is x. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity, the result is +Infinity. */
  /* If x is -Infinity, the result is -Infinity. */
  /* If x is greater than 0 but less than 1, the result is +0. */

  /* NOTE The value of Math.floor(x) is the same as the value of -Math.ceil(-x). */
  return -(MathCeil(globalObject, this, stric, [-x]))
};

/* 15.8.2.10 log (x) */
function MathLog(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the natural logarithm of x. */
  /* If x is NaN, the result is NaN. */
  /* If x is less than 0, the result is NaN. */
  /* If x is +0 or -0, the result is -Infinity. */
  /* If x is 1, the result is +0. */
  /* If x is +Infinity, the result is +Infinity. */

  return log_e (x)
};

/* 15.8.2.11 max ( [ value1 [ , value2 [ , ... ] ] ] ) */
function MathMax(globalObject, this, stric, params) {
  /* Given zero or more arguments, calls ToNumber on each of the arguments and returns the largest of the
     resulting values. */
  /* If no arguments are given, the result is -Infinity. */
  if (l_len params = 0) {
    return -Infinity
  };

  max_value := ToNumber(l_nth(params, 0));

  i := 1;
  lparams := l_len params;
  while(i < lparams) {
    arg := l_nth(params, i);
    value := ToNumber(arg);

    max_value := max(max_value, value);

    i := i + 1
  };
  /* If any value is NaN, the result is NaN. */
  /* The comparison of values to determine the largest value is done as in 11.8.5 except that +0 is considered to
     be larger than -0. */
  /* The length property of the max method is 2. */
  return max_value
};

/* 15.8.2.12 min ( [ value1 [ , value2 [ , ... ] ] ] ) */
function MathMin(globalObject, this, stric, params) {
  /* Given zero or more arguments, calls ToNumber on each of the arguments and returns the smallest of the
     resulting values. */
  /* If no arguments are given, the result is +Infinity. */
  if (l_len params = 0) {
    return Infinity
  };

  min_value := ToNumber(l_nth(params, 0));

  i := 1;
  lparams := l_len params;
  while(i < lparams) {
    arg := l_nth(params, i);
    value := ToNumber(arg);

    min_value := min(min_value, value);

    i := i + 1
  };
  /* If any value is NaN, the result is NaN. */
  /* The comparison of values to determine the smallest value is done as in 11.8.5 except that +0 is considered
     to be larger than -0. */
  /* The length property of the min method is 2. */
  return min_value
};

/* 15.8.2.13 pow (x, y) */
function MathPow(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  y := l_nth(params, 1);
  x := ToNumber(x);
  y := ToNumber(y);

  /* Returns an implementation-dependent approximation to the result of raising x to the power y. */
  /* If y is NaN, the result is NaN. */
  /* If y is +0, the result is 1, even if x is NaN. */
  /* If y is -0, the result is 1, even if x is NaN. */
  /* If x is NaN and y is nonzero, the result is NaN. */
  /* If abs(x)>1 and y is +Infinity, the result is +Infinity. */
  /* If abs(x)>1 and y is -Infinity, the result is +0. */
  /* If abs(x)==1 and y is +Infinity, the result is NaN. */
  /* If abs(x)==1 and y is -Infinity, the result is NaN. */
  if (abs(x) = 1.) {
    if ((y = Infinity) ||| (y = -Infinity)) {
      return NaN
    }
  };
  /* If abs(x)<1 and y is +Infinity, the result is +0. */
  /* If abs(x)<1 and y is -Infinity, the result is +Infinity. */
  /* If x is +Infinity and y>0, the result is +Infinity. */
  /* If x is +Infinity and y<0, the result is +0. */
  /* If x is -Infinity and y>0 and y is an odd integer, the result is -Infinity. */
  /* If x is -Infinity and y>0 and y is not an odd integer, the result is +Infinity. */
  /* If x is -Infinity and y<0 and y is an odd integer, the result is -0. */
  /* If x is -Infinity and y<0 and y is not an odd integer, the result is +0. */
  /* If x is +0 and y>0, the result is +0. */
  /* If x is +0 and y<0, the result is +Infinity. */
  /* If x is -0 and y>0 and y is an odd integer, the result is -0. */
  /* If x is -0 and y>0 and y is not an odd integer, the result is +0. */
  /* If x is -0 and y<0 and y is an odd integer, the result is -Infinity. */
  /* If x is -0 and y<0 and y is not an odd integer, the result is +Infinity. */
  /* If x<0 and x is finite and y is finite and y is not an integer, the result is NaN. */

  return x ** y
};

/* 15.8.2.14 random ( ) */
function MathRandom(globalObject, this, stric, params) {
  /* Returns a Number value with positive sign, greater than or equal to 0 but less than 1, chosen randomly or
     pseudo randomly with approximately uniform distribution over that range, using an implementation-dependent
     algorithm or strategy. This function takes no arguments. */
  return random 1.
};

/* 15.8.2.15 round (x) */
function MathRound(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns the Number value that is closest to x and is equal to a mathematical integer. If two integer Number
     values are equally close to x, then the result is the Number value that is closer to +Infinity. If x is already an integer,
     the result is x. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity, the result is +Infinity. */
  /* If x is -Infinity, the result is -Infinity. */
  /* If x is greater than 0 but less than 0.5, the result is +0. */
  if ((x > 0.) &&& (x < 0.5)) {
    return 0.
  };
  /* If x is less than 0 but greater than or equal to -0.5, the result is -0. */
  if ((x <= -(0.)) &&& (x >= -(0.5))) {
    return -(0.)
  };

  /* NOTE 1 Math.round(3.5) returns 4, but Math.round(‚Äì3.5) returns ‚Äì3. */

  /* NOTE 2 The value of Math.round(x) is the same as the value of Math.floor(x+0.5), except when x is -0 or is
            less than 0 but greater than or equal to -0.5; for these cases Math.round(x) returns -0, but Math.floor(x+0.5)
            returns +0. */
  return MathFloor(globalObject, this, stric, [x + 0.5])
};

/* 15.8.2.16 sin (x) */
function MathSin(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the sine of x. The argument is expressed in radians. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity or -Infinity, the result is NaN. */

  return sin(x)
};

/* 15.8.2.17 sqrt (x) */
function MathSqrt(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the square root of x. */
  /* If x is NaN, the result is NaN. */
  /* If x is less than 0, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity, the result is +Infinity. */

  return sqrt x
};

/* 15.8.2.18 tan (x) */
function MathTan(globalObject, this, stric, params) {
  x := l_nth(params, 0);
  x := ToNumber(x);

  /* Returns an implementation-dependent approximation to the tangent of x. The argument is expressed in
     radians. */
  /* If x is NaN, the result is NaN. */
  /* If x is +0, the result is +0. */
  /* If x is -0, the result is -0. */
  /* If x is +Infinity or -Infinity, the result is NaN. */

  return tan x
}
