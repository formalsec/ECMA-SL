/* 15.7 Number Objects */

function initNumberObject(globalObject, ObjectPrototype, strict) {
  numberPrototype := initNumberPrototype(ObjectPrototype);
  numberConstructor := initNumberConstructor(numberPrototype, globalObject, strict);

  fillNumberPrototype(numberPrototype, numberConstructor, globalObject, strict);

  return numberConstructor
};

/* 15.7.1 The Number Constructor Called as a Function */
/* When Number is called as a function rather than as a constructor, it performs a type conversion. */

/* 15.7.1.1 Number ( [ value ] ) */
/* Returns a Number value (not a Number object) computed by ToNumber(value) if value was supplied, else
   returns +0. */
function NumberConstructorCalledAsFunction(value) {
  if (value = null) {
    return 0.
  };
  return ToNumber(value)
};

/* 15.7.2 The Number Constructor */
function initNumberConstructor(NumberPrototype, globalObject, strict) {
  /* When Number is called as part of a new expression it is a constructor: it initialises the newly created object. */

  /* 15.7.3 Properties of the Number Constructor */
  /* The value of the [[Prototype]] internal property of the Number constructor is the Function prototype object
     (15.3.4). */
  NumberConstructor := CreateFunctionObject(["value"], "NumberConstructor", globalObject, strict, 0.);
  /* Besides the internal properties and the length property (whose value is 1), the Number constructor has the
     following properties: */

  /* 15.7.3.1 Number.prototype */
  /* The initial value of Number.prototype is the Number prototype object (15.7.4). */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "prototype", NumberPrototype, false, false, false);

  /* 15.7.3.2 Number.MAX_VALUE */
  /* The value of Number.MAX_VALUE is the largest positive finite value of the Number type, which is
     approximately 1.7976931348623157 x 10^308 . */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "MAX_VALUE", MAX_VALUE, false, false, false);

  /* 15.7.3.3 Number.MIN_VALUE */
  /* The value of Number.MIN_VALUE is the smallest positive value of the Number type, which is approximately
     5 x 10^-324 . */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "MIN_VALUE", MIN_VALUE, false, false, false);

  /* 15.7.3.4 Number.NaN */
  /* The value of Number.NaN is NaN. */
  /* This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "NaN", NaN, false, false, false);

  /* 15.7.3.5 Number.NEGATIVE_INFINITY
   * The value of Number.NEGATIVE_INFINITY is -∞.
   * This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "NEGATIVE_INFINITY", -Infinity, false, false, false);

  /* 15.7.3.6 Number.POSITIVE_INFINITY
   * The value of Number.POSITIVE_INFINITY is +∞.
   * This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(NumberConstructor, "POSITIVE_INFINITY", Infinity, false, false, false);

  return NumberConstructor
};


/* 15.7.4 Properties of the Number Prototype Object */
function initNumberPrototype(objectPrototypeObject) {
  numberPrototypeObject := NewECMAScriptObject();
  setAllInternalMethodsOfObject(numberPrototypeObject);

  /* The Number prototype object is itself a Number object (its [[Class]] is "Number") whose value is +0. */
  setInternalProperty(numberPrototypeObject, "Class", "Number");
  setInternalProperty(numberPrototypeObject, "PrimitiveValue", 0.);
  /* The value of the [[Prototype]] internal property of the Number prototype object is the standard built-in Object
     prototype object (15.2.4). */
  setInternalProperty(numberPrototypeObject, "Prototype", objectPrototypeObject);

  return numberPrototypeObject
};

/* 15.7.4 Properties of the Number Prototype Object */
function fillNumberPrototype(numberPrototypeObject, NumberConstructor, globalObject, strict) {
  /* Unless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic
     and the this value passed to them must be either a Number value or an Object for which the value of the
     [[Class]] internal property is "Number". */

  /* In the following descriptions of functions that are properties of the Number prototype object, the phrase "this
     Number object" refers to either the object that is the this value for the invocation of the function or, if
     Type(this value) is Number, an object that is created as if by the expression new Number(this value)
     where Number is the standard built-in constructor with that name. Also, the phrase "this Number value" refers
     to either the Number value represented by this Number object, that is, the value of the [[PrimitiveValue]]
     internal property of this Number object or the this value if its type is Number. A TypeError exception is
     thrown if the this value is neither an object for which the value of the [[Class]] internal property is "Number"
     or a value whose type is Number. */

  /* 15.7.4.1 Number.prototype.constructor */
  /* The initial value of Number.prototype.constructor is the built-in Number constructor. */
  createBuiltInProperty(numberPrototypeObject, "constructor", NumberConstructor);

  /* 15.7.4.2 Number.prototype.toString ( [ radix ] ) */
  toString := CreateBuiltInFunctionObject([ "radix" ], "numberToString", globalObject, strict, 0.);
  createBuiltInProperty(numberPrototypeObject, "toString", toString);

  /* 15.7.4.3 Number.prototype.toLocaleString() */
  toLocaleString := CreateBuiltInFunctionObject([], "numberToLocaleString", globalObject, strict, null);
  createBuiltInProperty(numberPrototypeObject, "toLocaleString", toLocaleString);

  /* 15.7.4.4 Number.prototype.valueOf ( ) */
  valueOf := CreateBuiltInFunctionObject([], "NumberPrototypeValueOf", globalObject, strict, null);
  createBuiltInProperty(numberPrototypeObject, "valueOf", valueOf);

  /* 15.7.4.5 Number.prototype.toFixed (fractionDigits) */
  toFixed := CreateBuiltInFunctionObject(["fractionDigits"], "NumberPrototypeToFixed", globalObject, strict, null);
  /* toFixed := CreateBuiltInFunctionObject(["fractionDigits"], "NumberPrototypeToFixedAlt", globalObject, strict, null); */
  createBuiltInProperty(numberPrototypeObject, "toFixed", toFixed);

  /* 15.7.4.6 Number.prototype.toExponential (fractionDigits) */
  toExponential := CreateBuiltInFunctionObject(["fractionDigits"], "NumberPrototypeToExponential", globalObject, strict, null);
  /* toExponential := CreateBuiltInFunctionObject(["fractionDigits"], "NumberPrototypeToExponentialAlt", globalObject, strict, null); */
  createBuiltInProperty(numberPrototypeObject, "toExponential", toExponential);

  /* 15.7.4.7 Number.prototype.toPrecision (precision) */
  toPrecision := CreateBuiltInFunctionObject(["precision"], "NumberPrototypeToPrecision", globalObject, strict, null);
  /* toPrecision := CreateBuiltInFunctionObject(["precision"], "NumberPrototypeToPrecisionAlt", globalObject, strict, null); */
  createBuiltInProperty(numberPrototypeObject, "toPrecision", toPrecision);

  return
};

/* 15.7.5 Properties of Number Instances */
/* Number instances inherit properties from the Number prototype object and their [[Class]] internal property
   value is "Number". Number instances also have a [[PrimitiveValue]] internal property. */
/* The [[PrimitiveValue]] internal property is the Number value represented by this Number object. */

/* 15.7.2.1 new Number ( [ value ] ) */
function NumberConstructor(globalObject, this, strict, params) {
  value := getOptionalParam(params, 0);

  if ((this = 'undefined) ||| (this = 'null)) {
    return NumberConstructorCalledAsFunction(value)
  };

  /* When Number is called as part of a new expression it is a constructor: it initialises the newly created object. */
  newlyConstructedObject := NewECMAScriptObject();
  setAllInternalMethodsOfObject(newlyConstructedObject);

  /* The [[Prototype]] internal property of the newly constructed object is set to the original Number prototype
     object, the one that is the initial value of Number.prototype (15.7.3.1). */
  setInternalProperty(newlyConstructedObject, "Prototype", getNumberPrototype(strict));
  /* The [[Class]] internal property of the newly constructed object is set to "Number". */
  setInternalProperty(newlyConstructedObject, "Class", "Number");
  /* The [[PrimitiveValue]] internal property of the newly constructed object is set to ToNumber(value) if value was
     supplied, else to +0. */
  if (value = null) {
    setInternalProperty(newlyConstructedObject, "PrimitiveValue", 0.)
  } else {
    setInternalProperty(newlyConstructedObject, "PrimitiveValue", ToNumber(value))
  };
  /* The [[Extensible]] internal property of the newly constructed object is set to true. */
  setInternalProperty(newlyConstructedObject, "Extensible", true);

  return newlyConstructedObject
};

/**
 * 15.7.4.2 Number.prototype.toString ( [ radix ] )
 *
 * The optional radix should be an integer value in the inclusive range 2 to 36.
 * If radix not present or is undefined the Number 10 is used as the value of radix.
 * If ToInteger(radix) is the Number 10 then this Number value is given as an argument
 * to the ToString abstract operation; the resulting String value is returned.
 *
 * If ToInteger(radix) is not an integer between 2 and 36 inclusive throw a RangeError
 * exception. If ToInteger(radix) is an integer from 2 to 36, but not 10, the result is
 * a String representation of this Number value using the specified radix. Letters a-z
 * are used for digits with values 10 through 35. The precise algorithm is
 * implementation-dependent if the radix is not 10, however the algorithm should be a
 * generalization of that specified in 9.8.1.
 *
 * The toString function is not generic; it throws a TypeError exception if its this
 * value is not a Number or a Number object. Therefore, it cannot be transferred to other
 * kinds of objects for use as a method.
 */
function numberToString(global, this, strict, args) {
  if (!isNumberOrNumberObject(this)) {
    throw TypeErrorConstructorInternal()
  };
  if (Type(this) = "Number") {
    num := this
  } else {
    num := this.PrimitiveValue
  };
  return ToString(num)
};

/* 15.7.4.3 Number.prototype.toLocaleString() */
function numberToLocaleString(global, this, strict, args) {
  /* Produces a String value that represents this Number value formatted according to the conventions of the host
     environment‘s current locale. This function is implementation-dependent, and it is permissible, but not
     encouraged, for it to return the same thing as toString. */

  /* NOTE The first parameter to this function is likely to be used in a future version of this standard; it is recommended
          that implementations do not use this parameter position for anything else. */
  if (!isNumberOrNumberObject(this)) {
    throw TypeErrorConstructorInternal()
  };
  if (Type(this) = "Number") {
    num := this
  } else {
    num := this.PrimitiveValue
  };
  return ToString(num)
};

/* 15.7.4.4 Number.prototype.valueOf ( ) */
function NumberPrototypeValueOf(global, this, strict, params) {
  /* Returns this Number value. */

  /* The valueOf function is not generic; it throws a TypeError exception if its this value is not a Number or a
     Number object. Therefore, it cannot be transferred to other kinds of objects for use as a method. */
  if (!isNumberOrNumberObject(this)) {
    throw TypeErrorConstructorInternal()
  };
  if (Type(this) = "Number") {
    return this
  };
  return getInternalProperty(this, "PrimitiveValue")
};

/* 15.7.4.5 Number.prototype.toFixed (fractionDigits) */
function NumberPrototypeToFixed(global, this, strict, items) {
  /* Return a String containing this Number value represented in decimal fixed-point notation with fractionDigits
     digits after the decimal point. If fractionDigits is undefined, 0 is assumed. Specifically, perform the following
     steps: */

  fractionDigits := getOptionalParam(items, 0);
  /* NumberValue(this value). */
  x := thisNumberValue(this);
  /* 2. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);
  /* 3. Let f be ToInteger(fractionDigits). (If fractionDigits is undefined, this step produces the value 0). */
  f := ToInteger(fractionDigits);
  if (f < 0. ||| f > 20.) {
    throw RangeErrorConstructorInternal()
  };
  return to_fixed(x, (int_of_float f))

  /* The length property of the toFixed method is 1. */
  /* If the toFixed method is called with more than one argument, then the behaviour is undefined (see clause 15). */
  /* An implementation is permitted to extend the behaviour of toFixed for values of fractionDigits less than 0 or
     greater than 20. In this case toFixed would not necessarily throw RangeError for such values. */

  /* NOTE The output of toFixed may be more precise than toString for some values because toString only prints
     enough significant digits to distinguish the number from adjacent number values. For example,

     (1000000000000000128).toString() returns "1000000000000000100",
     while (1000000000000000128).toFixed(0) returns "1000000000000000128". */
};

/* 15.7.4.5 Number.prototype.toFixed (fractionDigits) */
function NumberPrototypeToFixedAlt(global, this, strict, items) {
  /* Return a String containing this Number value represented in decimal fixed-point notation with fractionDigits
     digits after the decimal point. If fractionDigits is undefined, 0 is assumed. Specifically, perform the following
     steps: */

  fractionDigits := getOptionalParam(items, 0);
  /* 1. Let x be thisNumberValue(this value). */
  x := thisNumberValue(this);
  /* 2. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);
  /* 3. Let f be ToInteger(fractionDigits).
  (If fractionDigits is undefined, this step produces the value 0). */
  f := ToInteger(fractionDigits);
  /* 4. ReturnIfAbrupt(f). */
  @ReturnIfAbrupt(f);
  /* 5. If f < 0 or f > 20, throw a RangeError exception.
  However, an implementation is permitted to extend the
  behaviour of toFixed for values of f less than 0 or
  greater than 20. In this case toFixed would not necessarily
  throw RangeError for such values. */
  if (f < 0. || f > 20.) {
    throw RangeErrorConstructorInternal()
  };
  /* 6. If x is NaN, return the String "NaN". */
  if (is_NaN x) {
    return "NaN"
  };
  /* 7. Let s be the empty String. */
  s := "";
  /* 8. If x < 0, then */
  if (x < 0.) {
  /* a. Let s be "-". */
  s := "-";
  /* b. Let x = –x. */
  x := -x
  };
  /* 9. If x ≥ 10^21, then */
  if (x >= ((10.) ** (21.))) {
    /* a. Let m = ToString(x). */
    m := ToString(x)
    /* 10. Else x < 1021, */
  } else {
    /* a. Let n be an integer for which the exact mathematical value
    of n ÷ 10f – x is as close to zero as possible.
    If there are two such n, pick the larger n. */
    /* b. If n = 0, let m be the String "0".
    Otherwise, let m be the String consisting of the digits
    of the decimal representation of n (in order, with no leading zeroes). */
    if (n = 0) {
      m := "0"
    } else {
      m := float_to_string(n)
    };
    /* c. If f ≠ 0, then */
    if (!(f = 0)) {
      /* i. Let k be the number of elements in m. */
      k := s_len_u(m);
      /* ii. If k ≤ f, then */
      if (k <= f) {
        /* 1. Let z be the String consisting of f+1–k occurrences of the code unit 0x0030 (DIGIT ZERO). */
        z := "";
        counter := 0;
        while (!(counter <= (f - k))) {
          z := s_concat(z, "0");
          counter := counter + 1
        };
        /* 2. Let m be the concatenation of Strings z and m. */
        m := s_concat(z, m);
        /* 3. Let k = f + 1. */
        k := f + 1
      };
      /* iii. Let a be the first k – f elements of m, and let b be the remaining f elements of m. */
      a := s_substr_u(m, 0, k - f);
      b := s_substr_u(m, k - f, s_len_u(m))
    }
  };
  /* iv. Let m be the concatenation of the three Strings a, ".", and b. */
  m := l_concat(l_concat(a, "."), b);
  /* 11. Return the concatenation of the Strings s and m. */
  return l_concat(s, m)

  /* The length property of the toFixed method is 1. */
  /* If the toFixed method is called with more than one argument, then the behaviour is undefined (see clause 15). */
  /* An implementation is permitted to extend the behaviour of toFixed for values of fractionDigits less than 0 or
     greater than 20. In this case toFixed would not necessarily throw RangeError for such values. */

  /* NOTE The output of toFixed may be more precise than toString for some values because toString only prints
     enough significant digits to distinguish the number from adjacent number values. For example,

     (1000000000000000128).toString() returns "1000000000000000100",
     while (1000000000000000128).toFixed(0) returns "1000000000000000128". */
};

/* 15.7.4.6 Number.prototype.toExponential (fractionDigits) */
function NumberPrototypeToExponential(global, this, strict, items) {
  /* Return a String containing this Number value represented in decimal exponential notation with one digit before
   the significand's decimal point and fractionDigits digits after the significand's decimal point. If fractionDigits is
   undefined, include as many significand digits as necessary to uniquely specify the Number (just like in
   ToString except that in this case the Number is always output in exponential notation). Specifically, perform
   the following steps: */

  fractionDigits := getOptionalParam(items, 0);
  /* NumberValue(this value). */
  x := thisNumberValue(this);
  /* 2. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);

  /* 6. If x is NaN, return the String "NaN". */
  if (is_NaN x) {
    return "NaN"
  };
  /* 7. Let s be the empty String. */
  s := "";
  /* 8. If x < 0, then */
  if (x < 0.) {
    /* a. Let s be "-". */
    s := "-";
    /* b. Let x = –x. */
    x := -x
  };
  /* 9. If x = +∞, then */
  if (x = Infinity) {
    /* a. Return the concatenation of the Strings s and "Infinity". */
    return s_concat(s, "Infinity")
  };

  if (fractionDigits = 'undefined) {
    return to_exponential(x, s_len(float_to_string (abs x)) - 1)
  } else {
    return to_exponential(x, (int_of_float fractionDigits))
  }

  /* The length property of the toExponential method is 1. */
  /* If the toExponential method is called with more than one argument, then the behaviour is undefined (see clause 15). */

  /* An implementation is permitted to extend the behaviour of toExponential for values of fractionDigits less
    than 0 or greater than 20. In this case toExponential would not necessarily throw RangeError for such values. */

  /* NOTE For implementations that provide more accurate conversions than required by the rules above, it is
    recommended that the following alternative version of step 9.b.i be used as a guideline:
    i. Let e, n, and f be integers such that f  0, 10f  n < 10f+1, the number value for n  10e–f is x, and f is as small
    as possible. If there are multiple possibilities for n, choose the value of n for which n  10e–f is closest in value
    to x. If there are two such possible values of n, choose the one that is even. */
};

/* 15.7.4.6 Number.prototype.toExponential (fractionDigits) */
function NumberPrototypeToExponentialAlt(global, this, strict, items) {
  /* Return a String containing this Number value represented in decimal exponential notation with one digit before
   the significand's decimal point and fractionDigits digits after the significand's decimal point. If fractionDigits is
   undefined, include as many significand digits as necessary to uniquely specify the Number (just like in
   ToString except that in this case the Number is always output in exponential notation). Specifically, perform
   the following steps: */

  fractionDigits := getOptionalParam(items, 0);
  /* 1. Let x be thisNumberValue(this value). */
  x := thisNumberValue(this);
  /* 2. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);
  /* 3. Let f be ToInteger(fractionDigits). */
  f := ToInteger(fractionDigits);
  /* 4. Assert: f is 0, when fractionDigits is undefined. */
  if (fractionDigits = 'undefined) {
    assert f = 0
  };
  /* 5. ReturnIfAbrupt(f). */
  @ReturnIfAbrupt(f);
  /* 6. If x is NaN, return the String "NaN". */
  if (is_NaN x) {
    return "NaN"
  };
  /* 7. Let s be the empty String. */
  s := "";
  /* 8. If x < 0, then */
  if (x < 0.) {
    /* a. Let s be "-". */
    s := "-";
    /* b. Let x = –x. */
    x := -x
  };
  /* 9. If x = +∞, then */
  if (x = Infinity) {
    /* a. Return the concatenation of the Strings s and "Infinity". */
    return s_concat(s, "Infinity")
  };
  /* 10. If f < 0 or f > 20, throw a RangeError exception.
  /* However, an implementation is permitted to extend the behaviour of toExponential
  for values of f less than 0 or greater than 20. In this case toExponential would not
  necessarily throw RangeError for such values. */
  if (f < 0. || f > 20.) {
    throw RangeErrorConstructorInternal()
  };
  /* 11. If x = 0, then */
  if (x = 0.) {
    /* a. Let m be the String consisting of f+1 occurrences of the code unit 0x0030 (DIGIT ZERO). */
    m := "";
    counter := 0;
    while (!(counter <= f)) {
      m := s_concat(m, "0");
      counter := counter + 1
    };
    /* b. Let e = 0. */
    e := 0
  /* 12. Else x ≠ 0, */
  } else {
    /* a. If fractionDigits is not undefined, then */
    if (!(fractionDigits = 'undefined)) {
      /* i. Let e and n be integers such that 10f ≤ n < 10f+1 and for which the exact mathematical
      value of n × 10e – f – x is as close to zero as possible. If there are two such sets of e and n,
      pick the e and n for which n × 10e–f is larger. */
      /* b. Else fractionDigits is undefined, */
    } else {
      /* i. Let e, n, and f be integers such that f ≥ 0, 10f ≤ n < 10f+1,
      the Number value for n × 10e – f is x, and f is as small as possible.
      Note that the decimal representation of n has f+1 digits, n is not divisible by 10,
      and the least significant digit of n is not necessarily uniquely determined by these criteria. */
    };
    /* c. Let m be the String consisting of the digits of the decimal representation of n
    (in order, with no leading zeroes). */
    m := float_to_string(n)
  };
  /* 13. If f ≠ 0, then */
  if (!(f = 0)) {
    /* a. Let a be the first element of m, and let b be the remaining f elements of m. */
    a := s_nth_u(m, 0);
    /* b. Let m be the concatenation of the three Strings a, ".", and b. */
    m := s_concat(s_concat(a, "."), b)
  };
  /* 14. If e = 0, then */
  if (e = 0) {
    /* Let c = "+". */
    c := "+";
    /* Let d = "0". */
    d := "0"
  /* 15. Else */
  } else {
    /* a. If e > 0, let c = "+". */
    if (e > 0) {
      c := "+"
    /* b. Else e ≤ 0, */
    } else {
      /* i. Let c = "-". */
      c := "-";
      /* ii. Let e = –e. */
      e := -e
    };
    /* c. Let d be the String consisting of the digits of the decimal representation of e
    (in order, with no leading zeroes). */
    d := float_to_string(e)
  };
  /* 16. Let m be the concatenation of the four Strings m, "e", c, and d. */
  m := s_concat(s_concat(s_concat(m, "e"), c), d);
  /* 17. Return the concatenation of the Strings s and m. */
  return s_concat(s, m)

  /* The length property of the toExponential method is 1. */
  /* If the toExponential method is called with more than one argument, then the behaviour is undefined (see clause 15). */

  /* An implementation is permitted to extend the behaviour of toExponential for values of fractionDigits less
    than 0 or greater than 20. In this case toExponential would not necessarily throw RangeError for such values. */

  /* NOTE For implementations that provide more accurate conversions than required by the rules above, it is
    recommended that the following alternative version of step 9.b.i be used as a guideline:
    i. Let e, n, and f be integers such that f  0, 10f  n < 10f+1, the number value for n  10e–f is x, and f is as small
    as possible. If there are multiple possibilities for n, choose the value of n for which n  10e–f is closest in value
    to x. If there are two such possible values of n, choose the one that is even. */
};

/* 15.7.4.7 Number.prototype.toPrecision ( precision ) */
function NumberPrototypeToPrecision(global, this, strict, items) {
  /* Return a String containing this Number value represented either in decimal exponential notation with one digit
     before the significand's decimal point and precision–1 digits after the significand's decimal point or in decimal
     fixed notation with precision significant digits. If precision is undefined, call ToString (9.8.1) instead.
     Specifically, perform the following steps: */
  precision := getOptionalParam(items, 0);

  /* 1. Let x be thisNumberValue(this value). */
  x := thisNumberValue(this);
  /* 2. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);
  /* 3. If precision is undefined, return ToString(x). */
  if (precision = 'undefined) {
    return ToString(x)
  };
  /* 4. Let p be ToInteger(precision). */
  p := ToInteger(precision);
  /* 5. ReturnIfAbrupt(p). */
  @ReturnIfAbrupt(p);
  /* 6. If x is NaN, return the String "NaN". */
  if (is_NaN x) {
    return "NaN"
  };
  /* 7. Let s be the empty String. */
  s := "";
  /* 8. If x < 0, then */
  if (x < 0.) {
    /* a. Let s be code unit 0x002D (HYPHEN-MINUS). */
    s := "-";
    /* b. Let x = –x. */
    x := -x
  };
  /* 9. If x = +∞, then */
  if (x = Infinity) {
    /* a. Return the String that is the concatenation of s and "Infinity". */
    return s_concat(s, "Infinity")
  };
  /* 10. If p < 1 or p > 21, throw a RangeError exception. However, an implementation is permitted
  to extend the behaviour of toPrecision for values of p less than 1 or greater
  than 21. In this case toPrecision would not necessarily throw RangeError for such values. */
  if (p < 1. || p > 21.) {
    throw RangeErrorConstructorInternal()
  };

  return to_precision(x, (int_of_float precision))

  /* The length property of the toPrecision method is 1. */

  /* If the toPrecision method is called with more than one argument, then the behaviour is undefined (see clause 15). */

  /* An implementation is permitted to extend the behaviour of toPrecision for values of precision less than 1 or
     greater than 21. In this case toPrecision would not necessarily throw RangeError for such values. */
};

/* 20.1.3.5 Number.prototype.toPrecision ( precision ) */
function NumberPrototypeToPrecisionAlt(global, this, strict, items) {
  /* Return a String containing this Number value represented either in decimal exponential notation with one digit
     before the significand's decimal point and precision–1 digits after the significand's decimal point or in decimal
     fixed notation with precision significant digits. If precision is undefined, call ToString (9.8.1) instead.
     Specifically, perform the following steps: */
  precision := getOptionalParam(items, 0);
  /* 1. Let x be thisNumberValue(this value). */
  x := thisNumberValue(this);
  /* 2. ReturnIfAbrupt(x). */
  @ReturnIfAbrupt(x);
  /* 3. If precision is undefined, return ToString(x). */
  if (precision = 'undefined) {
    return ToString(x)
  };
  /* 4. Let p be ToInteger(precision). */
  p := ToInteger(precision);
  /* 5. ReturnIfAbrupt(p). */
  @ReturnIfAbrupt(p);
  /* 6. If x is NaN, return the String "NaN". */
  if (is_NaN x) {
    return "NaN"
  };
  /* 7. Let s be the empty String. */
  s := "";
  /* 8. If x < 0, then */
  if (x < 0.) {
    /* a. Let s be code unit 0x002D (HYPHEN-MINUS). */
    s := "-";
    /* b. Let x = –x. */
    x := -x
  };
  /* 9. If x = +∞, then */
  if (x = Infinity) {
    /* a. Return the String that is the concatenation of s and "Infinity". */
    return s_concat(s, "Infinity")
  };
  /* 10. If p < 1 or p > 21, throw a RangeError exception. However, an implementation is permitted
  to extend the behaviour of toPrecision for values of p less than 1 or greater
  than 21. In this case toPrecision would not necessarily throw RangeError for such values. */
  if (p < 1. || p > 21.) {
    throw RangeErrorConstructorInternal()
  };
  /* 11. If x = 0, then */
  if (x = 0) {
    /* a. Let m be the String consisting of p occurrences of the code unit 0x0030 (DIGIT ZERO). */
    m := "";
    counter := 0;
    while (!(counter = p)) {
      m := s_concat(m, "0");
      counter := counter + 1
    };
    /* b. Let e = 0. */
    e := 0
  /* 12. Else x ≠ 0, */
  } else {
    /* a. Let e and n be integers such that 10 p–1 ≤ n < 10 p and for which
    the exact mathematical value of n × 10 e–p+1 – x is as close to zero as possible.
    If there are two such sets of e and n, pick the e and n for which n × 10 e–p+1 is larger. */
    /* b. Let m be the String consisting of the digits of the decimal representation of n
    (in order, with no leading zeroes). */
  };
  /* 13. If e = p–1, return the concatenation of the Strings s and m. */
  if (e = (p - 1)) {
    return s_concat(s, m)
  };
  /* 14. If e ≥ 0, then */
  if (e >= 0) {
    /* a. Let m be the concatenation of the first e+1 elements of m,
    the code unit 0x002E (FULL STOP), and the remaining p – (e+1) elements of m. */
    m := s_concat(s_concat(s_substr_u(m, 0, e + 1), "."), s_substr_u(m, e + 1, p - (e + 1)))
  /* 15. Else e < 0, */
  } else {
    /* a. Let m be the String formed by the concatenation of code unit 0x0030 (DIGIT ZERO),
    code unit 0x002E (FULL STOP), –(e+1) occurrences of code unit 0x0030 (DIGIT ZERO), and the String m. */
    tmp := "";
    index := 0;
    while (index = (-e)) {
      tmp := s_concat(tmp, "0");
      index := index + 1
    };
    m := s_concat(s_concat("0.", tmp), m)
  };
  /* 16. Return the String that is the concatenation of s and m. */
  return s_concat(s, m)

  /* The length property of the toPrecision method is 1. */

  /* If the toPrecision method is called with more than one argument, then the behaviour is undefined (see clause 15). */

  /* An implementation is permitted to extend the behaviour of toPrecision for values of precision less than 1 or
     greater than 21. In this case toPrecision would not necessarily throw RangeError for such values. */
};


/* Auxiliary functions */
/* 20.1.3 Abstract Operation thisNumberValue(value) */
function thisNumberValue(value) {
  /* 1. If Type(value) is Number, return value. */
  if (Type(value) = "Number") {
    return value
  };
  /* 2. If Type(value) is Object and value has a [[NumberData]] internal slot, then */
  if (Type(value) = "Object" &&& "PrimitiveValue" in_obj value) {
    /* a. Assert: value’s [[NumberData]] internal slot is a Number value. */
    assert Type(value.PrimitiveValue) = "Number";
    /* b. Return the value of value’s [[NumberData]] internal slot. */
    return value.PrimitiveValue
  };
  /* 3. Throw a TypeError exception. */
  throw TypeErrorConstructorInternal()
};

function getNumberPrototype(strict) {
  refNumber := newPropertyReference(|global|, "Number", strict);
  NumberObject := GetValue(refNumber);

  refNumberProto := newPropertyReference(NumberObject, "prototype", strict);
  objectNumberProto := GetValue(refNumberProto);

  return objectNumberProto
};

function isNumberOrNumberObject(arg) {
  if (Type(arg) = "Number") {
    return true
  };
  if ((Type(arg) = "Object") &&& (getInternalProperty(arg, "Class") = "Number")) {
    return true
  };
  return false
}
