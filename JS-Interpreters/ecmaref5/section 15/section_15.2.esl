/* 15.2 Object Objects */

/* 15.2.2 The Object Constructor */
function initObjectConstructor(ObjectPrototype, FunctionPrototype, globalObject, strict) {
  /* When Object is called as part of a new expression, it is a constructor that may create an object. */
  /* The value of the [[Prototype]] internal property of the Object constructor is the standard built-in Function
     prototype object. */
  ObjectConstructor := CreateGeneralFunctionObject(FunctionPrototype, ["value"], "ObjectConstructor", globalObject, strict, 0.);

  /* 15.2.3.1 Object.prototype */
  /* The initial value of Object.prototype is the standard built-in Object prototype object (15.2.4). */
  /* This property has the attributes {[[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }. */
  createBuiltInPropertyWithFullDescriptor(ObjectConstructor, "prototype", ObjectPrototype, false, false, false);

  /* 15.2.5 Properties of Object Instances */
  /* Object instances have no special properties beyond those inherited from the Object prototype object. */

  return ObjectConstructor;
}

/* 15.2.3 Properties of the Object Constructor */
function fillObjectConstructor(ObjectConstructor, globalObject, strict) {
  /* Besides the internal properties and the length property (whose value is 1), the Object constructor has the
     following properties: */

  /* 15.2.3.2 Object.getPrototypeOf ( O ) */
  getPrototypeOf := CreateBuiltInFunctionObject(["O"], "ObjectGetPrototypeOf", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "getPrototypeOf", getPrototypeOf);

  /* 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P ) */
  getOwnPropertyDescriptor := CreateBuiltInFunctionObject(["O", "P"], "ObjectGetOwnPropertyDescriptor", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "getOwnPropertyDescriptor", getOwnPropertyDescriptor);

  /* 15.2.3.4 Object.getOwnPropertyNames ( O ) */
  getOwnPropertyNames := CreateBuiltInFunctionObject(["O"], "ObjectGetOwnPropertyNames", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "getOwnPropertyNames", getOwnPropertyNames);

  /* 15.2.3.5 Object.create ( O [, Properties] ) */
  create := CreateBuiltInFunctionObject(["O", "Properties"], "ObjectCreate", globalObject, strict, 1.);
  createBuiltInProperty(ObjectConstructor, "create", create);

  /* 15.2.3.6 Object.defineProperty ( O, P, Attributes ) */
  defineProperty := CreateBuiltInFunctionObject(["O", "P", "Attributes"], "ObjectDefineProperty", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "defineProperty", defineProperty);

  /* 15.2.3.7 Object.defineProperties ( O, Properties ) */
  defineProperties := CreateBuiltInFunctionObject(["O", "Properties"], "ObjectDefineProperties", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "defineProperties", defineProperties);

  /* 15.2.3.8 Object.seal ( O ) */
  seal := CreateBuiltInFunctionObject(["O"], "ObjectSeal", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "seal", seal);

  /* 15.2.3.9 Object.freeze ( O ) */
  freeze := CreateBuiltInFunctionObject(["O"], "ObjectFreeze", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "freeze", freeze);

  /* 15.2.3.10 Object.preventExtensions ( O ) */
  preventExtensions := CreateBuiltInFunctionObject(["O"], "ObjectPreventExtensions", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "preventExtensions", preventExtensions);

  /* 15.2.3.11 Object.isSealed ( O ) */
  isSealed := CreateBuiltInFunctionObject(["O"], "ObjectIsSealed", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "isSealed", isSealed);

  /* 15.2.3.12 Object.isFrozen ( O ) */
  isFrozen := CreateBuiltInFunctionObject(["O"], "ObjectIsFrozen", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "isFrozen", isFrozen);

  /* 15.2.3.13 Object.isExtensible ( O ) */
  isExtensible := CreateBuiltInFunctionObject(["O"], "ObjectIsExtensible", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "isExtensible", isExtensible);

  /* 15.2.3.14 Object.keys ( O ) */
  keys := CreateBuiltInFunctionObject(["O"], "ObjectKeys", globalObject, strict, null);
  createBuiltInProperty(ObjectConstructor, "keys", keys);

  return 'null;
}

/* 15.2.4 Object Prototype Object */
function initObjectPrototype() {
  /* The value of the [[Prototype]] internal property of the Object prototype object is null, the value of the [[Class]]
     internal property is "Object", and the initial value of the [[Extensible]] internal property is true. */
  objectPrototypeObject := NewECMAScriptObjectFull('null, "Object", true);
  setAllInternalMethodsOfObject(objectPrototypeObject);

  return objectPrototypeObject;
}

/* 15.2.4 Properties of the Object Prototype Object */
function fillObjectPrototype(objectPrototypeObject, ObjectConstructor, globalObject, strict) {
  /* 15.2.4.1 Object.prototype.constructor */
  /* The initial value of Object.prototype.constructor is the standard built-in Object constructor. */
  createBuiltInProperty(objectPrototypeObject, "constructor", ObjectConstructor);

  /* 15.2.4.2 Object.prototype.toString ( ) */
  toString := CreateBuiltInFunctionObject([], "ObjectPrototypeToString", globalObject, strict, null);
  createBuiltInProperty(objectPrototypeObject, "toString", toString);

  /* 15.2.4.3 Object.prototype.toLocaleString ( ) */
  toLocaleString := CreateBuiltInFunctionObject([], "ObjectPrototypeToLocaleString", globalObject, strict, null);
  createBuiltInProperty(objectPrototypeObject, "toLocaleString", toLocaleString);

  /* 15.2.4.4 Object.prototype.valueOf ( ) */
  valueOf := CreateBuiltInFunctionObject([], "ObjectPrototypeValueOf", globalObject, strict, null);
  createBuiltInProperty(objectPrototypeObject, "valueOf", valueOf);

  /* 15.2.4.5 Object.prototype.hasOwnProperty (V) */
  hasOwnProperty := CreateBuiltInFunctionObject(["V"], "ObjectPrototypeHasOwnProperty", globalObject, strict, null);
  createBuiltInProperty(objectPrototypeObject, "hasOwnProperty", hasOwnProperty);

  /* 15.2.4.6 Object.prototype.isPrototypeOf (V) */
  isPrototypeOf := CreateBuiltInFunctionObject(["V"], "ObjectPrototypeIsPrototypeOf", globalObject, strict, null);
  createBuiltInProperty(objectPrototypeObject, "isPrototypeOf", isPrototypeOf);

  /* 15.2.4.7 Object.prototype.propertyIsEnumerable (V) */
  propertyIsEnumerable := CreateBuiltInFunctionObject(["V"], "ObjectPrototypePropertyIsEnumerable", globalObject, strict, null);
  createBuiltInProperty(objectPrototypeObject, "propertyIsEnumerable", propertyIsEnumerable);

  return;
}


/* 15.2.2.1 new Object ( [ value ] ) */
function ObjectConstructor(globalObject, this, strict, params) {
  value := getOptionalParam(params, 0);
  /* When the Object constructor is called with no arguments or with one argument value, the following steps are
      taken: */

  /* 1. If value is supplied, then */
  if (!(value = null)) {
    /* a. If Type(value) is Object, then */
    if (Type(value) = "Object") {
      /* i. If the value is a native ECMAScript object, do not create a new object but simply return value. */
      if (isJavaScriptObject(value))
        return value;
      /* ii. If the value is a host object, then actions are taken and a result is returned in an
            implementation-dependent manner that may depend on the host object. */
      if (isHostObject(value, this))
        return hostObjectReturn();
    }
    /* b. If Type(value) is String, return ToObject(value). */
    if (Type(value) = "String")
      return ToObject(value);
    /* c. If Type(value) is Boolean, return ToObject(value). */
    if (Type(value) = "Boolean")
      return ToObject(value);
    /* d. If Type(value) is Number, return ToObject(value). */
    if (Type(value) = "Number")
      return ToObject(value);
  }
  /* 2. Assert: The argument value was not supplied or its type was Null or Undefined. */
  assert ((value = null) ||| (Type(value) = "Null") ||| (Type(value) = "Undefined"));
  /* 3. Let obj be a newly created native ECMAScript object. */
  obj := NewECMAScriptObject();
  /* 4. Set the [[Prototype]] internal property of obj to the standard built-in Object prototype object (15.2.4). */
  setInternalProperty(obj, "Prototype", getObjectPrototype(strict));
  /* 5. Set the [[Class]] internal property of obj to "Object". */
  setInternalProperty(obj, "Class", "Object");
  /* 6. Set the [[Extensible]] internal property of obj to true. */
  setInternalProperty(obj, "Extensible", true);
  /* 7. Set all the internal methods of obj as specified in 8.12. */
  setAllInternalMethodsOfObject(obj);
  /* 8. Return obj. */
  return obj;
}

/* 15.2.3.2 Object.getPrototypeOf ( O ) */
function ObjectGetPrototypeOf(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the getPrototypeOf function is called with argument O, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Return the value of the [[Prototype]] internal property of O. */
  return getInternalProperty(O, "Prototype");
}

/* 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P ) */
function ObjectGetOwnPropertyDescriptor(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  P := l_nth(params, 1);
  /* When the getOwnPropertyDescriptor function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Let name be ToString(P). */
  name := ToString(P);
  /* 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with argument name. */
  desc := {O.GetOwnProperty}(O, name);
  /* 4. Return the result of calling FromPropertyDescriptor(desc) (8.10.4). */
  return FromPropertyDescriptor(desc);
}

/* 15.2.3.4 Object.getOwnPropertyNames ( O ) */
function ObjectGetOwnPropertyNames(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the getOwnPropertyNames function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Let array be the result of creating a new object as if by the expression new Array () where Array is the
        standard built-in constructor with that name. */
  array := ArrayConstructor(globalObject, this, strict, []);
  /* 3. Let n be 0. */
  n := 0.;
  /* 4. For each named own property P of O */
  foreach (P : getOwnProperties(O)) {
    /* a. Let name be the String value that is the name of P. */
    name := getStringValue(P);
    /* b. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(n), the
          PropertyDescriptor {[[Value]]: name, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]:
          true}, and false. */
    {array.DefineOwnProperty}(array, ToString(n), newDataPropertyDescriptor(name), false);
    /* c. Increment n by 1. */
    n := n + 1.;
  }
  /* 5. Return array. */
  return array;

  /* NOTE If O is a String instance, the set of own properties processed in step 4 includes the implicit properties defined
          in 15.5.5.2 that correspond to character positions within the object‘s [[PrimitiveValue]] String. */
}

/* 15.2.3.5 Object.create ( O [, Properties] ) */
function ObjectCreate(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  Properties := getOptionalParam(params, 1);
  /* The create function creates a new object with a specified prototype. When the create function is called, the
    following steps are taken: */

  /* 1. If Type(O) is not Object or Null throw a TypeError exception. */
  if (!(Type(O) = "Object") && !(Type(O) = "Null"))
    throw TypeErrorConstructorInternal();
  /* 2. Let obj be the result of creating a new object as if by the expression new Object() where Object is the
        standard built-in constructor with that name */
  obj := ObjectConstructor(globalObject, this, strict, []);
  /* 3. Set the [[Prototype]] internal property of obj to O. */
  setInternalProperty(obj, "Prototype", O);
  /* 4. If the argument Properties is present and not undefined, add own properties to obj as if by calling the
        standard built-in function Object.defineProperties with arguments obj and Properties. */
  if (!(Properties = null) &&& !(Properties = 'undefined))
    ObjectDefineProperties(globalObject, this, strict, [obj, Properties]);
  /* 5. Return obj. */
  return obj;
}

/* 15.2.3.6 Object.defineProperty ( O, P, Attributes ) */
function ObjectDefineProperty(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  P := l_nth(params, 1);
  Attributes := l_nth(params, 2);
  /* The defineProperty function is used to add an own property and/or update the attributes of an existing own
    property of an object. When the defineProperty function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Let name be ToString(P). */
  name := ToString(P);
  /* 3. Let desc be the result of calling ToPropertyDescriptor with Attributes as the argument. */
  desc := ToPropertyDescriptor(Attributes);
  /* 4. Call the [[DefineOwnProperty]] internal method of O with arguments name, desc, and true. */
  {O.DefineOwnProperty}(O, name, desc, true);
  /* 5. Return O. */
  return O;
}

/* 15.2.3.7 Object.defineProperties ( O, Properties ) */
function ObjectDefineProperties(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  Properties := l_nth(params, 1);
  /* The defineProperties function is used to add own properties and/or update the attributes of existing own
     properties of an object. When the defineProperties function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Let props be ToObject(Properties). */
  props := ToObject(Properties);
  /* 3. Let names be an internal list containing the names of each enumerable own property of props. */
  names := getOwnEnumerableProperties(props);
  /* 4. Let descriptors be an empty internal List. */
  descriptors := [];
  /* 5. For each element P of names in list order, */
  foreach (P : names) {
    /* a. Let descObj be the result of calling the [[Get]] internal method of props with P as the argument. */
    descObj := {props.Get}(props, P);
    /* b. Let desc be the result of calling ToPropertyDescriptor with descObj as the argument. */
    desc := ToPropertyDescriptor(descObj);
    /* c. Append the pair (a two element List) consisting of P and desc to the end of descriptors. */
    descriptors := l_add(descriptors, [P, desc]);
  }
  /* 6. For each pair from descriptors in list order, */
  foreach (pair : descriptors) {
    /* a. Let P be the first element of pair. */
    P := l_nth(pair, 0);
    /* b. Let desc be the second element of pair. */
    desc := l_nth(pair, 1);
    /* c. Call the [[DefineOwnProperty]] internal method of O with arguments P, desc, and true. */
    {O.DefineOwnProperty}(O, P, desc, true);
  }
  /* 7. Return O. */
  return O;

  /* If an implementation defines a specific order of enumeration for the for-in statement, that same enumeration
     order must be used to order the list elements in step 3 of this algorithm. */
}

/* 15.2.3.8 Object.seal ( O ) */
function ObjectSeal(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the seal function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. For each named own property name P of O, */
  foreach (P : getOwnProperties(O)) {
    /* a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P. */
    desc := {O.GetOwnProperty}(O, P);
    /* b. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false. */
    if (desc.Configurable = true)
      setInternalProperty(desc, "Configurable", false);
    /* c. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments. */
    {O.DefineOwnProperty}(O, P, desc, true);
  }
  /* 3. Set the [[Extensible]] internal property of O to false. */
  setInternalProperty(O, "Extensible", false);
  /* 4. Return O. */
  return O;
}

/* 15.2.3.9 Object.freeze ( O ) */
function ObjectFreeze(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the freeze function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. For each named own property name P of O, */
  foreach (P : getOwnProperties(O)) {
    /* a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P. */
    desc := {O.GetOwnProperty}(O, P);
    /* b. If IsDataDescriptor(desc) is true, then */
    if (IsDataPropertyDescriptor(desc) = true)
      /* i. If desc.[[Writable]] is true, set desc.[[Writable]] to false. */
      if (desc.Writable = true)
        setInternalProperty(desc, "Writable", false);
    /* c. If desc.[[Configurable]] is true, set desc.[[Configurable]] to false. */
    if (desc.Configurable = true)
      setInternalProperty(desc, "Configurable", false);
    /* d. Call the [[DefineOwnProperty]] internal method of O with P, desc, and true as arguments. */
    {O.DefineOwnProperty}(O, P, desc, true);
  }
  /* 3. Set the [[Extensible]] internal property of O to false. */
  setInternalProperty(O, "Extensible", false);
  /* 4. Return O. */
  return O;
}

/* 15.2.3.10 Object.preventExtensions ( O ) */
function ObjectPreventExtensions(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the preventExtensions function is called, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Set the [[Extensible]] internal property of O to false. */
  setInternalProperty(O, "Extensible", false);
  /* 3. Return O. */
  return O;
}

/* 15.2.3.11 Object.isSealed ( O ) */
function ObjectIsSealed(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the isSealed function is called with argument O, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. For each named own property name P of O, */
  foreach (P : getOwnProperties(O)) {
    /* a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P. */
    desc := {O.GetOwnProperty}(O, P);
    /* b. If desc.[[Configurable]] is true, then return false. */
    if (desc.Configurable = true)
      return false;
  }
  /* 3. If the [[Extensible]] internal property of O is false, then return true. */
  if (getInternalProperty(O, "Extensible") = false)
    return true;
  /* 4. Otherwise, return false. */
  return false;
}

/* 15.2.3.12 Object.isFrozen ( O ) */
function ObjectIsFrozen(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the isFrozen function is called with argument O, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. For each named own property name P of O, */
  foreach (P : getOwnProperties(O)) {
    /* a. Let desc be the result of calling the [[GetOwnProperty]] internal method of O with P. */
    desc := {O.GetOwnProperty}(O, P);
    /* b. If IsDataDescriptor(desc) is true then */
    if (IsDataPropertyDescriptor(desc) = true)
      /* i. If desc.[[Writable]] is true, return false. */
      if (desc.Writable = true)
        return false;
    /* c. If desc.[[Configurable]] is true, then return false. */
    if (desc.Configurable = true)
      return false;
  }
  /* 3. If the [[Extensible]] internal property of O is false, then return true. */
  if (getInternalProperty(O, "Extensible") = false)
    return true;
  /* 4. Otherwise, return false. */
  return false;
}

/* 15.2.3.13 Object.isExtensible ( O ) */
function ObjectIsExtensible(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the isExtensible function is called with argument O, the following steps are taken: */

  /* 1. If Type(O) is not Object throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Return the Boolean value of the [[Extensible]] internal property of O. */
  return getInternalProperty(O, "Extensible");
}

/* 15.2.3.14 Object.keys ( O ) */
function ObjectKeys(globalObject, this, strict, params) {
  O := l_nth(params, 0);
  /* When the keys function is called with argument O, the following steps are taken: */

  /* 1. If the Type(O) is not Object, throw a TypeError exception. */
  if (!(Type(O) = "Object"))
    throw TypeErrorConstructorInternal();
  /* 2. Let n be the number of own enumerable properties of O */
  n := l_len getOwnEnumerableProperties(O);
  /* 3. Let array be the result of creating a new Object as if by the expression new Array(n) where Array is
        the standard built-in constructor with that name. */
  array := ArrayConstructor(globalObject, this, strict, []);
  /* 4. Let index be 0. */
  index := 0.;
  /* 5. For each own enumerable property of O whose name String is P */
  foreach (P : getOwnEnumerableProperties(O)) {
    /* a. Call the [[DefineOwnProperty]] internal method of array with arguments ToString(index), the
          PropertyDescriptor {[[Value]]: P, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true},
          and false. */
    {array.DefineOwnProperty}(array, ToString(index), newDataPropertyDescriptor(P), false);
    /* b. Increment index by 1. */
    index := index + 1.;
  }
  /* 6. Return array. */
  return array;

  /* If an implementation defines a specific order of enumeration for the for-in statement, that same enumeration
    order must be used in step 5 of this algorithm. */
}



/* 15.2.4.2 Object.prototype.toString ( ) */
function ObjectPrototypeToString(globalObject, this, strict, params) {
  /* When the toString method is called, the following steps are taken: */

  /* 1. If the this value is undefined, return "[object Undefined]". */
  if (this = 'undefined)
    return "[object Undefined]";
  /* 2. If the this value is null, return "[object Null]". */
  if (this = 'null)
    return "[object Null]";
  /* 3. Let O be the result of calling ToObject passing the this value as the argument. */
  O := ToObject(this);
  /* 4. Let class be the value of the [[Class]] internal property of O. */
  class := getInternalProperty(O, "Class");
  /* 5. Return the String value that is the result of concatenating the three Strings "[object ", class, and "]". */
  return s_concat ["[object ", class, "]"];
}

/* 15.2.4.3 Object.prototype.toLocaleString ( ) */
function ObjectPrototypeToLocaleString(globalObject, this, strict, params) {
  /* When the toLocaleString method is called, the following steps are taken: */

  /* 1. Let O be the result of calling ToObject passing the this value as the argument. */
  O := ToObject(this);
  /* 2. Let toString be the result of calling the [[Get]] internal method of O passing "toString" as the argument. */
  toString := {O.Get}(O, "toString");
  /* 3. If IsCallable(toString) is false, throw a TypeError exception. */
  if (IsCallable(toString) = false)
    throw TypeErrorConstructorInternal();
  /* 4. Return the result of calling the [[Call]] internal method of toString passing O as the this value and no
        arguments. */
  return {toString.Call}(null, null, toString, O, []);

  /* NOTE 1 This function is provided to give all Objects a generic toLocaleString interface, even though not all may
            use it. Currently, Array, Number, and Date provide their own locale-sensitive toLocaleString methods. */

  /* NOTE 2 The first parameter to this function is likely to be used in a future version of this standard; it is recommended
            that implementations do not use this parameter position for anything else. */
}

/* 15.2.4.4 Object.prototype.valueOf ( ) */
function ObjectPrototypeValueOf(globalObject, this, strict, params) {
  /* When the valueOf method is called, the following steps are taken: */

  /* 1. Let O be the result of calling ToObject passing the this value as the argument. */
  O := ToObject(this);
  /* 2. If O is the result of calling the Object constructor with a host object (15.2.2.1), then */
  if (isHostObject(O, this))
    /* a. Return either O or another value such as the host object originally passed to the constructor. The
          specific result that is returned is implementation-defined. */
    return hostObjectValueOf(O, this);
  /* 3. Return O. */
  return O;
}

/* 15.2.4.5 Object.prototype.hasOwnProperty (V) */
function ObjectPrototypeHasOwnProperty(globalObject, this, strict, params) {
  V := l_nth(params, 0);
  /* When the hasOwnProperty method is called with argument V, the following steps are taken: */

  /* 1. Let P be ToString(V). */
  P := ToString(V);
  /* 2. Let O be the result of calling ToObject passing the this value as the argument. */
  O := ToObject(this);
  /* 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument. */
  desc := {O.GetOwnProperty}(O, P);
  /* 4. If desc is undefined, return false. */
  if (desc = 'undefined)
    return false;
  /* 5. Return true. */
  return true;

  /* NOTE 1 Unlike [[HasProperty]] (8.12.6), this method does not consider objects in the prototype chain. */

  /* NOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1
            in previous editions of this specification will continue to be thrown even if the this value is undefined or null. */
}

/* 15.2.4.6 Object.prototype.isPrototypeOf (V) */
function ObjectPrototypeIsPrototypeOf(globalObject, this, strict, params) {
  V := l_nth(params, 0);
  /* When the isPrototypeOf method is called with argument V, the following steps are taken: */

  /* 1. If V is not an object, return false. */
  if (!(Type(V) = "Object")) 
    return false;
  /* 2. Let O be the result of calling ToObject passing the this value as the argument. */
  O := ToObject(this);
  /* 3. Repeat */
  repeat {
    /* a. Let V be the value of the [[Prototype]] internal property of V. */
    V := getInternalProperty(V, "Prototype");
    /* b. if V is null, return false */
    if (V = 'null) return false;
    /* c. If O and V refer to the same object, return true. */
    if (sameObject(O, V)) return true;
  }

  /* NOTE The ordering of steps 1 and 2 is chosen to preserve the behaviour specified by previous editions of this
          specification for the case where V is not an object and the this value is undefined or null. */
}

/* 15.2.4.7 Object.prototype.propertyIsEnumerable (V) */
function ObjectPrototypePropertyIsEnumerable(globalObject, this, strict, params) {
  V := l_nth(params, 0);
  /* When the propertyIsEnumerable method is called with argument V, the following steps are taken: */

  /* 1. Let P be ToString(V). */
  P := ToString(V);
  /* 2. Let O be the result of calling ToObject passing the this value as the argument. */
  O := ToObject(this);
  /* 3. Let desc be the result of calling the [[GetOwnProperty]] internal method of O passing P as the argument. */
  desc := {O.GetOwnProperty}(O, P);
  /* 4. If desc is undefined, return false. */
  if (desc = 'undefined)
    return false;
  /* 5. Return the value of desc.[[Enumerable]]. */
  return getInternalProperty(desc, "Enumerable");

  /* NOTE 1 This method does not consider objects in the prototype chain. */
  /* NOTE 2 The ordering of steps 1 and 2 is chosen to ensure that any exception that would have been thrown by step 1
            in previous editions of this specification will continue to be thrown even if the this value is undefined or null. */
}


/* Auxiliary functions */
function getObjectPrototype(strict) {
  refObj := newPropertyReference(|global|, "Object", strict);
  ObjectObject := GetValue(refObj);
  refObjProto := newPropertyReference(ObjectObject, "prototype", strict);
  objectObjectProto := GetValue(refObjProto);
  return objectObjectProto;
}

function getObjectPrototypeToString(strict) {
  refObj := newPropertyReference(|global|, "Object", strict);
  ObjectObject := GetValue(refObj);
  refObjProto := newPropertyReference(ObjectObject, "prototype", strict);
  objectObjectProto := GetValue(refObjProto);
  refToStringObjProto := newPropertyReference(objectObjectProto, "toString", strict);
  objectObjectToString := GetValue(refToStringObjProto);
  return objectObjectToString;
}

function isHostObject(obj, this) {
  return false;
}

function hostObjectReturn() {
  assert false;
}

function hostObjectValueOf(obj, this) {
  return;
}

function getStringValue(P) {
  return P;
}
