/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* 11.9.3 The Abstract Equality Comparison Algorithm */
function AbstractEqualityComparison(x, y) {
  /* The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as
     follows: */

  /* 1. If Type(x) is the same as Type(y), then */
  if (Type(x) == Type(y)) {
    /* a. If Type(x) is Undefined, return true. */
    if (Type(x) == "Undefined")
      return true;
    /* b. If Type(x) is Null, return true. */
    if (Type(x) == "Null")
      return true;
    /* c. If Type(x) is Number, then */
    if (Type(x) == "Number") {
      /* i. If x is NaN, return false. */
      if (is_NaN (x)) return false;
      /* ii. If y is NaN, return false. */
      if (is_NaN (y)) return false;
      /* iii. If x is the same Number value as y, return true. */
      if (sameNumber(x, y)) return true;
      /* iv. If x is +0 and y is -0, return true. */
      if (isZero(x) && isMinusZero(y)) return true;
      /* v. If x is -0 and y is +0, return true. */
      if (isMinusZero(x) && isZero(y)) return true;
      /* vi. Return false. */
      return false;
    }
    /* d. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same
          length and same characters in corresponding positions). Otherwise, return false. */
    if (Type(x) == "String") {
      if (sameSequenceOfCharacters(x, y))
        return true;
      return false;
    }
    /* e. If Type(x) is Boolean, return true if x and y are both true or both false. Otherwise, return false. */
    if (Type(x) == "Boolean") {
      if ((x == true && y == true) || (x == false && y == false))
        return true;
      return false;
    }
    /* f. Return true if x and y refer to the same object. Otherwise, return false. */
    if (sameObject(x, y))
      return true;
    return false;
  }
  /* 2. If x is null and y is undefined, return true. */
  if ((x == 'null) && (y == 'undefined))
    return true;
  /* 3. If x is undefined and y is null, return true. */
  if ((x == 'undefined) && (y == 'null))
    return true;
  /* 4. If Type(x) is Number and Type(y) is String,
        return the result of the comparison x == ToNumber(y). */
  if ((Type(x) == "Number") && (Type(y) == "String"))
    return AbstractEqualityComparison(x, ToNumber(y));
  /* 5. If Type(x) is String and Type(y) is Number,
        return the result of the comparison ToNumber(x) == y. */
  if ((Type(x) == "String") && (Type(y) == "Number"))
    return AbstractEqualityComparison(ToNumber(x), y);
  /* 6. If Type(x) is Boolean, return the result of the comparison ToNumber(x) == y. */
  if (Type(x) == "Boolean")
    return AbstractEqualityComparison(ToNumber(x), y);
  /* 7. If Type(y) is Boolean, return the result of the comparison x == ToNumber(y). */
  if (Type(y) == "Boolean")
    return AbstractEqualityComparison(x, ToNumber(y));
  /* 8. If Type(x) is either String or Number and Type(y) is Object,
        return the result of the comparison x == ToPrimitive(y). */
  if (((Type(x) == "String") || (Type(x) == "Number")) && (Type(y) == "Object"))
    return AbstractEqualityComparison(x, ToPrimitive(y, null));
  /* 9. If Type(x) is Object and Type(y) is either String or Number,
        return the result of the comparison ToPrimitive(x) == y. */
  if ((Type(x) == "Object") && ((Type(y) == "String") || (Type(y) == "Number")))
    return AbstractEqualityComparison(ToPrimitive(x, null), y);
  /* 10. Return false. */
  return false;

  /* NOTE 1 Given the above definition of equality:
          * String comparison can be forced by: "" + a == "" + b.
          * Numeric comparison can be forced by: +a == +b.
          * Boolean comparison can be forced by: !a == !b. */

  /* NOTE 2 The equality operators maintain the following invariants:
          * A != B is equivalent to !(A == B).
          * A == B is equivalent to B == A, except in the order of evaluation of A and B. */

  /* NOTE 3 The equality operator is not always transitive. For example, there might be two distinct String objects, each
            representing the same String value; each String object would be considered equal to the String value by the == operator,
            but the two String objects would not be equal to each other. For Example:
          * new String("a") == "a" and "a" == new String("a")are both true.
          * new String("a") == new String("a") is false. */

  /* NOTE 4 Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to
            use the more complex, semantically oriented definitions of character or string equality and collating order defined in the
            Unicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as
            unequal. In effect this algorithm assumes that both Strings are already in normalised form. */
}

/* 11.9.6 The Strict Equality Comparison Algorithm */
function StrictEqualityComparison(x, y) {
  /* The comparison x === y, where x and y are values, produces true or false. Such a comparison is performed
     as follows: */

  /* 1. If Type(x) is different from Type(y), return false. */
  if (Type(x) != Type(y)) return false;
  /* 2. If Type(x) is Undefined, return true. */
  if (Type(x) == "Undefined") return true;
  /* 3. If Type(x) is Null, return true. */
  if (Type(x) == "Null") return true;
  /* 4. If Type(x) is Number, then */
  if (Type(x) == "Number") {
    /* a. If x is NaN, return false. */
    if (is_NaN (x)) return false;
    /* b. If y is NaN, return false. */
    if (is_NaN (y)) return false;
    /* c. If x is the same Number value as y, return true. */
    if (sameNumber(x, y)) return true;
    /* d. If x is +0 and y is -0, return true. */
    if (isZero(x) && isMinusZero(y)) return true;
    /* e. If x is -0 and y is +0, return true. */
    if (isMinusZero(x) && isZero(y)) return true;
    /* f. Return false. */
    return false;
  }
  /* 5. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and
        same characters in corresponding positions); otherwise, return false. */
  if (Type(x) == "String") {
    if (sameSequenceOfCharacters(x, y))
      return true;
    return false;
  }
  /* 6. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false. */
  if (Type(x) == "Boolean") {
    if ((x == true && y == true) || (x == false && y == false))
      return true;
    return false;
  }
  /* 7. Return true if x and y refer to the same object. Otherwise, return false. */
  if (sameObject(x, y))
    return true;
  return false;

  /* NOTE This algorithm differs from the SameValue Algorithm (9.12) in its treatment of signed zeroes and NaNs. */
}
