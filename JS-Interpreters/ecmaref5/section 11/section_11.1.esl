/* Copyright (C) 2022-2025 formalsec programmers
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/* Auxiliary functions */
function strip_initial_elisions(elements) {
  elementList := [];
  elisionOpt := [];
  foundAllInitialElisions := false;

  i := 0;
  while (i < l_len(elements)) {
    elem := l_nth(elements, i);
    if (!foundAllInitialElisions &&& elem == null) {
      elisionOpt := l_add(elisionOpt, elem);
    } else {
      if (!foundAllInitialElisions)
        foundAllInitialElisions := true;
      elementList := l_add(elementList, elem);
    }

    i := i + 1;
  }

  return [elementList, elisionOpt];
}

function strip_final_elisions(elements) {
  elementList := [];
  elisionOpt := [];
  foundAllFinalElisions := false;

  i := l_len(elements);
  while (i > 0) {
    elem := l_nth(elements, i - 1);
    if (!foundAllFinalElisions &&& elem == null) {
      elisionOpt := l_prepend(elem, elisionOpt);
    } else {
      if (!foundAllFinalElisions)
        foundAllFinalElisions := true;
      elementList := l_prepend(elem, elementList);
    }

    i := i - 1;
  }

  return [elementList, elisionOpt];
}

function rearrange_elementList(elements) {
  ret := strip_initial_elisions(elements);
  elementList := hd ret;
  elisionOpt := l_nth(ret, 1);

  if (l_len(elementList) == 1) {
    return {
      type: "Base",
      assignmentExpression: l_nth(elementList, 0),
      elisionOpt: elisionOpt
    };
  } else {
    assignmentExpression := l_nth(elements, (l_len(elements)) - 1);
    elements := l_remove_last (elements);
    ret := strip_final_elisions(elements);
    elementList := hd ret;
    elisionOpt := l_nth(ret, 1);

    return {
      type: "Recursive",
      elementList: elementList,
      elisionOpt: elisionOpt,
      assignmentExpression: assignmentExpression
    };
  }
}

function is_elisionopt_list(elems) {
  foreach (elision : elems)
    if (elision != null)
      return false;
  return true;
}
