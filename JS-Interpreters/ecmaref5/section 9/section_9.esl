/* 9.1 ToPrimitive */
function ToPrimitive(input, PreferredType) {
  /* The abstract operation ToPrimitive takes an input argument and an optional argument PreferredType. The
     abstract operation ToPrimitive converts its input argument to a non-Object type. If an object is capable of
     converting to more than one primitive type, it may use the optional hint PreferredType to favour that type.
     Conversion occurs according to Table 10: */
  switch (Type(input)) {
    case "Undefined": { return input }
    case "Null": { return input }
    case "Boolean": { return input }
    case "Number": { return input }
    case "String": { return input }
    case "Object": { return DefaultValue(input, PreferredType) }
  }
};

/* 9.2 ToBoolean */
function ToBoolean(argument) {
  /* The abstract operation ToBoolean converts its argument to a value of type Boolean according to Table 11: */
  switch (Type(argument)) {
    case "Undefined": { return false }
    case "Null": { return false }
    case "Boolean": { return argument }
    case "Number": {
      if ((argument = 0.) || (argument = -(0.)) || (is_NaN (argument))) {
        return false
      } else {
        return true
      }
    }
    case "String": {
      if (argument = "") {
        return false
      } else {
        return true
      }
    }
    case "Object": { return true }
  }
};

/* 9.3 ToNumber */
function ToNumber(argument) {
  /* The abstract operation ToNumber converts its argument to a value of type Number according to Table 12: */
  switch (Type(argument)) {
    case "Undefined": { return NaN }
    case "Null": { return 0. }
    case "Boolean": {
      if (argument = true) {
        return 1.
      };
      if (argument = false) {
        return 0.
      }
    }
    case "Number": {
      if (typeof argument = __$Int) {
        return int_to_float argument
      };
      return argument
    }
    case "String": {
      str := removeLeadingWhitespace(argument);
      str := removeTrailingWhitespace(str);
      return float_of_string str
    }
    case "Object": {
      /* Apply the following steps: */

      /* 1. Let primValue be ToPrimitive(input argument, hint Number). */
      primValue := ToPrimitive(argument, 'Number);
      /* 2. Return ToNumber(primValue). */
      return ToNumber(primValue)
    }
  }
};

/* 9.4 ToInteger */
function ToInteger(argument) {
  /* The abstract operation ToInteger converts its argument to an integral numeric value. This abstract operation
     functions as follows: */

  /* Let number be the result of calling ToNumber on the input argument. */
  num := ToNumber(argument);
  /* If number is NaN, return +0. */
  /* If number is +0, -0, +Infinity, or -Infinity, return number. */
  /* Return the result of computing sign(number) x floor(abs(number)). */
  return to_int(num)
};

/* 9.5 ToInt32: (Signed 32 Bit Integer) */
function ToInt32(argument) {
  /* The abstract operation ToInt32 converts its argument to one of 2^32 integer values in the range -2^31 through
    2^31 - 1, inclusive. This abstract operation functions as follows: */

  /* 1. Let number be the result of calling ToNumber on the input argument. */
  num := ToNumber(argument);
  /* 2. If number is NaN, +0, -0, +Infinity, or -Infinity, return +0. */
  /* 3. Let posInt be sign(number) * floor(abs(number)). */
  /* 4. Let int32bit be posInt modulo 2^32 ; that is, a finite integer value k of Number type with positive sign and less
        than 2^32 in magnitude such that the mathematical difference of posInt and k is mathematically an integer
        multiple of 2^32 . */
  /* 5. If int32bit is greater than or equal to 2^31 , return int32bit - 2^32 , otherwise return int32bit. */
  return to_int32(num)

  /* NOTE Given the above definition of ToInt32:
          * The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that
            value unchanged.
          * ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that +Infinity and -Infinity are
            mapped to +0.)
          * ToInt32 maps -0 to +0. */
};

/* 9.6 ToUint32: (Unsigned 32 Bit Integer) */
function ToUint32(argument) {
  /* The abstract operation ToUint32 converts its argument to one of 2^32 integer values in the range 0 through 2^32 - 1,
     inclusive. This abstraction operation functions as follows: */

  /* 1. Let number be the result of calling ToNumber on the input argument. */
  num := ToNumber(argument);
  /* 2. If number is NaN, +0, -0, +Infinity, or -Infinity, return +0. */
  /* 3. Let posInt be sign(number) x floor(abs(number)). */
  /* 4. Let int32bit be posInt modulo 2^32 ; that is, a finite integer value k of Number type with positive sign and less
        than 2^32 in magnitude such that the mathematical difference of posInt and k is mathematically an integer
        multiple of 2^32 . */
  /* 5. Return int32bit. */
  return to_uint32(num)

  /* NOTE Given the above definition of ToUint32:
          * Step 5 is the only difference between ToUint32 and ToInt32.
          * The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second
            application leaves that value unchanged.
          * ToUint32(ToInt32(x)) is equal to ToUint32(x) for all values of x. (It is to preserve this latter property
            that +Infinity and -Infinity are mapped to +0.)
          * ToUint32 maps -0 to +0. */
};

/* 9.7 ToUint16: (Unsigned 16 Bit Integer) */
function ToUint16(argument) {
  /* The abstract operation ToUint16 converts its argument to one of 2^16 integer values in the range 0 through 2^16 - 1,
     inclusive. This abstract operation functions as follows: */

  /* 1. Let number be the result of calling ToNumber on the input argument. */
  num := ToNumber(argument);
  /* 2. If number is NaN, +0, -0, +Infinity, or -Infinity, return +0. */
  /* 3. Let posInt be sign(number) x floor(abs(number)). */
  /* 4. Let int16bit be posInt modulo 2 16 ; that is, a finite integer value k of Number type with positive sign and less
        than 2 16 in magnitude such that the mathematical difference of posInt and k is mathematically an integer
        multiple of 2^16 . */
  /* 5. Return int16bit. */
  return to_uint16(num)

  /* NOTE Given the above definition of ToUint16:
     * The substitution of 2 16 for 2 32 in step 4 is the only difference between ToUint32 and ToUint16.
     * ToUint16 maps -0 to +0 */
};

/* 9.8 ToString */
function ToString(argument) {
  /* The abstract operation ToString converts its argument to a value of type String according to Table 13: */
  switch(Type(argument)) {
    case "Undefined": { return "undefined" }
    case "Null": { return "null" }
    case "Boolean": {
      if (argument = true) {
        return "true"
      };
      if (argument = false) {
        return "false"
      }
    }
    case "Number": { return float_to_string argument }
    case "String": { return argument }
    case "Object": {
      /* Apply the following steps: */
      /* 1. Let primValue be ToPrimitive(input argument, hint String). */
      primValue := ToPrimitive(argument, 'String);
      /* 2. Return ToString(primValue). */
      return ToString(primValue)
    }
  }
};

/* 9.9 ToObject */
function ToObject(argument) {
 /* The abstract operation ToObject converts its argument to a value of type Object according to Table 14: */
  switch(Type(argument)) {
    case "Undefined": { throw TypeErrorConstructorInternal() }
    case "Null": { throw TypeErrorConstructorInternal() }
    case "Boolean": { return BooleanConstructor(|global|, true, false, [argument]) }
    case "Number": { return NumberConstructor(|global|, true, false, [argument]) }
    case "String": { return StringConstructor(|global|, true, false, [argument]) }
    case "Object": { return argument }
  }
};

/* 9.10 CheckObjectCoercible */
function CheckObjectCoercible(argument) {
  /* The abstract operation CheckObjectCoercible throws an error if its argument is a value that cannot be
    converted to an Object using ToObject. It is defined by Table 15: */
  switch (Type(argument)) {
    case "Undefined": { throw TypeErrorConstructorInternal() }
    case "Null": { throw TypeErrorConstructorInternal() }
    case "Boolean": { return }
    case "Number": { return }
    case "String": { return }
    case "Object": { return }
  }
};

/* 9.11 IsCallable */
function IsCallable(argument) {
  /* The abstract operation IsCallable determines if its argument, which must be an ECMAScript language value,
     is a callable function Object according to Table 16: */
  switch (Type(argument)) {
    case "Undefined": { return false }
    case "Null": { return false }
    case "Boolean": { return false }
    case "Number": { return false }
    case "String": { return false }
    case "Object": {
      if ("Call" in_obj argument) {
        return true
      } else {
        return false
      }
    }
  }
}
