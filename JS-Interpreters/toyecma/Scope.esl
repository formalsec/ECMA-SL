function Scope(thisBinding: JSObject_t, globalObject: JSObject_t) {
  scope: JSScope_t := {
    store: {},
    parent: null,
    thisBinding: thisBinding,
    globalObject: globalObject
  };
  return scope
};


function _initScopeVdecls(scope: JSScope_t, vdecls: any): void {      /* FIXME: replace by list type */
  foreach(vdecl : vdecls) {
    scope.store[vdecl] := 'undefined
  }; 
  return 
};

function _initScopeFdecls(scope: JSScope_t, fdecls: any): void {      /* FIXME: replace by list type */
  foreach(fdecl : fdecls) {
    match fdecl with
    | { type: "FunctionDeclaration", id: id, params: params, body: code } -> {
        match id with
        | { type: "Identifier", name: name } -> {
            scope.store[name] := FunctionObject(name, params, code, scope)
          }
        | default -> { raiseError ("Unsuported function identifier", id) }
      }
    | default -> { raiseError ("Unsuported function declaration", fdecl) }
  };
  return 
};

function initScope(scope: JSScope_t, vdecls: any, fdecls: any): void {    /* FIXME: replace by list type */
  _initScopeVdecls(scope, vdecls);
  _initScopeFdecls(scope, fdecls); 
  return 
};


function getThisBinding(scope: JSScope_t): JSObject_t {
  return scope.thisBinding
};

function resolveName(scope: JSScope_t, name: string) {
  if (name in_obj scope.store) {
    return scope.store[name]
  } else {
    parent: JSScope_t | null := scope.parent;
    if (parent = null) {
      globalObject := scope.globalObject;
      return {globalObject.resolveProperty}(globalObject, name)
    } else {
      return resolveName(parent, name)
    }
  }
};

function updateScope(currScope: JSScope_t, scope: JSScope_t, name: string, val: unknown): void {
  if (name in_obj scope.store) {
    scope.store[name] := val
  } else {
    parent: JSScope_t | null := scope.parent;
    if (parent = null) {
      currScope.store[name] := val
    } else {
      updateScope(currScope, parent, name, val)
    }
  }; 
  return
};

function extendScope(scope: JSScope_t, thisBinding: JSObject_t) {
  newScope: JSScope_t := Scope(thisBinding, scope.globalObject);
  newScope.parent := scope;
  return newScope
}
