function _sigma() : sigma[type] { type: "foo", foo1: boolean, foo2: boolean } | { type: "bar", bar?: int } {
	return { type: "foo", foo1: true, foo2: true }
};

function main() {
	x: sigma[type] { type: "foo", foo1: boolean, foo2: boolean } | { type: "bar", bar?: int } := _sigma();

	match x with
	| { type: "foo", foo1: 10 } -> {}									/* BadValPattern: boolean <- 10 */
	| { type: "foo", foo1: None } -> {}								/* BadNonePattern: foo1 */
	| { type: "bar", bar: None } -> {}								/* Valid */
	| { type: "foo", foo1: true, foo2: true } -> {}		/* Valid */
	| { type: "foo", foo1: true, foo2: foo2 } -> {
		test2t: true := foo2;														/* BadValue: true <- boolean */
		test2f: false := foo2														/* BadValue: false <- boolean */
	}
	| { type: "foo", foo1: true } -> {}								/* UnusedPatternCase */
	| { type: "foo", foo1: foo1, foo2: true } -> {
		test1f: false := foo1;													/* Valid */
		test1t: true := foo1														/* BadValue: true <- false */
	}
	| { type: "bar", bar: bar }  -> {
		test: int := bar;																/* Valid */
		test: undefined := bar													/* BadValue: undefined <- int */
	};
	/* MissingPatternCase: { foo1: false, foo2: false, type: "foo" } */

	return 0
}