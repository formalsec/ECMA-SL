function _sigma() : sigma[type] { type: "foo", foo: int } | { type: "bar" } {
	return { type: "foo", foo: 10 }
};

function main() {
	x: int := 10;
	match x with | default -> {};									/* BadSigma: number */
	match 10 with | default -> {};								/* BadSigma: 10 */
	match null with | default -> {};							/* BadSigma: null */

	y: sigma[type] { type: "foo", foo: int } | { type: "bar" } := _sigma();
	match y with																	/* Valid */
	| { type: "foo" } -> {}												/* Valid */
	| { type: "foo", foo: foo, foo: 10 } -> {}		/* DuplicatedPatternFld: foo */
	| { type: "bar", type: "bar" } -> {}					/* DuplicatedPatternFld: type */
	| { type: "bar", foo: foo } -> {};						/* BadLookup: y<bar>.foo */

	return 0
}
