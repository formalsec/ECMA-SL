import "ES5_interpreter/section 9/section_9.esl";
import "ES5_interpreter/section 9/section_9.12.esl";
import "ES5_interpreter/section 8/section_8.esl";
import "ES5_interpreter/section 8/section_8.6.esl";
import "ES5_interpreter/section 8/section_8.7.esl";
import "ES5_interpreter/section 8/section_8.9.esl";
import "ES5_interpreter/section 8/section_8.10.esl";
import "ES5_interpreter/section 8/section_8.12.esl";
import "ES5_interpreter/section 10/section_10.2.esl";
import "ES5_interpreter/section 10/section_10.3.esl";
import "ES5_interpreter/section 10/section_10.4.esl";
import "ES5_interpreter/section 10/section_10.5.esl";
import "ES5_interpreter/section 13/section_13.esl";
import "ES5_interpreter/section 15/section_15.esl";
import "ES5_interpreter/section 15/section_15.1.esl";
import "ES5_interpreter/section 15/section_15.2.esl";
import "ES5_interpreter/section 15/section_15.3.esl";
import "ES5_interpreter/section 15/section_15.4.esl";
import "ES5_interpreter/section 15/section_15.6.esl";
import "ES5_interpreter/section 15/section_15.7.esl";
import "ES5_interpreter/section 15/section_15.11.esl";
import "ES5_interpreter/section 15/section_15.12.esl";
import "ES5_interpreter/extras/section_extras.esl";
import "ES5_interpreter/section 15/section_15.5.esl";


/* TESTING FUNCTIONS */

/* string */

function testString(global) {
  S := String(global, null, false, [23123.]);

  return (S = "23123")
};

/* StringConstructor */
function testStringConstructor(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  pv := sto.PrimitiveValue;

  return (pv = "HELLO world ! HELLO")
};



/* StringfromCharCode */
function testStringFromCharCode(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringfromCharCode(null, sto, false, [72., 69., 76., 76., 79.]);

  return (ret = "HELLO")
};

/* StringPrototypetoString */
function testStringPrototypetoString(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypetoString(null, sto, false, []);

  return (ret = "HELLO world ! HELLO")
};

/* StringPrototypevalueOf */
function testStringPrototypevalueOf(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypevalueOf(null, sto, false, []);

  return (ret = "HELLO world ! HELLO")
};

/* StringPrototypecharAt */
function testStringPrototypecharAt(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypecharAt(null, sto, false, [3.]);

  return (ret = "L")
};

/* StringPrototypecharCodeAt */
function testStringcharCodeAt(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypecharCodeAt(null, sto, false, [4.]);

  return (ret = 79.)
};

/* StringPrototypeconcat */
function testStringPrototypeconcat(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypeconcat(null, sto, false, [" WORLD!"]);

  return (ret = "HELLO world ! HELLO WORLD!")
};

/* StringPrototypeindexOf */
function testStringPrototypeindexOf(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypeindexOf(null,sto,false, ["LLO",2.]);

  return (ret = 2)
};

/* StringPrototypelastIndexOfindexOf */
function testStringPrototypelastIndexOf(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypelastIndexOf(null,sto,false, ["LLO",25.]);

  return (ret = 16)
};

/* StringPrototypelocaleCompare */
function testStringPrototypelocaleCompare(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypelocaleCompare(global, sto, false, ["HELLO world ! HELLO!"]);

  return (ret = 1)
};

/* StringPrototypematch */
function testStringPrototypematch(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);

  return false
};

/* StringPrototypereplace */
function testStringPrototypereplace(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);

  return false
};

/* StringPrototypesearch */
function testtringPrototypesearch(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);

  return false
};

/* StringPrototypeslice */
function testStringPrototypeslice(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypeslice(global, sto, false, [0.,5.]);

  return (ret = "HELLO")
};

/* StringPrototypesplit */
function testStringPrototypesplit(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);


  return false
};

/* StringPrototypesubstring */
function testStringPrototypesubstring(global) {
  sto := StringConstructor(global, null, false, [ "HELLO world ! HELLO" ]);
  ret := StringPrototypesubstring(global, sto, false, [0.,5.]);

  return (ret = "HELLO")
};

/* StringPrototypetoLowerCase */
function testStringPrototypetoLowerCase(global) {
  sto := StringConstructor(global, null, false, [ "HELlO" ]);
  ret := StringPrototypetoLowerCase(null, sto, false, []);

  return (ret = "hello")
};

/* StringPrototypetoLocaleLowerCase */
function testStringPrototypetoLocaleLowerCase(global) {
  sto := StringConstructor(global, null, false, [ "HELlO" ]);
  ret := StringPrototypetoLocaleLowerCase(null, sto, false, []);

  return (ret = "hello")
};

/* StringPrototypetoUpperCase */
function testStringPrototypetoUpperCase(global) {
  sto := StringConstructor(global, null, false, [ "Hello" ]);
  ret := StringPrototypetoUpperCase(null, sto, false, []);

  return (ret = "HELLO")
};

/* StringPrototypetoLocaleUpperCase */
function testStringPrototypetoLocaleUpperCase(global) {
  sto := StringConstructor(global, null, false, [ "Hello" ]);
  ret := StringPrototypetoLocaleUpperCase(null, sto, false, []);

  return (ret = "HELLO")
};

/* StringPrototypetrim */
function testStringPrototypetrim(global) {
  sto := StringConstructor(global, null, false, [ " HELLO world ! HELLO " ]);
  ret := StringPrototypetrim(null, sto, false, []);

  return (ret = "HELLO world ! HELLO")
};


function runTests(global, tests) {
  tests_len := l_len tests;
  i := 0;
  while (i < tests_len) {
    test_name := l_nth(tests, i);
    res := {test_name}(global);
    if (res = true) {
      print s_concat(["TEST '", test_name, "': PASS"])
    } else {
      print s_concat(["TEST '", test_name, "': FAIL"])
    };
    i := i + 1
  };
  return null
};

function main() {
  globalObject := initGlobalObject(false);

  |global| := globalObject;

  tests := ["testString",
  "testStringConstructor",
  "testStringFromCharCode",
  "testStringPrototypetoString",
  "testStringPrototypevalueOf",
  "testStringPrototypecharAt",
  "testStringcharCodeAt",
  "testStringPrototypeconcat",
  "testStringPrototypeindexOf",
  "testStringPrototypelastIndexOf",
  "testStringPrototypelocaleCompare",
  "testStringPrototypematch",
  "testStringPrototypereplace",
  "testtringPrototypesearch",
  "testStringPrototypeslice",
  "testStringPrototypesplit",
  "testStringPrototypesubstring",
  "testStringPrototypetoLowerCase",
  "testStringPrototypetoLocaleLowerCase",
  "testStringPrototypetoUpperCase",
  "testStringPrototypetoLocaleUpperCase",
  "testStringPrototypetrim"];

  runTests(globalObject, tests);

  return null
}
