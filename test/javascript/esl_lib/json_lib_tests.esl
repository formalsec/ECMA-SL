/**
 * Compile:
 * ./main.native -i test/json_lib_tests.esl -mode c -o output.esl
 * ./main.native -i output.esl -mode ci -h final_heap.json > output.log
 */

import "ES5_interpreter/ESL_Interpreter.esl";
import "ES5_interpreter/ES5_Reference_Interpreter.esl";

function testStringify1(global) {
  O1 := ObjectConstructor(|global|, 'null, false, [null]);
  refA := newPropertyReference(O1, "a", false);
  descA := newDataPropertyDescriptorFull(1., true, true, true);
  PutValue(refA, descA);

  O2 := ObjectConstructor(|global|, 'null, false, [null]);
  refC := newPropertyReference(O2, "c", false);
  descC := newDataPropertyDescriptorFull(2., true, true, true);
  PutValue(refC, descC);

  refB := newPropertyReference(O1, "b", false);
  descB := newDataPropertyDescriptorFull(O2, true, true, true);
  PutValue(refB, descB);

  str := jsonStringify(null, null, false, [O1, 'undefined, 'undefined]);
  print str;
  return str = "{\"a\":1,\"b\":{\"c\":2}}"
};

function testParse1(global) {
  str := "{\"a\":1,\"b\":{\"c\":2}}";

  obj := jsonParse(null, null, false, [str, 'null]);
  print obj.JSProperties;
  print obj.JSProperties.a.Value;
  a := (obj.JSProperties.a.Value = 1.);
  print obj.JSProperties.b;
  print obj.JSProperties.b.Value.JSProperties.c;
  b := (obj.JSProperties.b.Value.JSProperties.c.Value = 2.);

  return (a && b)
};

function testParse2(global) {
  str := "{\"a\":undefined,\"b\":{\"c\":2}}";

  obj := jsonParse(null, null, false, [str, 'null]);
  if (!(obj.message = "SyntaxError")) {
    return false
  } else {
    return true
  }
};

function reviver(globalobject, this, strict, args) {
  key := l_nth (args, 0);
  value := l_nth (args, 1);
  if (key = "a") {
    return value + 1.
  };
  return value
};
function testParse3(global) {
  str := "{\"a\":1,\"b\":{\"c\":2}}";
  funcObj := CreateFunctionObject(["key", "value"], "reviver", global, false, null);
  obj := jsonParse(null, null, false, [str, funcObj]);
  a := (obj.JSProperties.a.Value = 2.);
  b := (obj.JSProperties.b.Value.JSProperties.c.Value = 2.);

  return (a && b)
};

function runTests(global, tests) {
  tests_len := l_len tests;
  i := 0;
  while (i < tests_len) {
    test_name := l_nth(tests, i);
    res := {test_name}(global);
    if (res = true) {
      print s_concat(["TEST '", test_name, "': PASS"])
    } else {
      print s_concat(["TEST '", test_name, "': FAIL"])
    };
    i := i + 1
  };
  return null
};

function main() {
  globalObject := initGlobalObject(false);

  |global| := globalObject;

  tests := ["testStringify1",
            "testParse1",
            "testParse2",
            "testParse3"];

  runTests(globalObject, tests);

  return null
}

