Test input.with.js:
  $ js2esl input.with.js
  function buildAST () {
  __n0 := {  };
  __n0["type"] := "Program";
  __n0["sourceType"] := "script";
  __n2 := {  };
  __n2["type"] := "VariableDeclaration";
  __n4 := {  };
  __n4["type"] := "VariableDeclarator";
  __n5 := {  };
  __n5["type"] := "Identifier";
  __n5["name"] := "a";
  __n4["id"] := __n5;
  __n4["init"] := null;
  __n6 := {  };
  __n6["type"] := "VariableDeclarator";
  __n7 := {  };
  __n7["type"] := "Identifier";
  __n7["name"] := "b";
  __n6["id"] := __n7;
  __n6["init"] := null;
  __n3 := [ __n4, __n6 ];
  __n2["declarations"] := __n3;
  __n2["kind"] := "var";
  __n8 := {  };
  __n8["type"] := "VariableDeclaration";
  __n10 := {  };
  __n10["type"] := "VariableDeclarator";
  __n11 := {  };
  __n11["type"] := "Identifier";
  __n11["name"] := "obj";
  __n10["id"] := __n11;
  __n12 := {  };
  __n12["type"] := "ObjectExpression";
  __n14 := {  };
  __n14["type"] := "Property";
  __n15 := {  };
  __n15["type"] := "Identifier";
  __n15["name"] := "p1";
  __n14["key"] := __n15;
  __n16 := {  };
  __n16["type"] := "Literal";
  __n16["value"] := 2.;
  __n16["raw"] := "2";
  __n14["value"] := __n16;
  __n14["computed"] := false;
  __n14["kind"] := "init";
  __n14["shorthand"] := false;
  __n14["method"] := false;
  __n17 := {  };
  __n17["type"] := "Property";
  __n18 := {  };
  __n18["type"] := "Identifier";
  __n18["name"] := "p2";
  __n17["key"] := __n18;
  __n19 := {  };
  __n19["type"] := "Literal";
  __n19["value"] := "a";
  __n19["raw"] := "\"a\"";
  __n17["value"] := __n19;
  __n17["computed"] := false;
  __n17["kind"] := "init";
  __n17["shorthand"] := false;
  __n17["method"] := false;
  __n13 := [ __n14, __n17 ];
  __n12["properties"] := __n13;
  __n10["init"] := __n12;
  __n9 := [ __n10 ];
  __n8["declarations"] := __n9;
  __n8["kind"] := "var";
  __n20 := {  };
  __n20["type"] := "WithStatement";
  __n21 := {  };
  __n21["type"] := "Identifier";
  __n21["name"] := "obj";
  __n20["object"] := __n21;
  __n22 := {  };
  __n22["type"] := "BlockStatement";
  __n24 := {  };
  __n24["type"] := "ExpressionStatement";
  __n25 := {  };
  __n25["type"] := "AssignmentExpression";
  __n25["operator"] := "=";
  __n26 := {  };
  __n26["type"] := "Identifier";
  __n26["name"] := "a";
  __n25["left"] := __n26;
  __n27 := {  };
  __n27["type"] := "BinaryExpression";
  __n27["operator"] := "*";
  __n28 := {  };
  __n28["type"] := "Identifier";
  __n28["name"] := "p1";
  __n27["left"] := __n28;
  __n29 := {  };
  __n29["type"] := "Literal";
  __n29["value"] := 3.;
  __n29["raw"] := "3";
  __n27["right"] := __n29;
  __n25["right"] := __n27;
  __n24["expression"] := __n25;
  __n30 := {  };
  __n30["type"] := "IfStatement";
  __n31 := {  };
  __n31["type"] := "BinaryExpression";
  __n31["operator"] := "===";
  __n32 := {  };
  __n32["type"] := "Identifier";
  __n32["name"] := "p2";
  __n31["left"] := __n32;
  __n33 := {  };
  __n33["type"] := "Literal";
  __n33["value"] := "a";
  __n33["raw"] := "\"a\"";
  __n31["right"] := __n33;
  __n30["test"] := __n31;
  __n34 := {  };
  __n34["type"] := "BlockStatement";
  __n36 := {  };
  __n36["type"] := "ExpressionStatement";
  __n37 := {  };
  __n37["type"] := "AssignmentExpression";
  __n37["operator"] := "=";
  __n38 := {  };
  __n38["type"] := "Identifier";
  __n38["name"] := "b";
  __n37["left"] := __n38;
  __n39 := {  };
  __n39["type"] := "Literal";
  __n39["value"] := "correct";
  __n39["raw"] := "\"correct\"";
  __n37["right"] := __n39;
  __n36["expression"] := __n37;
  __n35 := [ __n36 ];
  __n34["body"] := __n35;
  __n40 := [  ];
  __n34["letDeclarations"] := __n40;
  __n41 := [  ];
  __n34["constDeclarations"] := __n41;
  __n30["consequent"] := __n34;
  __n42 := {  };
  __n42["type"] := "BlockStatement";
  __n44 := {  };
  __n44["type"] := "ExpressionStatement";
  __n45 := {  };
  __n45["type"] := "AssignmentExpression";
  __n45["operator"] := "=";
  __n46 := {  };
  __n46["type"] := "Identifier";
  __n46["name"] := "b";
  __n45["left"] := __n46;
  __n47 := {  };
  __n47["type"] := "Literal";
  __n47["value"] := "incorrect";
  __n47["raw"] := "\"incorrect\"";
  __n45["right"] := __n47;
  __n44["expression"] := __n45;
  __n43 := [ __n44 ];
  __n42["body"] := __n43;
  __n48 := [  ];
  __n42["letDeclarations"] := __n48;
  __n49 := [  ];
  __n42["constDeclarations"] := __n49;
  __n30["alternate"] := __n42;
  __n23 := [ __n24, __n30 ];
  __n22["body"] := __n23;
  __n50 := [  ];
  __n22["letDeclarations"] := __n50;
  __n51 := [  ];
  __n22["constDeclarations"] := __n51;
  __n20["body"] := __n22;
  __n1 := [ __n2, __n8, __n20 ];
  __n0["body"] := __n1;
  __n52 := [ "a", "b", "obj" ];
  __n0["variableDeclarations"] := __n52;
  __n53 := [  ];
  __n0["functionDeclarations"] := __n53;
  __n54 := [  ];
  __n0["letDeclarations"] := __n54;
  __n55 := [  ];
  __n0["constDeclarations"] := __n55;
  __n0["codeType"] := "global";
  __n0["strict"] := false;
  return __n0
  }
