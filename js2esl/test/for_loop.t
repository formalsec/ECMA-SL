Test for_loop.js:
  $ js2esl for_loop.js
  function buildAST () {
  __n0 := {  };
  __n0["type"] := "Program";
  __n0["sourceType"] := "script";
  __n2 := {  };
  __n2["type"] := "ExpressionStatement";
  __n3 := {  };
  __n3["type"] := "AssignmentExpression";
  __n3["operator"] := "=";
  __n4 := {  };
  __n4["type"] := "Identifier";
  __n4["name"] := "a1";
  __n3["left"] := __n4;
  __n5 := {  };
  __n5["type"] := "Literal";
  __n5["value"] := 0.;
  __n5["raw"] := "0";
  __n3["right"] := __n5;
  __n2["expression"] := __n3;
  __n6 := {  };
  __n6["type"] := "ForStatement";
  __n7 := {  };
  __n7["type"] := "AssignmentExpression";
  __n7["operator"] := "=";
  __n8 := {  };
  __n8["type"] := "Identifier";
  __n8["name"] := "i";
  __n7["left"] := __n8;
  __n9 := {  };
  __n9["type"] := "Literal";
  __n9["value"] := 3.;
  __n9["raw"] := "3";
  __n7["right"] := __n9;
  __n6["init"] := __n7;
  __n10 := {  };
  __n10["type"] := "BinaryExpression";
  __n10["operator"] := ">";
  __n11 := {  };
  __n11["type"] := "Identifier";
  __n11["name"] := "i";
  __n10["left"] := __n11;
  __n12 := {  };
  __n12["type"] := "Literal";
  __n12["value"] := 0.;
  __n12["raw"] := "0";
  __n10["right"] := __n12;
  __n6["test"] := __n10;
  __n13 := {  };
  __n13["type"] := "AssignmentExpression";
  __n13["operator"] := "=";
  __n14 := {  };
  __n14["type"] := "Identifier";
  __n14["name"] := "i";
  __n13["left"] := __n14;
  __n15 := {  };
  __n15["type"] := "BinaryExpression";
  __n15["operator"] := "-";
  __n16 := {  };
  __n16["type"] := "Identifier";
  __n16["name"] := "i";
  __n15["left"] := __n16;
  __n17 := {  };
  __n17["type"] := "Literal";
  __n17["value"] := 1.;
  __n17["raw"] := "1";
  __n15["right"] := __n17;
  __n13["right"] := __n15;
  __n6["update"] := __n13;
  __n18 := {  };
  __n18["type"] := "BlockStatement";
  __n20 := {  };
  __n20["type"] := "ExpressionStatement";
  __n21 := {  };
  __n21["type"] := "AssignmentExpression";
  __n21["operator"] := "=";
  __n22 := {  };
  __n22["type"] := "Identifier";
  __n22["name"] := "a1";
  __n21["left"] := __n22;
  __n23 := {  };
  __n23["type"] := "BinaryExpression";
  __n23["operator"] := "+";
  __n24 := {  };
  __n24["type"] := "Identifier";
  __n24["name"] := "a1";
  __n23["left"] := __n24;
  __n25 := {  };
  __n25["type"] := "Identifier";
  __n25["name"] := "i";
  __n23["right"] := __n25;
  __n21["right"] := __n23;
  __n20["expression"] := __n21;
  __n26 := {  };
  __n26["type"] := "IfStatement";
  __n27 := {  };
  __n27["type"] := "BinaryExpression";
  __n27["operator"] := ">";
  __n28 := {  };
  __n28["type"] := "Identifier";
  __n28["name"] := "a1";
  __n27["left"] := __n28;
  __n29 := {  };
  __n29["type"] := "Literal";
  __n29["value"] := 4.;
  __n29["raw"] := "4";
  __n27["right"] := __n29;
  __n26["test"] := __n27;
  __n30 := {  };
  __n30["type"] := "BlockStatement";
  __n32 := {  };
  __n32["type"] := "BreakStatement";
  __n32["label"] := null;
  __n31 := [ __n32 ];
  __n30["body"] := __n31;
  __n33 := [  ];
  __n30["letDeclarations"] := __n33;
  __n34 := [  ];
  __n30["constDeclarations"] := __n34;
  __n26["consequent"] := __n30;
  __n26["alternate"] := null;
  __n19 := [ __n20, __n26 ];
  __n18["body"] := __n19;
  __n35 := [  ];
  __n18["letDeclarations"] := __n35;
  __n36 := [  ];
  __n18["constDeclarations"] := __n36;
  __n6["body"] := __n18;
  __n1 := [ __n2, __n6 ];
  __n0["body"] := __n1;
  __n37 := [  ];
  __n0["variableDeclarations"] := __n37;
  __n38 := [  ];
  __n0["functionDeclarations"] := __n38;
  __n39 := [  ];
  __n0["letDeclarations"] := __n39;
  __n40 := [  ];
  __n0["constDeclarations"] := __n40;
  __n0["codeType"] := "global";
  __n0["strict"] := false;
  return __n0
  }
