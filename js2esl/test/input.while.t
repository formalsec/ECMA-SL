Test input.while.js:
  $ js2esl input.while.js
  function buildAST () {
  __n0 := {  };
  __n0["type"] := "Program";
  __n0["sourceType"] := "script";
  __n2 := {  };
  __n2["type"] := "ExpressionStatement";
  __n3 := {  };
  __n3["type"] := "AssignmentExpression";
  __n3["operator"] := "=";
  __n4 := {  };
  __n4["type"] := "Identifier";
  __n4["name"] := "a1";
  __n3["left"] := __n4;
  __n5 := {  };
  __n5["type"] := "Literal";
  __n5["value"] := 3.;
  __n5["raw"] := "3";
  __n3["right"] := __n5;
  __n2["expression"] := __n3;
  __n6 := {  };
  __n6["type"] := "ExpressionStatement";
  __n7 := {  };
  __n7["type"] := "AssignmentExpression";
  __n7["operator"] := "=";
  __n8 := {  };
  __n8["type"] := "Identifier";
  __n8["name"] := "a2";
  __n7["left"] := __n8;
  __n9 := {  };
  __n9["type"] := "Literal";
  __n9["value"] := 0.;
  __n9["raw"] := "0";
  __n7["right"] := __n9;
  __n6["expression"] := __n7;
  __n10 := {  };
  __n10["type"] := "WhileStatement";
  __n11 := {  };
  __n11["type"] := "BinaryExpression";
  __n11["operator"] := ">";
  __n12 := {  };
  __n12["type"] := "Identifier";
  __n12["name"] := "a1";
  __n11["left"] := __n12;
  __n13 := {  };
  __n13["type"] := "Identifier";
  __n13["name"] := "a2";
  __n11["right"] := __n13;
  __n10["test"] := __n11;
  __n14 := {  };
  __n14["type"] := "BlockStatement";
  __n16 := {  };
  __n16["type"] := "ExpressionStatement";
  __n17 := {  };
  __n17["type"] := "AssignmentExpression";
  __n17["operator"] := "=";
  __n18 := {  };
  __n18["type"] := "Identifier";
  __n18["name"] := "a2";
  __n17["left"] := __n18;
  __n19 := {  };
  __n19["type"] := "BinaryExpression";
  __n19["operator"] := "+";
  __n20 := {  };
  __n20["type"] := "Identifier";
  __n20["name"] := "a2";
  __n19["left"] := __n20;
  __n21 := {  };
  __n21["type"] := "Literal";
  __n21["value"] := 1.;
  __n21["raw"] := "1";
  __n19["right"] := __n21;
  __n17["right"] := __n19;
  __n16["expression"] := __n17;
  __n15 := [ __n16 ];
  __n14["body"] := __n15;
  __n22 := [  ];
  __n14["letDeclarations"] := __n22;
  __n23 := [  ];
  __n14["constDeclarations"] := __n23;
  __n10["body"] := __n14;
  __n24 := {  };
  __n24["type"] := "ExpressionStatement";
  __n25 := {  };
  __n25["type"] := "AssignmentExpression";
  __n25["operator"] := "=";
  __n26 := {  };
  __n26["type"] := "Identifier";
  __n26["name"] := "b1";
  __n25["left"] := __n26;
  __n27 := {  };
  __n27["type"] := "Literal";
  __n27["value"] := 3.;
  __n27["raw"] := "3";
  __n25["right"] := __n27;
  __n24["expression"] := __n25;
  __n28 := {  };
  __n28["type"] := "LabeledStatement";
  __n29 := {  };
  __n29["type"] := "Identifier";
  __n29["name"] := "while_label1";
  __n28["label"] := __n29;
  __n30 := {  };
  __n30["type"] := "WhileStatement";
  __n31 := {  };
  __n31["type"] := "BinaryExpression";
  __n31["operator"] := ">";
  __n32 := {  };
  __n32["type"] := "Identifier";
  __n32["name"] := "b1";
  __n31["left"] := __n32;
  __n33 := {  };
  __n33["type"] := "Literal";
  __n33["value"] := 0.;
  __n33["raw"] := "0";
  __n31["right"] := __n33;
  __n30["test"] := __n31;
  __n34 := {  };
  __n34["type"] := "BlockStatement";
  __n36 := {  };
  __n36["type"] := "ExpressionStatement";
  __n37 := {  };
  __n37["type"] := "AssignmentExpression";
  __n37["operator"] := "=";
  __n38 := {  };
  __n38["type"] := "Identifier";
  __n38["name"] := "b1";
  __n37["left"] := __n38;
  __n39 := {  };
  __n39["type"] := "BinaryExpression";
  __n39["operator"] := "-";
  __n40 := {  };
  __n40["type"] := "Identifier";
  __n40["name"] := "b1";
  __n39["left"] := __n40;
  __n41 := {  };
  __n41["type"] := "Literal";
  __n41["value"] := 1.;
  __n41["raw"] := "1";
  __n39["right"] := __n41;
  __n37["right"] := __n39;
  __n36["expression"] := __n37;
  __n42 := {  };
  __n42["type"] := "ExpressionStatement";
  __n43 := {  };
  __n43["type"] := "AssignmentExpression";
  __n43["operator"] := "=";
  __n44 := {  };
  __n44["type"] := "Identifier";
  __n44["name"] := "b2";
  __n43["left"] := __n44;
  __n45 := {  };
  __n45["type"] := "BinaryExpression";
  __n45["operator"] := "+";
  __n46 := {  };
  __n46["type"] := "Identifier";
  __n46["name"] := "b1";
  __n45["left"] := __n46;
  __n47 := {  };
  __n47["type"] := "Literal";
  __n47["value"] := 2.;
  __n47["raw"] := "2";
  __n45["right"] := __n47;
  __n43["right"] := __n45;
  __n42["expression"] := __n43;
  __n48 := {  };
  __n48["type"] := "WhileStatement";
  __n49 := {  };
  __n49["type"] := "BinaryExpression";
  __n49["operator"] := ">";
  __n50 := {  };
  __n50["type"] := "Identifier";
  __n50["name"] := "b2";
  __n49["left"] := __n50;
  __n51 := {  };
  __n51["type"] := "Literal";
  __n51["value"] := 0.;
  __n51["raw"] := "0";
  __n49["right"] := __n51;
  __n48["test"] := __n49;
  __n52 := {  };
  __n52["type"] := "BlockStatement";
  __n54 := {  };
  __n54["type"] := "IfStatement";
  __n55 := {  };
  __n55["type"] := "BinaryExpression";
  __n55["operator"] := "===";
  __n56 := {  };
  __n56["type"] := "BinaryExpression";
  __n56["operator"] := "/";
  __n57 := {  };
  __n57["type"] := "Identifier";
  __n57["name"] := "b2";
  __n56["left"] := __n57;
  __n58 := {  };
  __n58["type"] := "Literal";
  __n58["value"] := 2.;
  __n58["raw"] := "2";
  __n56["right"] := __n58;
  __n55["left"] := __n56;
  __n59 := {  };
  __n59["type"] := "Literal";
  __n59["value"] := 2.;
  __n59["raw"] := "2";
  __n55["right"] := __n59;
  __n54["test"] := __n55;
  __n60 := {  };
  __n60["type"] := "BreakStatement";
  __n60["label"] := "while_label1";
  __n54["consequent"] := __n60;
  __n54["alternate"] := null;
  __n61 := {  };
  __n61["type"] := "ExpressionStatement";
  __n62 := {  };
  __n62["type"] := "AssignmentExpression";
  __n62["operator"] := "=";
  __n63 := {  };
  __n63["type"] := "Identifier";
  __n63["name"] := "b2";
  __n62["left"] := __n63;
  __n64 := {  };
  __n64["type"] := "BinaryExpression";
  __n64["operator"] := "-";
  __n65 := {  };
  __n65["type"] := "Identifier";
  __n65["name"] := "b2";
  __n64["left"] := __n65;
  __n66 := {  };
  __n66["type"] := "Literal";
  __n66["value"] := 1.;
  __n66["raw"] := "1";
  __n64["right"] := __n66;
  __n62["right"] := __n64;
  __n61["expression"] := __n62;
  __n53 := [ __n54, __n61 ];
  __n52["body"] := __n53;
  __n67 := [  ];
  __n52["letDeclarations"] := __n67;
  __n68 := [  ];
  __n52["constDeclarations"] := __n68;
  __n48["body"] := __n52;
  __n35 := [ __n36, __n42, __n48 ];
  __n34["body"] := __n35;
  __n69 := [  ];
  __n34["letDeclarations"] := __n69;
  __n70 := [  ];
  __n34["constDeclarations"] := __n70;
  __n30["body"] := __n34;
  __n28["body"] := __n30;
  __n1 := [ __n2, __n6, __n10, __n24, __n28 ];
  __n0["body"] := __n1;
  __n71 := [  ];
  __n0["variableDeclarations"] := __n71;
  __n72 := [  ];
  __n0["functionDeclarations"] := __n72;
  __n73 := [  ];
  __n0["letDeclarations"] := __n73;
  __n74 := [  ];
  __n0["constDeclarations"] := __n74;
  __n0["codeType"] := "global";
  __n0["strict"] := false;
  return __n0
  }
