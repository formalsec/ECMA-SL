Test if_stmt.js:
  $ js2esl if_stmt.js
  function buildAST () {
  __n0 := {  };
  __n0["type"] := "Program";
  __n0["sourceType"] := "script";
  __n2 := {  };
  __n2["type"] := "ExpressionStatement";
  __n3 := {  };
  __n3["type"] := "AssignmentExpression";
  __n3["operator"] := "=";
  __n4 := {  };
  __n4["type"] := "Identifier";
  __n4["name"] := "a1";
  __n3["left"] := __n4;
  __n5 := {  };
  __n5["type"] := "Literal";
  __n5["value"] := 3.;
  __n5["raw"] := "3";
  __n3["right"] := __n5;
  __n2["expression"] := __n3;
  __n6 := {  };
  __n6["type"] := "ExpressionStatement";
  __n7 := {  };
  __n7["type"] := "AssignmentExpression";
  __n7["operator"] := "=";
  __n8 := {  };
  __n8["type"] := "Identifier";
  __n8["name"] := "a2";
  __n7["left"] := __n8;
  __n9 := {  };
  __n9["type"] := "Literal";
  __n9["value"] := 6.;
  __n9["raw"] := "6";
  __n7["right"] := __n9;
  __n6["expression"] := __n7;
  __n10 := {  };
  __n10["type"] := "IfStatement";
  __n11 := {  };
  __n11["type"] := "BinaryExpression";
  __n11["operator"] := ">";
  __n12 := {  };
  __n12["type"] := "Identifier";
  __n12["name"] := "a1";
  __n11["left"] := __n12;
  __n13 := {  };
  __n13["type"] := "Identifier";
  __n13["name"] := "a2";
  __n11["right"] := __n13;
  __n10["test"] := __n11;
  __n14 := {  };
  __n14["type"] := "BlockStatement";
  __n16 := {  };
  __n16["type"] := "ExpressionStatement";
  __n17 := {  };
  __n17["type"] := "AssignmentExpression";
  __n17["operator"] := "=";
  __n18 := {  };
  __n18["type"] := "Identifier";
  __n18["name"] := "a3";
  __n17["left"] := __n18;
  __n19 := {  };
  __n19["type"] := "BinaryExpression";
  __n19["operator"] := "/";
  __n20 := {  };
  __n20["type"] := "Identifier";
  __n20["name"] := "a1";
  __n19["left"] := __n20;
  __n21 := {  };
  __n21["type"] := "Identifier";
  __n21["name"] := "a2";
  __n19["right"] := __n21;
  __n17["right"] := __n19;
  __n16["expression"] := __n17;
  __n15 := [ __n16 ];
  __n14["body"] := __n15;
  __n22 := [  ];
  __n14["letDeclarations"] := __n22;
  __n23 := [  ];
  __n14["constDeclarations"] := __n23;
  __n10["consequent"] := __n14;
  __n24 := {  };
  __n24["type"] := "BlockStatement";
  __n26 := {  };
  __n26["type"] := "ExpressionStatement";
  __n27 := {  };
  __n27["type"] := "AssignmentExpression";
  __n27["operator"] := "=";
  __n28 := {  };
  __n28["type"] := "Identifier";
  __n28["name"] := "a3";
  __n27["left"] := __n28;
  __n29 := {  };
  __n29["type"] := "BinaryExpression";
  __n29["operator"] := "/";
  __n30 := {  };
  __n30["type"] := "Identifier";
  __n30["name"] := "a2";
  __n29["left"] := __n30;
  __n31 := {  };
  __n31["type"] := "Identifier";
  __n31["name"] := "a1";
  __n29["right"] := __n31;
  __n27["right"] := __n29;
  __n26["expression"] := __n27;
  __n25 := [ __n26 ];
  __n24["body"] := __n25;
  __n32 := [  ];
  __n24["letDeclarations"] := __n32;
  __n33 := [  ];
  __n24["constDeclarations"] := __n33;
  __n10["alternate"] := __n24;
  __n1 := [ __n2, __n6, __n10 ];
  __n0["body"] := __n1;
  __n34 := [  ];
  __n0["variableDeclarations"] := __n34;
  __n35 := [  ];
  __n0["functionDeclarations"] := __n35;
  __n36 := [  ];
  __n0["letDeclarations"] := __n36;
  __n37 := [  ];
  __n0["constDeclarations"] := __n37;
  __n0["codeType"] := "global";
  __n0["strict"] := false;
  return __n0
  }
