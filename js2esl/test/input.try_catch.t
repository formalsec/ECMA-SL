Test input.try_catch.js:
  $ js2esl input.try_catch.js
  function buildAST () {
  __n0 := {  };
  __n0["type"] := "Program";
  __n0["sourceType"] := "script";
  __n2 := {  };
  __n2["type"] := "VariableDeclaration";
  __n4 := {  };
  __n4["type"] := "VariableDeclarator";
  __n5 := {  };
  __n5["type"] := "Identifier";
  __n5["name"] := "a";
  __n4["id"] := __n5;
  __n4["init"] := null;
  __n6 := {  };
  __n6["type"] := "VariableDeclarator";
  __n7 := {  };
  __n7["type"] := "Identifier";
  __n7["name"] := "b";
  __n6["id"] := __n7;
  __n6["init"] := null;
  __n8 := {  };
  __n8["type"] := "VariableDeclarator";
  __n9 := {  };
  __n9["type"] := "Identifier";
  __n9["name"] := "c";
  __n8["id"] := __n9;
  __n8["init"] := null;
  __n10 := {  };
  __n10["type"] := "VariableDeclarator";
  __n11 := {  };
  __n11["type"] := "Identifier";
  __n11["name"] := "d";
  __n10["id"] := __n11;
  __n10["init"] := null;
  __n3 := [ __n4, __n6, __n8, __n10 ];
  __n2["declarations"] := __n3;
  __n2["kind"] := "var";
  __n12 := {  };
  __n12["type"] := "TryStatement";
  __n13 := {  };
  __n13["type"] := "BlockStatement";
  __n15 := {  };
  __n15["type"] := "TryStatement";
  __n16 := {  };
  __n16["type"] := "BlockStatement";
  __n18 := {  };
  __n18["type"] := "ExpressionStatement";
  __n19 := {  };
  __n19["type"] := "AssignmentExpression";
  __n19["operator"] := "=";
  __n20 := {  };
  __n20["type"] := "Identifier";
  __n20["name"] := "a";
  __n19["left"] := __n20;
  __n21 := {  };
  __n21["type"] := "Literal";
  __n21["value"] := "inside try try";
  __n21["raw"] := "\"inside try try\"";
  __n19["right"] := __n21;
  __n18["expression"] := __n19;
  __n22 := {  };
  __n22["type"] := "ThrowStatement";
  __n23 := {  };
  __n23["type"] := "Literal";
  __n23["value"] := "Error";
  __n23["raw"] := "\"Error\"";
  __n22["argument"] := __n23;
  __n17 := [ __n18, __n22 ];
  __n16["body"] := __n17;
  __n24 := [  ];
  __n16["letDeclarations"] := __n24;
  __n25 := [  ];
  __n16["constDeclarations"] := __n25;
  __n15["block"] := __n16;
  __n26 := {  };
  __n26["type"] := "CatchClause";
  __n27 := {  };
  __n27["type"] := "Identifier";
  __n27["name"] := "ex";
  __n26["param"] := __n27;
  __n28 := {  };
  __n28["type"] := "BlockStatement";
  __n30 := {  };
  __n30["type"] := "ExpressionStatement";
  __n31 := {  };
  __n31["type"] := "AssignmentExpression";
  __n31["operator"] := "=";
  __n32 := {  };
  __n32["type"] := "Identifier";
  __n32["name"] := "b";
  __n31["left"] := __n32;
  __n33 := {  };
  __n33["type"] := "Literal";
  __n33["value"] := "inside try catch";
  __n33["raw"] := "\"inside try catch\"";
  __n31["right"] := __n33;
  __n30["expression"] := __n31;
  __n34 := {  };
  __n34["type"] := "ThrowStatement";
  __n35 := {  };
  __n35["type"] := "Identifier";
  __n35["name"] := "ex";
  __n34["argument"] := __n35;
  __n29 := [ __n30, __n34 ];
  __n28["body"] := __n29;
  __n36 := [  ];
  __n28["letDeclarations"] := __n36;
  __n37 := [  ];
  __n28["constDeclarations"] := __n37;
  __n26["body"] := __n28;
  __n38 := [ "ex" ];
  __n26["paramsNames"] := __n38;
  __n15["handler"] := __n26;
  __n39 := {  };
  __n39["type"] := "BlockStatement";
  __n41 := {  };
  __n41["type"] := "ExpressionStatement";
  __n42 := {  };
  __n42["type"] := "AssignmentExpression";
  __n42["operator"] := "=";
  __n43 := {  };
  __n43["type"] := "Identifier";
  __n43["name"] := "c";
  __n42["left"] := __n43;
  __n44 := {  };
  __n44["type"] := "Literal";
  __n44["value"] := "inside try finally";
  __n44["raw"] := "\"inside try finally\"";
  __n42["right"] := __n44;
  __n41["expression"] := __n42;
  __n40 := [ __n41 ];
  __n39["body"] := __n40;
  __n45 := [  ];
  __n39["letDeclarations"] := __n45;
  __n46 := [  ];
  __n39["constDeclarations"] := __n46;
  __n15["finalizer"] := __n39;
  __n14 := [ __n15 ];
  __n13["body"] := __n14;
  __n47 := [  ];
  __n13["letDeclarations"] := __n47;
  __n48 := [  ];
  __n13["constDeclarations"] := __n48;
  __n12["block"] := __n13;
  __n49 := {  };
  __n49["type"] := "CatchClause";
  __n50 := {  };
  __n50["type"] := "Identifier";
  __n50["name"] := "ex";
  __n49["param"] := __n50;
  __n51 := {  };
  __n51["type"] := "BlockStatement";
  __n53 := {  };
  __n53["type"] := "ExpressionStatement";
  __n54 := {  };
  __n54["type"] := "AssignmentExpression";
  __n54["operator"] := "=";
  __n55 := {  };
  __n55["type"] := "Identifier";
  __n55["name"] := "d";
  __n54["left"] := __n55;
  __n56 := {  };
  __n56["type"] := "Literal";
  __n56["value"] := "inside catch";
  __n56["raw"] := "\"inside catch\"";
  __n54["right"] := __n56;
  __n53["expression"] := __n54;
  __n52 := [ __n53 ];
  __n51["body"] := __n52;
  __n57 := [  ];
  __n51["letDeclarations"] := __n57;
  __n58 := [  ];
  __n51["constDeclarations"] := __n58;
  __n49["body"] := __n51;
  __n59 := [ "ex" ];
  __n49["paramsNames"] := __n59;
  __n12["handler"] := __n49;
  __n12["finalizer"] := null;
  __n60 := {  };
  __n60["type"] := "VariableDeclaration";
  __n62 := {  };
  __n62["type"] := "VariableDeclarator";
  __n63 := {  };
  __n63["type"] := "Identifier";
  __n63["name"] := "e";
  __n62["id"] := __n63;
  __n62["init"] := null;
  __n61 := [ __n62 ];
  __n60["declarations"] := __n61;
  __n60["kind"] := "var";
  __n64 := {  };
  __n64["type"] := "TryStatement";
  __n65 := {  };
  __n65["type"] := "BlockStatement";
  __n67 := {  };
  __n67["type"] := "TryStatement";
  __n68 := {  };
  __n68["type"] := "BlockStatement";
  __n70 := {  };
  __n70["type"] := "ThrowStatement";
  __n71 := {  };
  __n71["type"] := "Literal";
  __n71["value"] := "Throw in try try";
  __n71["raw"] := "\"Throw in try try\"";
  __n70["argument"] := __n71;
  __n69 := [ __n70 ];
  __n68["body"] := __n69;
  __n72 := [  ];
  __n68["letDeclarations"] := __n72;
  __n73 := [  ];
  __n68["constDeclarations"] := __n73;
  __n67["block"] := __n68;
  __n74 := {  };
  __n74["type"] := "CatchClause";
  __n75 := {  };
  __n75["type"] := "Identifier";
  __n75["name"] := "ex";
  __n74["param"] := __n75;
  __n76 := {  };
  __n76["type"] := "BlockStatement";
  __n78 := {  };
  __n78["type"] := "ThrowStatement";
  __n79 := {  };
  __n79["type"] := "Literal";
  __n79["value"] := "Throw in try catch";
  __n79["raw"] := "\"Throw in try catch\"";
  __n78["argument"] := __n79;
  __n77 := [ __n78 ];
  __n76["body"] := __n77;
  __n80 := [  ];
  __n76["letDeclarations"] := __n80;
  __n81 := [  ];
  __n76["constDeclarations"] := __n81;
  __n74["body"] := __n76;
  __n82 := [ "ex" ];
  __n74["paramsNames"] := __n82;
  __n67["handler"] := __n74;
  __n83 := {  };
  __n83["type"] := "BlockStatement";
  __n85 := {  };
  __n85["type"] := "ThrowStatement";
  __n86 := {  };
  __n86["type"] := "Literal";
  __n86["value"] := "Throw in finally";
  __n86["raw"] := "\"Throw in finally\"";
  __n85["argument"] := __n86;
  __n84 := [ __n85 ];
  __n83["body"] := __n84;
  __n87 := [  ];
  __n83["letDeclarations"] := __n87;
  __n88 := [  ];
  __n83["constDeclarations"] := __n88;
  __n67["finalizer"] := __n83;
  __n89 := {  };
  __n89["type"] := "ThrowStatement";
  __n90 := {  };
  __n90["type"] := "Literal";
  __n90["value"] := "Throw in try";
  __n90["raw"] := "\"Throw in try\"";
  __n89["argument"] := __n90;
  __n66 := [ __n67, __n89 ];
  __n65["body"] := __n66;
  __n91 := [  ];
  __n65["letDeclarations"] := __n91;
  __n92 := [  ];
  __n65["constDeclarations"] := __n92;
  __n64["block"] := __n65;
  __n93 := {  };
  __n93["type"] := "CatchClause";
  __n94 := {  };
  __n94["type"] := "Identifier";
  __n94["name"] := "ex";
  __n93["param"] := __n94;
  __n95 := {  };
  __n95["type"] := "BlockStatement";
  __n97 := {  };
  __n97["type"] := "ExpressionStatement";
  __n98 := {  };
  __n98["type"] := "AssignmentExpression";
  __n98["operator"] := "=";
  __n99 := {  };
  __n99["type"] := "Identifier";
  __n99["name"] := "e";
  __n98["left"] := __n99;
  __n100 := {  };
  __n100["type"] := "Identifier";
  __n100["name"] := "ex";
  __n98["right"] := __n100;
  __n97["expression"] := __n98;
  __n96 := [ __n97 ];
  __n95["body"] := __n96;
  __n101 := [  ];
  __n95["letDeclarations"] := __n101;
  __n102 := [  ];
  __n95["constDeclarations"] := __n102;
  __n93["body"] := __n95;
  __n103 := [ "ex" ];
  __n93["paramsNames"] := __n103;
  __n64["handler"] := __n93;
  __n64["finalizer"] := null;
  __n1 := [ __n2, __n12, __n60, __n64 ];
  __n0["body"] := __n1;
  __n104 := [ "a", "b", "c", "d", "e" ];
  __n0["variableDeclarations"] := __n104;
  __n105 := [  ];
  __n0["functionDeclarations"] := __n105;
  __n106 := [  ];
  __n0["letDeclarations"] := __n106;
  __n107 := [  ];
  __n0["constDeclarations"] := __n107;
  __n0["codeType"] := "global";
  __n0["strict"] := false;
  return __n0
  }
