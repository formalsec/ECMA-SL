Test do_while.js:
  $ js2esl do_while.js
  function buildAST () {
  __n0 := {  };
  __n0["type"] := "Program";
  __n0["sourceType"] := "script";
  __n2 := {  };
  __n2["type"] := "LabeledStatement";
  __n3 := {  };
  __n3["type"] := "Identifier";
  __n3["name"] := "do_while_label1";
  __n2["label"] := __n3;
  __n4 := {  };
  __n4["type"] := "DoWhileStatement";
  __n5 := {  };
  __n5["type"] := "BlockStatement";
  __n7 := {  };
  __n7["type"] := "ExpressionStatement";
  __n8 := {  };
  __n8["type"] := "AssignmentExpression";
  __n8["operator"] := "=";
  __n9 := {  };
  __n9["type"] := "Identifier";
  __n9["name"] := "a1";
  __n8["left"] := __n9;
  __n10 := {  };
  __n10["type"] := "Literal";
  __n10["value"] := 4.;
  __n10["raw"] := "4";
  __n8["right"] := __n10;
  __n7["expression"] := __n8;
  __n11 := {  };
  __n11["type"] := "ExpressionStatement";
  __n12 := {  };
  __n12["type"] := "AssignmentExpression";
  __n12["operator"] := "=";
  __n13 := {  };
  __n13["type"] := "Identifier";
  __n13["name"] := "a2";
  __n12["left"] := __n13;
  __n14 := {  };
  __n14["type"] := "Literal";
  __n14["value"] := 0.;
  __n14["raw"] := "0";
  __n12["right"] := __n14;
  __n11["expression"] := __n12;
  __n15 := {  };
  __n15["type"] := "LabeledStatement";
  __n16 := {  };
  __n16["type"] := "Identifier";
  __n16["name"] := "inner_label";
  __n15["label"] := __n16;
  __n17 := {  };
  __n17["type"] := "DoWhileStatement";
  __n18 := {  };
  __n18["type"] := "BlockStatement";
  __n20 := {  };
  __n20["type"] := "ExpressionStatement";
  __n21 := {  };
  __n21["type"] := "AssignmentExpression";
  __n21["operator"] := "=";
  __n22 := {  };
  __n22["type"] := "Identifier";
  __n22["name"] := "a1";
  __n21["left"] := __n22;
  __n23 := {  };
  __n23["type"] := "BinaryExpression";
  __n23["operator"] := "-";
  __n24 := {  };
  __n24["type"] := "Identifier";
  __n24["name"] := "a1";
  __n23["left"] := __n24;
  __n25 := {  };
  __n25["type"] := "Literal";
  __n25["value"] := 1.;
  __n25["raw"] := "1";
  __n23["right"] := __n25;
  __n21["right"] := __n23;
  __n20["expression"] := __n21;
  __n26 := {  };
  __n26["type"] := "IfStatement";
  __n27 := {  };
  __n27["type"] := "BinaryExpression";
  __n27["operator"] := "===";
  __n28 := {  };
  __n28["type"] := "BinaryExpression";
  __n28["operator"] := "/";
  __n29 := {  };
  __n29["type"] := "Identifier";
  __n29["name"] := "a1";
  __n28["left"] := __n29;
  __n30 := {  };
  __n30["type"] := "Literal";
  __n30["value"] := 2.;
  __n30["raw"] := "2";
  __n28["right"] := __n30;
  __n27["left"] := __n28;
  __n31 := {  };
  __n31["type"] := "Literal";
  __n31["value"] := 1.;
  __n31["raw"] := "1";
  __n27["right"] := __n31;
  __n26["test"] := __n27;
  __n32 := {  };
  __n32["type"] := "ContinueStatement";
  __n32["label"] := "inner_label";
  __n26["consequent"] := __n32;
  __n26["alternate"] := null;
  __n33 := {  };
  __n33["type"] := "ExpressionStatement";
  __n34 := {  };
  __n34["type"] := "AssignmentExpression";
  __n34["operator"] := "=";
  __n35 := {  };
  __n35["type"] := "Identifier";
  __n35["name"] := "a2";
  __n34["left"] := __n35;
  __n36 := {  };
  __n36["type"] := "BinaryExpression";
  __n36["operator"] := "+";
  __n37 := {  };
  __n37["type"] := "Identifier";
  __n37["name"] := "a2";
  __n36["left"] := __n37;
  __n38 := {  };
  __n38["type"] := "Literal";
  __n38["value"] := 1.;
  __n38["raw"] := "1";
  __n36["right"] := __n38;
  __n34["right"] := __n36;
  __n33["expression"] := __n34;
  __n19 := [ __n20, __n26, __n33 ];
  __n18["body"] := __n19;
  __n39 := [  ];
  __n18["letDeclarations"] := __n39;
  __n40 := [  ];
  __n18["constDeclarations"] := __n40;
  __n17["body"] := __n18;
  __n41 := {  };
  __n41["type"] := "BinaryExpression";
  __n41["operator"] := ">";
  __n42 := {  };
  __n42["type"] := "Identifier";
  __n42["name"] := "a1";
  __n41["left"] := __n42;
  __n43 := {  };
  __n43["type"] := "Literal";
  __n43["value"] := 0.;
  __n43["raw"] := "0";
  __n41["right"] := __n43;
  __n17["test"] := __n41;
  __n15["body"] := __n17;
  __n44 := {  };
  __n44["type"] := "BreakStatement";
  __n44["label"] := "do_while_label1";
  __n6 := [ __n7, __n11, __n15, __n44 ];
  __n5["body"] := __n6;
  __n45 := [  ];
  __n5["letDeclarations"] := __n45;
  __n46 := [  ];
  __n5["constDeclarations"] := __n46;
  __n4["body"] := __n5;
  __n47 := {  };
  __n47["type"] := "Literal";
  __n47["value"] := true;
  __n47["raw"] := "true";
  __n4["test"] := __n47;
  __n2["body"] := __n4;
  __n1 := [ __n2 ];
  __n0["body"] := __n1;
  __n48 := [  ];
  __n0["variableDeclarations"] := __n48;
  __n49 := [  ];
  __n0["functionDeclarations"] := __n49;
  __n50 := [  ];
  __n0["letDeclarations"] := __n50;
  __n51 := [  ];
  __n0["constDeclarations"] := __n51;
  __n0["codeType"] := "global";
  __n0["strict"] := false;
  return __n0
  }
